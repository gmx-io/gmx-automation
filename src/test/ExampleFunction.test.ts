import { Web3FunctionResultCallData } from "@gelatonetwork/web3-functions-sdk";
import { expect } from "chai";
import hre from "hardhat";
import DataStore from "../abi/DataStore.json";
import { createMockedEventContext, wrapMockContext } from "../lib/mock";
import { getRandomHash } from "../lib/random";
import { exampleFunction } from "../web3-functions/example-function/exampleFunction";
import sinon from "sinon";

describe("ExampleFunction Tests", function () {
  this.timeout(0);

  it("canExec == true, ", async () => {
    const uintKey = getRandomHash();
    const gelatoContext = createMockedEventContext({
      log: {
        blockNumber: 48758053,
        blockHash:
          "0x6794a56583329794f184d50862019ecf7b6d8ba6b3210f68ca4b91a8fa81817d",
        transactionIndex: 0,
        removed: false,
        address: "0xb74de3F91e04d0920ff26Ac28956272E8d67404D",
        data: "0x000000000000000000000000b8fc96d7a413c462f611a7ac0c912c2fe26eabc4000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000114f7261636c65507269636555706461746500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000580000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006800000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000ba5ddd1f9d7f570dc94a51479a000e3bce9671960000000000000000000000000000000000000000000000000000000000000005746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f4122df7be4ccd46d7397daf2387b3a14e53d967000000000000000000000000000000000000000000000000000000000000000870726f76696465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000015a93c111d2ac00000000000000000000000000000000000000000000000000000000000000086d696e5072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000015aa139577c9a00000000000000000000000000000000000000000000000000000000000000086d61785072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000676ba3a4000000000000000000000000000000000000000000000000000000000000000974696d657374616d
        topics: [
          "0x137a44067c8961cd7e1d876f4754a5a3a75989b4552f1843fc69c3b372def160",
          "0x41c7b30afab659d385f1996d0addfa6e647694862e72378d0b43773f556cbeb2",
          "0x000000000000000000000000c4da4c24fd591125c3f47b340b6f4f76111883d8",
        ],
        transactionHash:
          "0x6244f55626ccd1127f1866b6b842161116ff603203a45187f6558a33354fb228",
        logIndex: 0,
      },
      userArgs: {
        uintKey,
      },
    });
    const context = wrapMockContext(gelatoContext);

    sinon
      .stub(context.services.marketService, "getMarketsData")
      .returns(Promise.resolve([]));

    const result = await exampleFunction(context);

    expect(result.canExec).to.equal(true);

    if (!result.canExec) throw new Error("canExec == false");

    const callData = result.callData[0] as Web3FunctionResultCallData;

    const dataStoreInterface = new hre.ethers.utils.Interface(DataStore.abi);
    const decodedData = dataStoreInterface.decodeFunctionData(
      "setUint",
      callData.data
    );
    expect(decodedData.key).to.equal(uintKey);
    expect(decodedData.value.toString()).to.equal("381065622573740");
  });
});
