// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export declare namespace RelayUtils {
  export type ExternalCallsStruct = {
    externalCallTargets: PromiseOrValue<string>[];
    externalCallDataList: PromiseOrValue<BytesLike>[];
    refundTokens: PromiseOrValue<string>[];
    refundReceivers: PromiseOrValue<string>[];
  };

  export type ExternalCallsStructOutput = [
    string[],
    string[],
    string[],
    string[]
  ] & {
    externalCallTargets: string[];
    externalCallDataList: string[];
    refundTokens: string[];
    refundReceivers: string[];
  };

  export type TokenPermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    token: PromiseOrValue<string>;
  };

  export type TokenPermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    token: string;
  };

  export type FeeParamsStruct = {
    feeToken: PromiseOrValue<string>;
    feeAmount: PromiseOrValue<BigNumberish>;
    feeSwapPath: PromiseOrValue<string>[];
  };

  export type FeeParamsStructOutput = [string, BigNumber, string[]] & {
    feeToken: string;
    feeAmount: BigNumber;
    feeSwapPath: string[];
  };

  export type RelayParamsStruct = {
    oracleParams: OracleUtils.SetPricesParamsStruct;
    externalCalls: RelayUtils.ExternalCallsStruct;
    tokenPermits: RelayUtils.TokenPermitStruct[];
    fee: RelayUtils.FeeParamsStruct;
    userNonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    desChainId: PromiseOrValue<BigNumberish>;
  };

  export type RelayParamsStructOutput = [
    OracleUtils.SetPricesParamsStructOutput,
    RelayUtils.ExternalCallsStructOutput,
    RelayUtils.TokenPermitStructOutput[],
    RelayUtils.FeeParamsStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    oracleParams: OracleUtils.SetPricesParamsStructOutput;
    externalCalls: RelayUtils.ExternalCallsStructOutput;
    tokenPermits: RelayUtils.TokenPermitStructOutput[];
    fee: RelayUtils.FeeParamsStructOutput;
    userNonce: BigNumber;
    deadline: BigNumber;
    signature: string;
    desChainId: BigNumber;
  };

  export type UpdateOrderParamsStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
    autoCancel: PromiseOrValue<boolean>;
  };

  export type UpdateOrderParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    sizeDeltaUsd: BigNumber;
    acceptablePrice: BigNumber;
    triggerPrice: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
    autoCancel: boolean;
  };
}

export declare namespace SubaccountRelayUtils {
  export type SubaccountApprovalStruct = {
    subaccount: PromiseOrValue<string>;
    shouldAdd: PromiseOrValue<boolean>;
    expiresAt: PromiseOrValue<BigNumberish>;
    maxAllowedCount: PromiseOrValue<BigNumberish>;
    actionType: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    integrationId: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type SubaccountApprovalStructOutput = [
    string,
    boolean,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    subaccount: string;
    shouldAdd: boolean;
    expiresAt: BigNumber;
    maxAllowedCount: BigNumber;
    actionType: string;
    nonce: BigNumber;
    deadline: BigNumber;
    integrationId: string;
    signature: string;
  };
}

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
    referralCode: PromiseOrValue<BytesLike>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateOrderParamsStructOutput = [
    IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    string[]
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: number;
    decreasePositionSwapType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: string;
    dataList: string[];
  };
}

export interface SubaccountRelayUtilsInterface extends utils.Interface {
  functions: {
    "CANCEL_ORDER_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_NUMBERS_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_TYPEHASH()": FunctionFragment;
    "REMOVE_SUBACCOUNT_TYPEHASH()": FunctionFragment;
    "SUBACCOUNT_APPROVAL_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_PARAMS_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_TYPEHASH()": FunctionFragment;
    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)": FunctionFragment;
    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,uint256,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))": FunctionFragment;
    "getRemoveSubaccountStructHash(((address[],address[],bytes[]),(address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address)": FunctionFragment;
    "getSubaccountApprovalStructHash((address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32,(uint256,uint256,uint256,uint256,uint256,bool),bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CANCEL_ORDER_TYPEHASH"
      | "CREATE_ORDER_ADDRESSES_TYPEHASH"
      | "CREATE_ORDER_NUMBERS_TYPEHASH"
      | "CREATE_ORDER_TYPEHASH"
      | "REMOVE_SUBACCOUNT_TYPEHASH"
      | "SUBACCOUNT_APPROVAL_TYPEHASH"
      | "UPDATE_ORDER_PARAMS_TYPEHASH"
      | "UPDATE_ORDER_TYPEHASH"
      | "getCancelOrderStructHash"
      | "getCreateOrderStructHash"
      | "getRemoveSubaccountStructHash"
      | "getSubaccountApprovalStructHash"
      | "getUpdateOrderStructHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelOrderStructHash",
    values: [
      RelayUtils.RelayParamsStruct,
      SubaccountRelayUtils.SubaccountApprovalStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateOrderStructHash",
    values: [
      RelayUtils.RelayParamsStruct,
      SubaccountRelayUtils.SubaccountApprovalStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IBaseOrderUtils.CreateOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoveSubaccountStructHash",
    values: [RelayUtils.RelayParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubaccountApprovalStructHash",
    values: [SubaccountRelayUtils.SubaccountApprovalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateOrderStructHash",
    values: [
      RelayUtils.RelayParamsStruct,
      SubaccountRelayUtils.SubaccountApprovalStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      RelayUtils.UpdateOrderParamsStruct,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelOrderStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateOrderStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoveSubaccountStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubaccountApprovalStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateOrderStructHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SubaccountRelayUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubaccountRelayUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    getCancelOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRemoveSubaccountStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUpdateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      params: RelayUtils.UpdateOrderParamsStruct,
      increaseExecutionFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  getCancelOrderStructHash(
    relayParams: RelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateOrderStructHash(
    relayParams: RelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    collateralDeltaAmount: PromiseOrValue<BigNumberish>,
    params: IBaseOrderUtils.CreateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getRemoveSubaccountStructHash(
    relayParams: RelayUtils.RelayParamsStruct,
    subaccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubaccountApprovalStructHash(
    subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getUpdateOrderStructHash(
    relayParams: RelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    params: RelayUtils.UpdateOrderParamsStruct,
    increaseExecutionFee: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    getCancelOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getRemoveSubaccountStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getUpdateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      params: RelayUtils.UpdateOrderParamsStruct,
      increaseExecutionFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    getCancelOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoveSubaccountStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      params: RelayUtils.UpdateOrderParamsStruct,
      increaseExecutionFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CANCEL_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_SUBACCOUNT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBACCOUNT_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_PARAMS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCancelOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoveSubaccountStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateOrderStructHash(
      relayParams: RelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountRelayUtils.SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      params: RelayUtils.UpdateOrderParamsStruct,
      increaseExecutionFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
