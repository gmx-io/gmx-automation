// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type SubaccountApprovalStruct = {
  subaccount: PromiseOrValue<string>;
  shouldAdd: PromiseOrValue<boolean>;
  expiresAt: PromiseOrValue<BigNumberish>;
  maxAllowedCount: PromiseOrValue<BigNumberish>;
  actionType: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
  integrationId: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type SubaccountApprovalStructOutput = [
  string,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  subaccount: string;
  shouldAdd: boolean;
  expiresAt: BigNumber;
  maxAllowedCount: BigNumber;
  actionType: string;
  nonce: BigNumber;
  deadline: BigNumber;
  integrationId: string;
  signature: string;
};

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export declare namespace IRelayUtils {
  export type ExternalCallsStruct = {
    sendTokens: PromiseOrValue<string>[];
    sendAmounts: PromiseOrValue<BigNumberish>[];
    externalCallTargets: PromiseOrValue<string>[];
    externalCallDataList: PromiseOrValue<BytesLike>[];
    refundTokens: PromiseOrValue<string>[];
    refundReceivers: PromiseOrValue<string>[];
  };

  export type ExternalCallsStructOutput = [
    string[],
    BigNumber[],
    string[],
    string[],
    string[],
    string[]
  ] & {
    sendTokens: string[];
    sendAmounts: BigNumber[];
    externalCallTargets: string[];
    externalCallDataList: string[];
    refundTokens: string[];
    refundReceivers: string[];
  };

  export type TokenPermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    token: PromiseOrValue<string>;
  };

  export type TokenPermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    token: string;
  };

  export type FeeParamsStruct = {
    feeToken: PromiseOrValue<string>;
    feeAmount: PromiseOrValue<BigNumberish>;
    feeSwapPath: PromiseOrValue<string>[];
  };

  export type FeeParamsStructOutput = [string, BigNumber, string[]] & {
    feeToken: string;
    feeAmount: BigNumber;
    feeSwapPath: string[];
  };

  export type RelayParamsStruct = {
    oracleParams: OracleUtils.SetPricesParamsStruct;
    externalCalls: IRelayUtils.ExternalCallsStruct;
    tokenPermits: IRelayUtils.TokenPermitStruct[];
    fee: IRelayUtils.FeeParamsStruct;
    userNonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    desChainId: PromiseOrValue<BigNumberish>;
  };

  export type RelayParamsStructOutput = [
    OracleUtils.SetPricesParamsStructOutput,
    IRelayUtils.ExternalCallsStructOutput,
    IRelayUtils.TokenPermitStructOutput[],
    IRelayUtils.FeeParamsStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    oracleParams: OracleUtils.SetPricesParamsStructOutput;
    externalCalls: IRelayUtils.ExternalCallsStructOutput;
    tokenPermits: IRelayUtils.TokenPermitStructOutput[];
    fee: IRelayUtils.FeeParamsStructOutput;
    userNonce: BigNumber;
    deadline: BigNumber;
    signature: string;
    desChainId: BigNumber;
  };

  export type UpdateOrderParamsStruct = {
    key: PromiseOrValue<BytesLike>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
    autoCancel: PromiseOrValue<boolean>;
    executionFeeIncrease: PromiseOrValue<BigNumberish>;
  };

  export type UpdateOrderParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    key: string;
    sizeDeltaUsd: BigNumber;
    acceptablePrice: BigNumber;
    triggerPrice: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
    autoCancel: boolean;
    executionFeeIncrease: BigNumber;
  };

  export type BatchParamsStruct = {
    createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStruct[];
    updateOrderParamsList: IRelayUtils.UpdateOrderParamsStruct[];
    cancelOrderKeys: PromiseOrValue<BytesLike>[];
  };

  export type BatchParamsStructOutput = [
    IBaseOrderUtils.CreateOrderParamsStructOutput[],
    IRelayUtils.UpdateOrderParamsStructOutput[],
    string[]
  ] & {
    createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStructOutput[];
    updateOrderParamsList: IRelayUtils.UpdateOrderParamsStructOutput[];
    cancelOrderKeys: string[];
  };

  export type BridgeOutParamsStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    provider: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type BridgeOutParamsStructOutput = [
    string,
    BigNumber,
    string,
    string
  ] & { token: string; amount: BigNumber; provider: string; data: string };

  export type TransferRequestsStruct = {
    tokens: PromiseOrValue<string>[];
    receivers: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type TransferRequestsStructOutput = [
    string[],
    string[],
    BigNumber[]
  ] & { tokens: string[]; receivers: string[]; amounts: BigNumber[] };
}

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
    referralCode: PromiseOrValue<BytesLike>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateOrderParamsStructOutput = [
    IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    string[]
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: number;
    decreasePositionSwapType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: string;
    dataList: string[];
  };
}

export declare namespace IDepositUtils {
  export type CreateDepositParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateDepositParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateDepositParamsStruct = {
    addresses: IDepositUtils.CreateDepositParamsAddressesStruct;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateDepositParamsStructOutput = [
    IDepositUtils.CreateDepositParamsAddressesStructOutput,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IDepositUtils.CreateDepositParamsAddressesStructOutput;
    minMarketTokens: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace IGlvDepositUtils {
  export type CreateGlvDepositParamsAddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateGlvDepositParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateGlvDepositParamsStruct = {
    addresses: IGlvDepositUtils.CreateGlvDepositParamsAddressesStruct;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateGlvDepositParamsStructOutput = [
    IGlvDepositUtils.CreateGlvDepositParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    string[]
  ] & {
    addresses: IGlvDepositUtils.CreateGlvDepositParamsAddressesStructOutput;
    minGlvTokens: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
    dataList: string[];
  };
}

export declare namespace IGlvWithdrawalUtils {
  export type CreateGlvWithdrawalParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    glv: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateGlvWithdrawalParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    glv: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateGlvWithdrawalParamsStruct = {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStruct;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateGlvWithdrawalParamsStructOutput = [
    IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace IShiftUtils {
  export type CreateShiftParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type CreateShiftParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    fromMarket: string;
    toMarket: string;
  };

  export type CreateShiftParamsStruct = {
    addresses: IShiftUtils.CreateShiftParamsAddressesStruct;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateShiftParamsStructOutput = [
    IShiftUtils.CreateShiftParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IShiftUtils.CreateShiftParamsAddressesStructOutput;
    minMarketTokens: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace IWithdrawalUtils {
  export type CreateWithdrawalParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateWithdrawalParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateWithdrawalParamsStruct = {
    addresses: IWithdrawalUtils.CreateWithdrawalParamsAddressesStruct;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateWithdrawalParamsStructOutput = [
    IWithdrawalUtils.CreateWithdrawalParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IWithdrawalUtils.CreateWithdrawalParamsAddressesStructOutput;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export interface RelayUtilsInterface extends utils.Interface {
  functions: {
    "BATCH_TYPEHASH()": FunctionFragment;
    "BRIDGE_OUT_TYPEHASH()": FunctionFragment;
    "CANCEL_ORDER_TYPEHASH()": FunctionFragment;
    "CLAIM_AFFILIATE_REWARDS_TYPEHASH()": FunctionFragment;
    "CLAIM_COLLATERAL_TYPEHASH()": FunctionFragment;
    "CLAIM_FUNDING_FEES_TYPEHASH()": FunctionFragment;
    "CREATE_DEPOSIT_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_DEPOSIT_TYPEHASH()": FunctionFragment;
    "CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_GLV_DEPOSIT_TYPEHASH()": FunctionFragment;
    "CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_GLV_WITHDRAWAL_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_NUMBERS_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_PARAMS_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_TYPEHASH()": FunctionFragment;
    "CREATE_SHIFT_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_SHIFT_TYPEHASH()": FunctionFragment;
    "CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_WITHDRAWAL_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR_NAME_HASH()": FunctionFragment;
    "DOMAIN_SEPARATOR_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR_VERSION_HASH()": FunctionFragment;
    "REMOVE_SUBACCOUNT_TYPEHASH()": FunctionFragment;
    "SET_TRADER_REFERRAL_CODE_TYPEHASH()": FunctionFragment;
    "SUBACCOUNT_APPROVAL_TYPEHASH()": FunctionFragment;
    "TRANSFER_REQUESTS_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_PARAMS_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_TYPEHASH()": FunctionFragment;
    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))": FunctionFragment;
    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))": FunctionFragment;
    "getBridgeOutStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,uint256,address,bytes))": FunctionFragment;
    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)": FunctionFragment;
    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)": FunctionFragment;
    "getClaimAffiliateRewardsStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address[],address[],address)": FunctionFragment;
    "getClaimCollateralStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address[],address[],uint256[],address)": FunctionFragment;
    "getClaimFundingFeesStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address[],address[],address)": FunctionFragment;
    "getCreateDepositStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address[],address[],uint256[]),((address,address,address,address,address,address,address[],address[]),uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
    "getCreateGlvDepositStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address[],address[],uint256[]),((address,address,address,address,address,address,address,address[],address[]),uint256,uint256,uint256,bool,bool,bytes32[]))": FunctionFragment;
    "getCreateGlvWithdrawalStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address[],address[],uint256[]),((address,address,address,address,address,address[],address[]),uint256,uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))": FunctionFragment;
    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))": FunctionFragment;
    "getCreateShiftStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address[],address[],uint256[]),((address,address,address,address,address),uint256,uint256,uint256,bytes32[]))": FunctionFragment;
    "getCreateWithdrawalStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address[],address[],uint256[]),((address,address,address,address,address[],address[]),uint256,uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
    "getDomainSeparator(uint256)": FunctionFragment;
    "getRemoveSubaccountStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address)": FunctionFragment;
    "getSubaccountApprovalStructHash((address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes))": FunctionFragment;
    "getTraderReferralCodeStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)": FunctionFragment;
    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))": FunctionFragment;
    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))": FunctionFragment;
    "validateSignature(bytes32,bytes,address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BATCH_TYPEHASH"
      | "BRIDGE_OUT_TYPEHASH"
      | "CANCEL_ORDER_TYPEHASH"
      | "CLAIM_AFFILIATE_REWARDS_TYPEHASH"
      | "CLAIM_COLLATERAL_TYPEHASH"
      | "CLAIM_FUNDING_FEES_TYPEHASH"
      | "CREATE_DEPOSIT_ADDRESSES_TYPEHASH"
      | "CREATE_DEPOSIT_TYPEHASH"
      | "CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH"
      | "CREATE_GLV_DEPOSIT_TYPEHASH"
      | "CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH"
      | "CREATE_GLV_WITHDRAWAL_TYPEHASH"
      | "CREATE_ORDER_ADDRESSES_TYPEHASH"
      | "CREATE_ORDER_NUMBERS_TYPEHASH"
      | "CREATE_ORDER_PARAMS_TYPEHASH"
      | "CREATE_ORDER_TYPEHASH"
      | "CREATE_SHIFT_ADDRESSES_TYPEHASH"
      | "CREATE_SHIFT_TYPEHASH"
      | "CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH"
      | "CREATE_WITHDRAWAL_TYPEHASH"
      | "DOMAIN_SEPARATOR_NAME_HASH"
      | "DOMAIN_SEPARATOR_TYPEHASH"
      | "DOMAIN_SEPARATOR_VERSION_HASH"
      | "REMOVE_SUBACCOUNT_TYPEHASH"
      | "SET_TRADER_REFERRAL_CODE_TYPEHASH"
      | "SUBACCOUNT_APPROVAL_TYPEHASH"
      | "TRANSFER_REQUESTS_TYPEHASH"
      | "UPDATE_ORDER_PARAMS_TYPEHASH"
      | "UPDATE_ORDER_TYPEHASH"
      | "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"
      | "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"
      | "getBridgeOutStructHash"
      | "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"
      | "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"
      | "getClaimAffiliateRewardsStructHash"
      | "getClaimCollateralStructHash"
      | "getClaimFundingFeesStructHash"
      | "getCreateDepositStructHash"
      | "getCreateGlvDepositStructHash"
      | "getCreateGlvWithdrawalStructHash"
      | "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"
      | "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"
      | "getCreateShiftStructHash"
      | "getCreateWithdrawalStructHash"
      | "getDomainSeparator"
      | "getRemoveSubaccountStructHash"
      | "getSubaccountApprovalStructHash"
      | "getTraderReferralCodeStructHash"
      | "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"
      | "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"
      | "validateSignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BATCH_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_OUT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_AFFILIATE_REWARDS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_COLLATERAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_FUNDING_FEES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_DEPOSIT_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_DEPOSIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_GLV_DEPOSIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_GLV_WITHDRAWAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_PARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_SHIFT_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_SHIFT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_WITHDRAWAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_NAME_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_VERSION_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SET_TRADER_REFERRAL_CODE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_REQUESTS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))",
    values: [
      IRelayUtils.RelayParamsStruct,
      SubaccountApprovalStruct,
      PromiseOrValue<string>,
      IRelayUtils.BatchParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))",
    values: [IRelayUtils.RelayParamsStruct, IRelayUtils.BatchParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeOutStructHash",
    values: [IRelayUtils.RelayParamsStruct, IRelayUtils.BridgeOutParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)",
    values: [IRelayUtils.RelayParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)",
    values: [
      IRelayUtils.RelayParamsStruct,
      SubaccountApprovalStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimAffiliateRewardsStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimCollateralStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimFundingFeesStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateDepositStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      IRelayUtils.TransferRequestsStruct,
      IDepositUtils.CreateDepositParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateGlvDepositStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      IRelayUtils.TransferRequestsStruct,
      IGlvDepositUtils.CreateGlvDepositParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateGlvWithdrawalStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      IRelayUtils.TransferRequestsStruct,
      IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))",
    values: [
      IRelayUtils.RelayParamsStruct,
      IBaseOrderUtils.CreateOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))",
    values: [
      IRelayUtils.RelayParamsStruct,
      SubaccountApprovalStruct,
      PromiseOrValue<string>,
      IBaseOrderUtils.CreateOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateShiftStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      IRelayUtils.TransferRequestsStruct,
      IShiftUtils.CreateShiftParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateWithdrawalStructHash",
    values: [
      IRelayUtils.RelayParamsStruct,
      IRelayUtils.TransferRequestsStruct,
      IWithdrawalUtils.CreateWithdrawalParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemoveSubaccountStructHash",
    values: [IRelayUtils.RelayParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubaccountApprovalStructHash",
    values: [SubaccountApprovalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderReferralCodeStructHash",
    values: [IRelayUtils.RelayParamsStruct, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
    values: [
      IRelayUtils.RelayParamsStruct,
      SubaccountApprovalStruct,
      PromiseOrValue<string>,
      IRelayUtils.UpdateOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
    values: [IRelayUtils.RelayParamsStruct, IRelayUtils.UpdateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignature",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BATCH_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_OUT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_AFFILIATE_REWARDS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_COLLATERAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_FUNDING_FEES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_DEPOSIT_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_DEPOSIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_GLV_DEPOSIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_GLV_WITHDRAWAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_PARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_SHIFT_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_SHIFT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_WITHDRAWAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_NAME_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_VERSION_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SET_TRADER_REFERRAL_CODE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_REQUESTS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeOutStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimAffiliateRewardsStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimCollateralStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimFundingFeesStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateDepositStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateGlvDepositStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateGlvWithdrawalStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateShiftStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateWithdrawalStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemoveSubaccountStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubaccountApprovalStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTraderReferralCodeStructHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RelayUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    BRIDGE_OUT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CLAIM_AFFILIATE_REWARDS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CLAIM_COLLATERAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CLAIM_FUNDING_FEES_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_GLV_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_GLV_WITHDRAWAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_SHIFT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_SHIFT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR_NAME_HASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR_VERSION_HASH(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SET_TRADER_REFERRAL_CODE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_REQUESTS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBridgeOutStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BridgeOutParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaimAffiliateRewardsStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaimCollateralStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      timeKeys: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getClaimFundingFeesStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateGlvDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateGlvWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateShiftStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCreateWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDomainSeparator(
      sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRemoveSubaccountStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTraderReferralCodeStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validateSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      signatureType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  BRIDGE_OUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CLAIM_AFFILIATE_REWARDS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CLAIM_COLLATERAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CLAIM_FUNDING_FEES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_DEPOSIT_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  CREATE_GLV_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  CREATE_GLV_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_SHIFT_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_SHIFT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  CREATE_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR_NAME_HASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR_VERSION_HASH(overrides?: CallOverrides): Promise<string>;

  REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SET_TRADER_REFERRAL_CODE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  TRANSFER_REQUESTS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    params: IRelayUtils.BatchParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    params: IRelayUtils.BatchParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getBridgeOutStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    params: IRelayUtils.BridgeOutParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"(
    relayParams: IRelayUtils.RelayParamsStruct,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"(
    relayParams: IRelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimAffiliateRewardsStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    markets: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimCollateralStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    markets: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    timeKeys: PromiseOrValue<BigNumberish>[],
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getClaimFundingFeesStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    markets: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    receiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateDepositStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IDepositUtils.CreateDepositParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateGlvDepositStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateGlvWithdrawalStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    params: IBaseOrderUtils.CreateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    params: IBaseOrderUtils.CreateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateShiftStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IShiftUtils.CreateShiftParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getCreateWithdrawalStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getDomainSeparator(
    sourceChainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRemoveSubaccountStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    subaccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubaccountApprovalStructHash(
    subaccountApproval: SubaccountApprovalStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getTraderReferralCodeStructHash(
    relayParams: IRelayUtils.RelayParamsStruct,
    referralCode: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    subaccountApproval: SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    params: IRelayUtils.UpdateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
    relayParams: IRelayUtils.RelayParamsStruct,
    params: IRelayUtils.UpdateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  validateSignature(
    digest: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    expectedSigner: PromiseOrValue<string>,
    signatureType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    BRIDGE_OUT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CLAIM_AFFILIATE_REWARDS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CLAIM_COLLATERAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CLAIM_FUNDING_FEES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CREATE_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CREATE_GLV_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CREATE_GLV_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_SHIFT_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_SHIFT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CREATE_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR_NAME_HASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR_VERSION_HASH(overrides?: CallOverrides): Promise<string>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SET_TRADER_REFERRAL_CODE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    TRANSFER_REQUESTS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getBridgeOutStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BridgeOutParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimAffiliateRewardsStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimCollateralStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      timeKeys: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getClaimFundingFeesStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateGlvDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateGlvWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateShiftStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getCreateWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getDomainSeparator(
      sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRemoveSubaccountStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getTraderReferralCodeStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    validateSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      signatureType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    BRIDGE_OUT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIM_AFFILIATE_REWARDS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CLAIM_COLLATERAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIM_FUNDING_FEES_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_GLV_DEPOSIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_GLV_WITHDRAWAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_SHIFT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_SHIFT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_WITHDRAWAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_NAME_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_VERSION_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SET_TRADER_REFERRAL_CODE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_REQUESTS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBridgeOutStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BridgeOutParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimAffiliateRewardsStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimCollateralStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      timeKeys: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimFundingFeesStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateGlvDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateGlvWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateShiftStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainSeparator(
      sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemoveSubaccountStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraderReferralCodeStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      signatureType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BRIDGE_OUT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCEL_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLAIM_AFFILIATE_REWARDS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLAIM_COLLATERAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CLAIM_FUNDING_FEES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_DEPOSIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_GLV_DEPOSIT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_GLV_DEPOSIT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_GLV_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_GLV_WITHDRAWAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_PARAMS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_SHIFT_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_SHIFT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_WITHDRAWAL_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_WITHDRAWAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_NAME_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_VERSION_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_SUBACCOUNT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SET_TRADER_REFERRAL_CODE_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBACCOUNT_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRANSFER_REQUESTS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_PARAMS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[])[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBridgeOutStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.BridgeOutParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCancelOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,bytes32)"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimAffiliateRewardsStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimCollateralStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      timeKeys: PromiseOrValue<BigNumberish>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimFundingFeesStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      markets: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateGlvDepositStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateGlvWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCreateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateShiftStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateWithdrawalStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainSeparator(
      sourceChainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemoveSubaccountStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubaccountApprovalStructHash(
      subaccountApproval: SubaccountApprovalStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraderReferralCodeStructHash(
      relayParams: IRelayUtils.RelayParamsStruct,
      referralCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes32,bytes),address,(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUpdateOrderStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256))"(
      relayParams: IRelayUtils.RelayParamsStruct,
      params: IRelayUtils.UpdateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSignature(
      digest: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      signatureType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
