/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type ExternalCallsStruct = {
  sendTokens: PromiseOrValue<string>[];
  sendAmounts: PromiseOrValue<BigNumberish>[];
  externalCallTargets: PromiseOrValue<string>[];
  externalCallDataList: PromiseOrValue<BytesLike>[];
  refundTokens: PromiseOrValue<string>[];
  refundReceivers: PromiseOrValue<string>[];
};

export type ExternalCallsStructOutput = [
  string[],
  BigNumber[],
  string[],
  string[],
  string[],
  string[]
] & {
  sendTokens: string[];
  sendAmounts: BigNumber[];
  externalCallTargets: string[];
  externalCallDataList: string[];
  refundTokens: string[];
  refundReceivers: string[];
};

export type TokenPermitStruct = {
  owner: PromiseOrValue<string>;
  spender: PromiseOrValue<string>;
  value: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
  token: PromiseOrValue<string>;
};

export type TokenPermitStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string
] & {
  owner: string;
  spender: string;
  value: BigNumber;
  deadline: BigNumber;
  v: number;
  r: string;
  s: string;
  token: string;
};

export type FeeParamsStruct = {
  feeToken: PromiseOrValue<string>;
  feeAmount: PromiseOrValue<BigNumberish>;
  feeSwapPath: PromiseOrValue<string>[];
};

export type FeeParamsStructOutput = [string, BigNumber, string[]] & {
  feeToken: string;
  feeAmount: BigNumber;
  feeSwapPath: string[];
};

export type RelayParamsStruct = {
  oracleParams: OracleUtils.SetPricesParamsStruct;
  externalCalls: ExternalCallsStruct;
  tokenPermits: TokenPermitStruct[];
  fee: FeeParamsStruct;
  userNonce: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
  signature: PromiseOrValue<BytesLike>;
};

export type RelayParamsStructOutput = [
  OracleUtils.SetPricesParamsStructOutput,
  ExternalCallsStructOutput,
  TokenPermitStructOutput[],
  FeeParamsStructOutput,
  BigNumber,
  BigNumber,
  string
] & {
  oracleParams: OracleUtils.SetPricesParamsStructOutput;
  externalCalls: ExternalCallsStructOutput;
  tokenPermits: TokenPermitStructOutput[];
  fee: FeeParamsStructOutput;
  userNonce: BigNumber;
  deadline: BigNumber;
  signature: string;
};

export type SubaccountApprovalStruct = {
  subaccount: PromiseOrValue<string>;
  shouldAdd: PromiseOrValue<boolean>;
  expiresAt: PromiseOrValue<BigNumberish>;
  maxAllowedCount: PromiseOrValue<BigNumberish>;
  actionType: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
  signature: PromiseOrValue<BytesLike>;
};

export type SubaccountApprovalStructOutput = [
  string,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  subaccount: string;
  shouldAdd: boolean;
  expiresAt: BigNumber;
  maxAllowedCount: BigNumber;
  actionType: string;
  nonce: BigNumber;
  deadline: BigNumber;
  signature: string;
};

export type UpdateOrderParamsStruct = {
  key: PromiseOrValue<BytesLike>;
  sizeDeltaUsd: PromiseOrValue<BigNumberish>;
  acceptablePrice: PromiseOrValue<BigNumberish>;
  triggerPrice: PromiseOrValue<BigNumberish>;
  minOutputAmount: PromiseOrValue<BigNumberish>;
  validFromTime: PromiseOrValue<BigNumberish>;
  autoCancel: PromiseOrValue<boolean>;
  executionFeeIncrease: PromiseOrValue<BigNumberish>;
};

export type UpdateOrderParamsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber
] & {
  key: string;
  sizeDeltaUsd: BigNumber;
  acceptablePrice: BigNumber;
  triggerPrice: BigNumber;
  minOutputAmount: BigNumber;
  validFromTime: BigNumber;
  autoCancel: boolean;
  executionFeeIncrease: BigNumber;
};

export type BatchParamsStruct = {
  createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStruct[];
  updateOrderParamsList: UpdateOrderParamsStruct[];
  cancelOrderKeys: PromiseOrValue<BytesLike>[];
};

export type BatchParamsStructOutput = [
  IBaseOrderUtils.CreateOrderParamsStructOutput[],
  UpdateOrderParamsStructOutput[],
  string[]
] & {
  createOrderParamsList: IBaseOrderUtils.CreateOrderParamsStructOutput[];
  updateOrderParamsList: UpdateOrderParamsStructOutput[];
  cancelOrderKeys: string[];
};

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
    referralCode: PromiseOrValue<BytesLike>;
  };

  export type CreateOrderParamsStructOutput = [
    IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: number;
    decreasePositionSwapType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: string;
  };
}

export interface RelayUtilsInterface extends utils.Interface {
  functions: {
    "BATCH_TYPEHASH()": FunctionFragment;
    "CANCEL_ORDER_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_ADDRESSES_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_NUMBERS_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_PARAMS_TYPEHASH()": FunctionFragment;
    "CREATE_ORDER_TYPEHASH()": FunctionFragment;
    "REMOVE_SUBACCOUNT_TYPEHASH()": FunctionFragment;
    "SUBACCOUNT_APPROVAL_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_PARAMS_TYPEHASH()": FunctionFragment;
    "UPDATE_ORDER_TYPEHASH()": FunctionFragment;
    "getBatchStructHash(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes),(address,bool,uint256,uint256,bytes32,uint256,uint256,bytes),address,(((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32)[],(bytes32,uint256,uint256,uint256,uint256,uint256,bool,uint256)[],bytes32[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BATCH_TYPEHASH"
      | "CANCEL_ORDER_TYPEHASH"
      | "CREATE_ORDER_ADDRESSES_TYPEHASH"
      | "CREATE_ORDER_NUMBERS_TYPEHASH"
      | "CREATE_ORDER_PARAMS_TYPEHASH"
      | "CREATE_ORDER_TYPEHASH"
      | "REMOVE_SUBACCOUNT_TYPEHASH"
      | "SUBACCOUNT_APPROVAL_TYPEHASH"
      | "UPDATE_ORDER_PARAMS_TYPEHASH"
      | "UPDATE_ORDER_TYPEHASH"
      | "getBatchStructHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BATCH_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_PARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchStructHash",
    values: [
      RelayParamsStruct,
      SubaccountApprovalStruct,
      PromiseOrValue<string>,
      BatchParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BATCH_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_ADDRESSES_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_NUMBERS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_PARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_SUBACCOUNT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBACCOUNT_APPROVAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_PARAMS_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_ORDER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchStructHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RelayUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    getBatchStructHash(
      relayParams: RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  getBatchStructHash(
    relayParams: RelayParamsStruct,
    subaccountApproval: SubaccountApprovalStruct,
    account: PromiseOrValue<string>,
    params: BatchParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_NUMBERS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    getBatchStructHash(
      relayParams: RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CANCEL_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REMOVE_SUBACCOUNT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    SUBACCOUNT_APPROVAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_PARAMS_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_ORDER_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    getBatchStructHash(
      relayParams: RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BATCH_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CANCEL_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_ADDRESSES_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_NUMBERS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_PARAMS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REMOVE_SUBACCOUNT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBACCOUNT_APPROVAL_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_PARAMS_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_ORDER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchStructHash(
      relayParams: RelayParamsStruct,
      subaccountApproval: SubaccountApprovalStruct,
      account: PromiseOrValue<string>,
      params: BatchParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
