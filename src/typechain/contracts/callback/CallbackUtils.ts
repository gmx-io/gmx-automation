// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Deposit {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Deposit.AddressesStruct;
    numbers: Deposit.NumbersStruct;
    flags: Deposit.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Deposit.AddressesStructOutput,
    Deposit.NumbersStructOutput,
    Deposit.FlagsStructOutput,
    string[]
  ] & {
    addresses: Deposit.AddressesStructOutput;
    numbers: Deposit.NumbersStructOutput;
    flags: Deposit.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace GlvDeposit {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minGlvTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean] & {
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };

  export type PropsStruct = {
    addresses: GlvDeposit.AddressesStruct;
    numbers: GlvDeposit.NumbersStruct;
    flags: GlvDeposit.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvDeposit.AddressesStructOutput,
    GlvDeposit.NumbersStructOutput,
    GlvDeposit.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvDeposit.AddressesStructOutput;
    numbers: GlvDeposit.NumbersStructOutput;
    flags: GlvDeposit.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace GlvWithdrawal {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    glvTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    glvTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: GlvWithdrawal.AddressesStruct;
    numbers: GlvWithdrawal.NumbersStruct;
    flags: GlvWithdrawal.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvWithdrawal.AddressesStructOutput,
    GlvWithdrawal.NumbersStructOutput,
    GlvWithdrawal.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvWithdrawal.AddressesStructOutput;
    numbers: GlvWithdrawal.NumbersStructOutput;
    flags: GlvWithdrawal.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtTime: BigNumber;
    validFromTime: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
    autoCancel: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput,
    string[]
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Shift {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type PropsStruct = {
    addresses: Shift.AddressesStruct;
    numbers: Shift.NumbersStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Shift.AddressesStructOutput,
    Shift.NumbersStructOutput,
    string[]
  ] & {
    addresses: Shift.AddressesStructOutput;
    numbers: Shift.NumbersStructOutput;
    _dataList: string[];
  };
}

export declare namespace Withdrawal {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Withdrawal.AddressesStruct;
    numbers: Withdrawal.NumbersStruct;
    flags: Withdrawal.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Withdrawal.AddressesStructOutput,
    Withdrawal.NumbersStructOutput,
    Withdrawal.FlagsStructOutput,
    string[]
  ] & {
    addresses: Withdrawal.AddressesStructOutput;
    numbers: Withdrawal.NumbersStructOutput;
    flags: Withdrawal.FlagsStructOutput;
    _dataList: string[];
  };
}

export interface CallbackUtilsInterface extends utils.Interface {
  functions: {
    "getSavedCallbackContract(DataStore,address,address)": FunctionFragment;
    "isValidCallbackContract(address)": FunctionFragment;
    "validateCallbackGasLimit(DataStore,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSavedCallbackContract"
      | "isValidCallbackContract"
      | "validateCallbackGasLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSavedCallbackContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCallbackContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCallbackGasLimit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSavedCallbackContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCallbackContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCallbackGasLimit",
    data: BytesLike
  ): Result;

  events: {
    "AfterDepositCancellationError(bytes32,tuple)": EventFragment;
    "AfterDepositExecutionError(bytes32,tuple)": EventFragment;
    "AfterGlvDepositCancellationError(bytes32,tuple)": EventFragment;
    "AfterGlvDepositExecutionError(bytes32,tuple)": EventFragment;
    "AfterGlvWithdrawalCancellationError(bytes32,tuple)": EventFragment;
    "AfterGlvWithdrawalExecutionError(bytes32,tuple)": EventFragment;
    "AfterOrderCancellationError(bytes32,tuple)": EventFragment;
    "AfterOrderExecutionError(bytes32,tuple)": EventFragment;
    "AfterOrderFrozenError(bytes32,tuple)": EventFragment;
    "AfterShiftCancellationError(bytes32,tuple)": EventFragment;
    "AfterShiftExecutionError(bytes32,tuple)": EventFragment;
    "AfterWithdrawalCancellationError(bytes32,tuple)": EventFragment;
    "AfterWithdrawalExecutionError(bytes32,tuple)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AfterDepositCancellationError"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterDepositExecutionError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterGlvDepositCancellationError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterGlvDepositExecutionError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterGlvWithdrawalCancellationError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterGlvWithdrawalExecutionError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterOrderCancellationError"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterOrderExecutionError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterOrderFrozenError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterShiftCancellationError"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterShiftExecutionError"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterWithdrawalCancellationError"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AfterWithdrawalExecutionError"
  ): EventFragment;
}

export interface AfterDepositCancellationErrorEventObject {
  key: string;
  deposit: Deposit.PropsStructOutput;
}
export type AfterDepositCancellationErrorEvent = TypedEvent<
  [string, Deposit.PropsStructOutput],
  AfterDepositCancellationErrorEventObject
>;

export type AfterDepositCancellationErrorEventFilter =
  TypedEventFilter<AfterDepositCancellationErrorEvent>;

export interface AfterDepositExecutionErrorEventObject {
  key: string;
  deposit: Deposit.PropsStructOutput;
}
export type AfterDepositExecutionErrorEvent = TypedEvent<
  [string, Deposit.PropsStructOutput],
  AfterDepositExecutionErrorEventObject
>;

export type AfterDepositExecutionErrorEventFilter =
  TypedEventFilter<AfterDepositExecutionErrorEvent>;

export interface AfterGlvDepositCancellationErrorEventObject {
  key: string;
  glvDeposit: GlvDeposit.PropsStructOutput;
}
export type AfterGlvDepositCancellationErrorEvent = TypedEvent<
  [string, GlvDeposit.PropsStructOutput],
  AfterGlvDepositCancellationErrorEventObject
>;

export type AfterGlvDepositCancellationErrorEventFilter =
  TypedEventFilter<AfterGlvDepositCancellationErrorEvent>;

export interface AfterGlvDepositExecutionErrorEventObject {
  key: string;
  glvDeposit: GlvDeposit.PropsStructOutput;
}
export type AfterGlvDepositExecutionErrorEvent = TypedEvent<
  [string, GlvDeposit.PropsStructOutput],
  AfterGlvDepositExecutionErrorEventObject
>;

export type AfterGlvDepositExecutionErrorEventFilter =
  TypedEventFilter<AfterGlvDepositExecutionErrorEvent>;

export interface AfterGlvWithdrawalCancellationErrorEventObject {
  key: string;
  glvWithdrawal: GlvWithdrawal.PropsStructOutput;
}
export type AfterGlvWithdrawalCancellationErrorEvent = TypedEvent<
  [string, GlvWithdrawal.PropsStructOutput],
  AfterGlvWithdrawalCancellationErrorEventObject
>;

export type AfterGlvWithdrawalCancellationErrorEventFilter =
  TypedEventFilter<AfterGlvWithdrawalCancellationErrorEvent>;

export interface AfterGlvWithdrawalExecutionErrorEventObject {
  key: string;
  glvWithdrawal: GlvWithdrawal.PropsStructOutput;
}
export type AfterGlvWithdrawalExecutionErrorEvent = TypedEvent<
  [string, GlvWithdrawal.PropsStructOutput],
  AfterGlvWithdrawalExecutionErrorEventObject
>;

export type AfterGlvWithdrawalExecutionErrorEventFilter =
  TypedEventFilter<AfterGlvWithdrawalExecutionErrorEvent>;

export interface AfterOrderCancellationErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderCancellationErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderCancellationErrorEventObject
>;

export type AfterOrderCancellationErrorEventFilter =
  TypedEventFilter<AfterOrderCancellationErrorEvent>;

export interface AfterOrderExecutionErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderExecutionErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderExecutionErrorEventObject
>;

export type AfterOrderExecutionErrorEventFilter =
  TypedEventFilter<AfterOrderExecutionErrorEvent>;

export interface AfterOrderFrozenErrorEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type AfterOrderFrozenErrorEvent = TypedEvent<
  [string, Order.PropsStructOutput],
  AfterOrderFrozenErrorEventObject
>;

export type AfterOrderFrozenErrorEventFilter =
  TypedEventFilter<AfterOrderFrozenErrorEvent>;

export interface AfterShiftCancellationErrorEventObject {
  key: string;
  shift: Shift.PropsStructOutput;
}
export type AfterShiftCancellationErrorEvent = TypedEvent<
  [string, Shift.PropsStructOutput],
  AfterShiftCancellationErrorEventObject
>;

export type AfterShiftCancellationErrorEventFilter =
  TypedEventFilter<AfterShiftCancellationErrorEvent>;

export interface AfterShiftExecutionErrorEventObject {
  key: string;
  shift: Shift.PropsStructOutput;
}
export type AfterShiftExecutionErrorEvent = TypedEvent<
  [string, Shift.PropsStructOutput],
  AfterShiftExecutionErrorEventObject
>;

export type AfterShiftExecutionErrorEventFilter =
  TypedEventFilter<AfterShiftExecutionErrorEvent>;

export interface AfterWithdrawalCancellationErrorEventObject {
  key: string;
  withdrawal: Withdrawal.PropsStructOutput;
}
export type AfterWithdrawalCancellationErrorEvent = TypedEvent<
  [string, Withdrawal.PropsStructOutput],
  AfterWithdrawalCancellationErrorEventObject
>;

export type AfterWithdrawalCancellationErrorEventFilter =
  TypedEventFilter<AfterWithdrawalCancellationErrorEvent>;

export interface AfterWithdrawalExecutionErrorEventObject {
  key: string;
  withdrawal: Withdrawal.PropsStructOutput;
}
export type AfterWithdrawalExecutionErrorEvent = TypedEvent<
  [string, Withdrawal.PropsStructOutput],
  AfterWithdrawalExecutionErrorEventObject
>;

export type AfterWithdrawalExecutionErrorEventFilter =
  TypedEventFilter<AfterWithdrawalExecutionErrorEvent>;

export interface CallbackUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CallbackUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSavedCallbackContract(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isValidCallbackContract(
      callbackContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    validateCallbackGasLimit(
      dataStore: PromiseOrValue<string>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getSavedCallbackContract(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isValidCallbackContract(
    callbackContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  validateCallbackGasLimit(
    dataStore: PromiseOrValue<string>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getSavedCallbackContract(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidCallbackContract(
      callbackContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validateCallbackGasLimit(
      dataStore: PromiseOrValue<string>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AfterDepositCancellationError(bytes32,tuple)"(
      key?: null,
      deposit?: null
    ): AfterDepositCancellationErrorEventFilter;
    AfterDepositCancellationError(
      key?: null,
      deposit?: null
    ): AfterDepositCancellationErrorEventFilter;

    "AfterDepositExecutionError(bytes32,tuple)"(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;
    AfterDepositExecutionError(
      key?: null,
      deposit?: null
    ): AfterDepositExecutionErrorEventFilter;

    "AfterGlvDepositCancellationError(bytes32,tuple)"(
      key?: null,
      glvDeposit?: null
    ): AfterGlvDepositCancellationErrorEventFilter;
    AfterGlvDepositCancellationError(
      key?: null,
      glvDeposit?: null
    ): AfterGlvDepositCancellationErrorEventFilter;

    "AfterGlvDepositExecutionError(bytes32,tuple)"(
      key?: null,
      glvDeposit?: null
    ): AfterGlvDepositExecutionErrorEventFilter;
    AfterGlvDepositExecutionError(
      key?: null,
      glvDeposit?: null
    ): AfterGlvDepositExecutionErrorEventFilter;

    "AfterGlvWithdrawalCancellationError(bytes32,tuple)"(
      key?: null,
      glvWithdrawal?: null
    ): AfterGlvWithdrawalCancellationErrorEventFilter;
    AfterGlvWithdrawalCancellationError(
      key?: null,
      glvWithdrawal?: null
    ): AfterGlvWithdrawalCancellationErrorEventFilter;

    "AfterGlvWithdrawalExecutionError(bytes32,tuple)"(
      key?: null,
      glvWithdrawal?: null
    ): AfterGlvWithdrawalExecutionErrorEventFilter;
    AfterGlvWithdrawalExecutionError(
      key?: null,
      glvWithdrawal?: null
    ): AfterGlvWithdrawalExecutionErrorEventFilter;

    "AfterOrderCancellationError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderCancellationErrorEventFilter;
    AfterOrderCancellationError(
      key?: null,
      order?: null
    ): AfterOrderCancellationErrorEventFilter;

    "AfterOrderExecutionError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderExecutionErrorEventFilter;
    AfterOrderExecutionError(
      key?: null,
      order?: null
    ): AfterOrderExecutionErrorEventFilter;

    "AfterOrderFrozenError(bytes32,tuple)"(
      key?: null,
      order?: null
    ): AfterOrderFrozenErrorEventFilter;
    AfterOrderFrozenError(
      key?: null,
      order?: null
    ): AfterOrderFrozenErrorEventFilter;

    "AfterShiftCancellationError(bytes32,tuple)"(
      key?: null,
      shift?: null
    ): AfterShiftCancellationErrorEventFilter;
    AfterShiftCancellationError(
      key?: null,
      shift?: null
    ): AfterShiftCancellationErrorEventFilter;

    "AfterShiftExecutionError(bytes32,tuple)"(
      key?: null,
      shift?: null
    ): AfterShiftExecutionErrorEventFilter;
    AfterShiftExecutionError(
      key?: null,
      shift?: null
    ): AfterShiftExecutionErrorEventFilter;

    "AfterWithdrawalCancellationError(bytes32,tuple)"(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalCancellationErrorEventFilter;
    AfterWithdrawalCancellationError(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalCancellationErrorEventFilter;

    "AfterWithdrawalExecutionError(bytes32,tuple)"(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalExecutionErrorEventFilter;
    AfterWithdrawalExecutionError(
      key?: null,
      withdrawal?: null
    ): AfterWithdrawalExecutionErrorEventFilter;
  };

  estimateGas: {
    getSavedCallbackContract(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidCallbackContract(
      callbackContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCallbackGasLimit(
      dataStore: PromiseOrValue<string>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSavedCallbackContract(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCallbackContract(
      callbackContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateCallbackGasLimit(
      dataStore: PromiseOrValue<string>,
      callbackGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
