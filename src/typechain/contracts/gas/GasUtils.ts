// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvDeposit {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minGlvTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean] & {
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };

  export type PropsStruct = {
    addresses: GlvDeposit.AddressesStruct;
    numbers: GlvDeposit.NumbersStruct;
    flags: GlvDeposit.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvDeposit.AddressesStructOutput,
    GlvDeposit.NumbersStructOutput,
    GlvDeposit.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvDeposit.AddressesStructOutput;
    numbers: GlvDeposit.NumbersStructOutput;
    flags: GlvDeposit.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtTime: BigNumber;
    validFromTime: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
    autoCancel: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput,
    string[]
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Shift {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type PropsStruct = {
    addresses: Shift.AddressesStruct;
    numbers: Shift.NumbersStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Shift.AddressesStructOutput,
    Shift.NumbersStructOutput,
    string[]
  ] & {
    addresses: Shift.AddressesStructOutput;
    numbers: Shift.NumbersStructOutput;
    _dataList: string[];
  };
}

export declare namespace Withdrawal {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Withdrawal.AddressesStruct;
    numbers: Withdrawal.NumbersStruct;
    flags: Withdrawal.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Withdrawal.AddressesStructOutput,
    Withdrawal.NumbersStructOutput,
    Withdrawal.FlagsStructOutput,
    string[]
  ] & {
    addresses: Withdrawal.AddressesStructOutput;
    numbers: Withdrawal.NumbersStructOutput;
    flags: Withdrawal.FlagsStructOutput;
    _dataList: string[];
  };
}

export interface GasUtilsInterface extends utils.Interface {
  functions: {
    "estimateExecuteGlvDepositGasLimit(DataStore,((address,address,address,address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool),bytes32[]),uint256)": FunctionFragment;
    "estimateExecuteGlvShiftGasLimit(DataStore)": FunctionFragment;
    "estimateExecuteOrderGasLimit(DataStore,((address,address,address,address,address,address,address,address[]),(uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool,bool,bool),bytes32[]))": FunctionFragment;
    "estimateExecuteShiftGasLimit(DataStore,((address,address,address,address,address,address),(uint256,uint256,uint256,uint256,uint256,uint256),bytes32[]))": FunctionFragment;
    "estimateExecuteWithdrawalGasLimit(DataStore,((address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool),bytes32[]))": FunctionFragment;
    "estimateGlvDepositOraclePriceCount(uint256,uint256)": FunctionFragment;
    "estimateOrderOraclePriceCount(uint256)": FunctionFragment;
    "estimateShiftOraclePriceCount()": FunctionFragment;
    "estimateWithdrawalOraclePriceCount(uint256)": FunctionFragment;
    "getExecutionGas(DataStore,uint256)": FunctionFragment;
    "validateExecutionErrorGas(DataStore,bytes)": FunctionFragment;
    "validateExecutionGas(DataStore,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "estimateExecuteGlvDepositGasLimit"
      | "estimateExecuteGlvShiftGasLimit"
      | "estimateExecuteOrderGasLimit"
      | "estimateExecuteShiftGasLimit"
      | "estimateExecuteWithdrawalGasLimit"
      | "estimateGlvDepositOraclePriceCount"
      | "estimateOrderOraclePriceCount"
      | "estimateShiftOraclePriceCount"
      | "estimateWithdrawalOraclePriceCount"
      | "getExecutionGas"
      | "validateExecutionErrorGas"
      | "validateExecutionGas"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "estimateExecuteGlvDepositGasLimit",
    values: [
      PromiseOrValue<string>,
      GlvDeposit.PropsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExecuteGlvShiftGasLimit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExecuteOrderGasLimit",
    values: [PromiseOrValue<string>, Order.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExecuteShiftGasLimit",
    values: [PromiseOrValue<string>, Shift.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateExecuteWithdrawalGasLimit",
    values: [PromiseOrValue<string>, Withdrawal.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGlvDepositOraclePriceCount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateOrderOraclePriceCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateShiftOraclePriceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateWithdrawalOraclePriceCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionGas",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateExecutionErrorGas",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateExecutionGas",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateExecuteGlvDepositGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExecuteGlvShiftGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExecuteOrderGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExecuteShiftGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateExecuteWithdrawalGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGlvDepositOraclePriceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateOrderOraclePriceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateShiftOraclePriceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateWithdrawalOraclePriceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateExecutionErrorGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateExecutionGas",
    data: BytesLike
  ): Result;

  events: {
    "KeeperExecutionFee(address,uint256)": EventFragment;
    "TokenTransferReverted(string,bytes)": EventFragment;
    "UserRefundFee(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeeperExecutionFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransferReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRefundFee"): EventFragment;
}

export interface KeeperExecutionFeeEventObject {
  keeper: string;
  amount: BigNumber;
}
export type KeeperExecutionFeeEvent = TypedEvent<
  [string, BigNumber],
  KeeperExecutionFeeEventObject
>;

export type KeeperExecutionFeeEventFilter =
  TypedEventFilter<KeeperExecutionFeeEvent>;

export interface TokenTransferRevertedEventObject {
  reason: string;
  returndata: string;
}
export type TokenTransferRevertedEvent = TypedEvent<
  [string, string],
  TokenTransferRevertedEventObject
>;

export type TokenTransferRevertedEventFilter =
  TypedEventFilter<TokenTransferRevertedEvent>;

export interface UserRefundFeeEventObject {
  user: string;
  amount: BigNumber;
}
export type UserRefundFeeEvent = TypedEvent<
  [string, BigNumber],
  UserRefundFeeEventObject
>;

export type UserRefundFeeEventFilter = TypedEventFilter<UserRefundFeeEvent>;

export interface GasUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GasUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    estimateExecuteGlvDepositGasLimit(
      dataStore: PromiseOrValue<string>,
      glvDeposit: GlvDeposit.PropsStruct,
      marketCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateExecuteGlvShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateExecuteOrderGasLimit(
      dataStore: PromiseOrValue<string>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateExecuteShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      shift: Shift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateExecuteWithdrawalGasLimit(
      dataStore: PromiseOrValue<string>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateGlvDepositOraclePriceCount(
      marketCount: PromiseOrValue<BigNumberish>,
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateOrderOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateShiftOraclePriceCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimateWithdrawalOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateExecutionErrorGas(
      dataStore: PromiseOrValue<string>,
      reasonBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      estimatedGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  estimateExecuteGlvDepositGasLimit(
    dataStore: PromiseOrValue<string>,
    glvDeposit: GlvDeposit.PropsStruct,
    marketCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExecuteGlvShiftGasLimit(
    dataStore: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExecuteOrderGasLimit(
    dataStore: PromiseOrValue<string>,
    order: Order.PropsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExecuteShiftGasLimit(
    dataStore: PromiseOrValue<string>,
    shift: Shift.PropsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateExecuteWithdrawalGasLimit(
    dataStore: PromiseOrValue<string>,
    withdrawal: Withdrawal.PropsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateGlvDepositOraclePriceCount(
    marketCount: PromiseOrValue<BigNumberish>,
    swapsCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateOrderOraclePriceCount(
    swapsCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimateShiftOraclePriceCount(overrides?: CallOverrides): Promise<BigNumber>;

  estimateWithdrawalOraclePriceCount(
    swapsCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExecutionGas(
    dataStore: PromiseOrValue<string>,
    startingGas: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateExecutionErrorGas(
    dataStore: PromiseOrValue<string>,
    reasonBytes: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateExecutionGas(
    dataStore: PromiseOrValue<string>,
    startingGas: PromiseOrValue<BigNumberish>,
    estimatedGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    estimateExecuteGlvDepositGasLimit(
      dataStore: PromiseOrValue<string>,
      glvDeposit: GlvDeposit.PropsStruct,
      marketCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteGlvShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteOrderGasLimit(
      dataStore: PromiseOrValue<string>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      shift: Shift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteWithdrawalGasLimit(
      dataStore: PromiseOrValue<string>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateGlvDepositOraclePriceCount(
      marketCount: PromiseOrValue<BigNumberish>,
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateOrderOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateShiftOraclePriceCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateWithdrawalOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateExecutionErrorGas(
      dataStore: PromiseOrValue<string>,
      reasonBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      estimatedGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KeeperExecutionFee(address,uint256)"(
      keeper?: null,
      amount?: null
    ): KeeperExecutionFeeEventFilter;
    KeeperExecutionFee(
      keeper?: null,
      amount?: null
    ): KeeperExecutionFeeEventFilter;

    "TokenTransferReverted(string,bytes)"(
      reason?: null,
      returndata?: null
    ): TokenTransferRevertedEventFilter;
    TokenTransferReverted(
      reason?: null,
      returndata?: null
    ): TokenTransferRevertedEventFilter;

    "UserRefundFee(address,uint256)"(
      user?: null,
      amount?: null
    ): UserRefundFeeEventFilter;
    UserRefundFee(user?: null, amount?: null): UserRefundFeeEventFilter;
  };

  estimateGas: {
    estimateExecuteGlvDepositGasLimit(
      dataStore: PromiseOrValue<string>,
      glvDeposit: GlvDeposit.PropsStruct,
      marketCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteGlvShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteOrderGasLimit(
      dataStore: PromiseOrValue<string>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      shift: Shift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateExecuteWithdrawalGasLimit(
      dataStore: PromiseOrValue<string>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateGlvDepositOraclePriceCount(
      marketCount: PromiseOrValue<BigNumberish>,
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateOrderOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateShiftOraclePriceCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateWithdrawalOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateExecutionErrorGas(
      dataStore: PromiseOrValue<string>,
      reasonBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      estimatedGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    estimateExecuteGlvDepositGasLimit(
      dataStore: PromiseOrValue<string>,
      glvDeposit: GlvDeposit.PropsStruct,
      marketCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExecuteGlvShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExecuteOrderGasLimit(
      dataStore: PromiseOrValue<string>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExecuteShiftGasLimit(
      dataStore: PromiseOrValue<string>,
      shift: Shift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateExecuteWithdrawalGasLimit(
      dataStore: PromiseOrValue<string>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateGlvDepositOraclePriceCount(
      marketCount: PromiseOrValue<BigNumberish>,
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateOrderOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateShiftOraclePriceCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateWithdrawalOraclePriceCount(
      swapsCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateExecutionErrorGas(
      dataStore: PromiseOrValue<string>,
      reasonBytes: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateExecutionGas(
      dataStore: PromiseOrValue<string>,
      startingGas: PromiseOrValue<BigNumberish>,
      estimatedGasLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
