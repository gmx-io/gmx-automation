// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export interface FeeHandlerInterface extends utils.Interface {
  functions: {
    "buyback(address,address,uint256,(address[],address[],bytes[]))": FunctionFragment;
    "claimFees(address,address,uint256)": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "getOutputAmount(address[],address,address,uint256,uint256,uint256)": FunctionFragment;
    "gmx()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "oracle()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "v1()": FunctionFragment;
    "v2()": FunctionFragment;
    "vaultV1()": FunctionFragment;
    "withdrawFees(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyback"
      | "claimFees"
      | "dataStore"
      | "eventEmitter"
      | "getOutputAmount"
      | "gmx"
      | "multicall"
      | "oracle"
      | "roleStore"
      | "v1"
      | "v2"
      | "vaultV1"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      OracleUtils.SetPricesParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputAmount",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gmx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "v1", values?: undefined): string;
  encodeFunctionData(functionFragment: "v2", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaultV1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "buyback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "v2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultV1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FeeHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyback(
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      market: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    getOutputAmount(
      markets: PromiseOrValue<string>[],
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      feeTokenPrice: PromiseOrValue<BigNumberish>,
      buybackTokenPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gmx(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    v1(overrides?: CallOverrides): Promise<[BigNumber]>;

    v2(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultV1(overrides?: CallOverrides): Promise<[string]>;

    withdrawFees(
      buybackToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  buyback(
    feeToken: PromiseOrValue<string>,
    buybackToken: PromiseOrValue<string>,
    minOutputAmount: PromiseOrValue<BigNumberish>,
    params: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    market: PromiseOrValue<string>,
    feeToken: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  getOutputAmount(
    markets: PromiseOrValue<string>[],
    feeToken: PromiseOrValue<string>,
    buybackToken: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    feeTokenPrice: PromiseOrValue<BigNumberish>,
    buybackTokenPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gmx(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  v1(overrides?: CallOverrides): Promise<BigNumber>;

  v2(overrides?: CallOverrides): Promise<BigNumber>;

  vaultV1(overrides?: CallOverrides): Promise<string>;

  withdrawFees(
    buybackToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyback(
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFees(
      market: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    getOutputAmount(
      markets: PromiseOrValue<string>[],
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      feeTokenPrice: PromiseOrValue<BigNumberish>,
      buybackTokenPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmx(overrides?: CallOverrides): Promise<string>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    oracle(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    v1(overrides?: CallOverrides): Promise<BigNumber>;

    v2(overrides?: CallOverrides): Promise<BigNumber>;

    vaultV1(overrides?: CallOverrides): Promise<string>;

    withdrawFees(
      buybackToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyback(
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFees(
      market: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    getOutputAmount(
      markets: PromiseOrValue<string>[],
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      feeTokenPrice: PromiseOrValue<BigNumberish>,
      buybackTokenPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmx(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    v1(overrides?: CallOverrides): Promise<BigNumber>;

    v2(overrides?: CallOverrides): Promise<BigNumber>;

    vaultV1(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFees(
      buybackToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyback(
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      minOutputAmount: PromiseOrValue<BigNumberish>,
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      market: PromiseOrValue<string>,
      feeToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutputAmount(
      markets: PromiseOrValue<string>[],
      feeToken: PromiseOrValue<string>,
      buybackToken: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      feeTokenPrice: PromiseOrValue<BigNumberish>,
      buybackTokenPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gmx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    v2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFees(
      buybackToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
