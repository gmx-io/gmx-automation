// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ClaimUtils {
  export type DepositParamStruct = {
    account: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DepositParamStructOutput = [string, BigNumber] & {
    account: string;
    amount: BigNumber;
  };
}

export declare namespace MultichainReaderUtils {
  export type ReceivedDataStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    readData: PromiseOrValue<BytesLike>;
  };

  export type ReceivedDataStructOutput = [BigNumber, string] & {
    timestamp: BigNumber;
    readData: string;
  };
}

export interface FeeDistributorInterface extends utils.Interface {
  functions: {
    "bridgedGmxReceived()": FunctionFragment;
    "depositReferralRewards(address,uint256,(address,uint256)[])": FunctionFragment;
    "distribute(uint256,uint256,uint256,uint256)": FunctionFragment;
    "initiateDistribute()": FunctionFragment;
    "oracle()": FunctionFragment;
    "processLzReceive(bytes32,(uint256,bytes))": FunctionFragment;
    "roleStore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgedGmxReceived"
      | "depositReferralRewards"
      | "distribute"
      | "initiateDistribute"
      | "oracle"
      | "processLzReceive"
      | "roleStore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgedGmxReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositReferralRewards",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      ClaimUtils.DepositParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDistribute",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processLzReceive",
    values: [
      PromiseOrValue<BytesLike>,
      MultichainReaderUtils.ReceivedDataStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bridgedGmxReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReferralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateDistribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;

  events: {};
}

export interface FeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgedGmxReceived(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositReferralRewards(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distribute(
      wntReferralRewardsInUsd: PromiseOrValue<BigNumberish>,
      esGmxForReferralRewards: PromiseOrValue<BigNumberish>,
      feesV1Usd: PromiseOrValue<BigNumberish>,
      feesV2Usd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    processLzReceive(
      arg0: PromiseOrValue<BytesLike>,
      receivedData: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;
  };

  bridgedGmxReceived(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositReferralRewards(
    token: PromiseOrValue<string>,
    distributionId: PromiseOrValue<BigNumberish>,
    params: ClaimUtils.DepositParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distribute(
    wntReferralRewardsInUsd: PromiseOrValue<BigNumberish>,
    esGmxForReferralRewards: PromiseOrValue<BigNumberish>,
    feesV1Usd: PromiseOrValue<BigNumberish>,
    feesV2Usd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateDistribute(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  processLzReceive(
    arg0: PromiseOrValue<BytesLike>,
    receivedData: MultichainReaderUtils.ReceivedDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bridgedGmxReceived(overrides?: CallOverrides): Promise<void>;

    depositReferralRewards(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    distribute(
      wntReferralRewardsInUsd: PromiseOrValue<BigNumberish>,
      esGmxForReferralRewards: PromiseOrValue<BigNumberish>,
      feesV1Usd: PromiseOrValue<BigNumberish>,
      feesV2Usd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateDistribute(overrides?: CallOverrides): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    processLzReceive(
      arg0: PromiseOrValue<BytesLike>,
      receivedData: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bridgedGmxReceived(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositReferralRewards(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distribute(
      wntReferralRewardsInUsd: PromiseOrValue<BigNumberish>,
      esGmxForReferralRewards: PromiseOrValue<BigNumberish>,
      feesV1Usd: PromiseOrValue<BigNumberish>,
      feesV2Usd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    processLzReceive(
      arg0: PromiseOrValue<BytesLike>,
      receivedData: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgedGmxReceived(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositReferralRewards(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distribute(
      wntReferralRewardsInUsd: PromiseOrValue<BigNumberish>,
      esGmxForReferralRewards: PromiseOrValue<BigNumberish>,
      feesV1Usd: PromiseOrValue<BigNumberish>,
      feesV2Usd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateDistribute(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processLzReceive(
      arg0: PromiseOrValue<BytesLike>,
      receivedData: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
