// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TransferStruct = {
  from: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type TransferStructOutput = [BigNumber, BigNumber, BigNumber] & {
  from: BigNumber;
  to: BigNumber;
  amount: BigNumber;
};

export interface FeeDistributorUtilsInterface extends utils.Interface {
  functions: {
    "computeTransfers(uint256[],uint256[])": FunctionFragment;
    "sortChainIds(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "computeTransfers" | "sortChainIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeTransfers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sortChainIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortChainIds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FeeDistributorUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributorUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeTransfers(
      balances: PromiseOrValue<BigNumberish>[],
      targetBalances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[TransferStructOutput[]]>;

    sortChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  computeTransfers(
    balances: PromiseOrValue<BigNumberish>[],
    targetBalances: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<TransferStructOutput[]>;

  sortChainIds(
    chainIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    computeTransfers(
      balances: PromiseOrValue<BigNumberish>[],
      targetBalances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<TransferStructOutput[]>;

    sortChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    computeTransfers(
      balances: PromiseOrValue<BigNumberish>[],
      targetBalances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeTransfers(
      balances: PromiseOrValue<BigNumberish>[],
      targetBalances: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortChainIds(
      chainIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
