// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBaseOrderUtils {
  export type CreateOrderParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type CreateOrderParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type CreateOrderParamsNumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
  };

  export type CreateOrderParamsNumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    validFromTime: BigNumber;
  };

  export type CreateOrderParamsStruct = {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStruct;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStruct;
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
    referralCode: PromiseOrValue<BytesLike>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateOrderParamsStructOutput = [
    IBaseOrderUtils.CreateOrderParamsAddressesStructOutput,
    IBaseOrderUtils.CreateOrderParamsNumbersStructOutput,
    number,
    number,
    boolean,
    boolean,
    boolean,
    string,
    string[]
  ] & {
    addresses: IBaseOrderUtils.CreateOrderParamsAddressesStructOutput;
    numbers: IBaseOrderUtils.CreateOrderParamsNumbersStructOutput;
    orderType: number;
    decreasePositionSwapType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    autoCancel: boolean;
    referralCode: string;
    dataList: string[];
  };
}

export interface SubaccountUtilsInterface extends utils.Interface {
  functions: {
    "getSubaccountAutoTopUpAmount(DataStore,address,address)": FunctionFragment;
    "validateCreateOrderParams(address,((address,address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint8,uint8,bool,bool,bool,bytes32,bytes32[]))": FunctionFragment;
    "validateIntegrationId(DataStore,address,address)": FunctionFragment;
    "validateSubaccount(DataStore,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSubaccountAutoTopUpAmount"
      | "validateCreateOrderParams"
      | "validateIntegrationId"
      | "validateSubaccount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSubaccountAutoTopUpAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCreateOrderParams",
    values: [PromiseOrValue<string>, IBaseOrderUtils.CreateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateIntegrationId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSubaccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSubaccountAutoTopUpAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCreateOrderParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateIntegrationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSubaccount",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SubaccountUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubaccountUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSubaccountAutoTopUpAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateCreateOrderParams(
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateIntegrationId(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateSubaccount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getSubaccountAutoTopUpAmount(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    subaccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateCreateOrderParams(
    account: PromiseOrValue<string>,
    params: IBaseOrderUtils.CreateOrderParamsStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  validateIntegrationId(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    subaccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateSubaccount(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    subaccount: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getSubaccountAutoTopUpAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCreateOrderParams(
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateIntegrationId(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateSubaccount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getSubaccountAutoTopUpAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateCreateOrderParams(
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateIntegrationId(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSubaccount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSubaccountAutoTopUpAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateCreateOrderParams(
      account: PromiseOrValue<string>,
      params: IBaseOrderUtils.CreateOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateIntegrationId(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSubaccount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      subaccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
