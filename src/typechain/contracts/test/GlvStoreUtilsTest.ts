/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Glv {
  export type PropsStruct = {
    glvToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string] & {
    glvToken: string;
    longToken: string;
    shortToken: string;
  };
}

export interface GlvStoreUtilsTestInterface extends utils.Interface {
  functions: {
    "getEmptyGlv()": FunctionFragment;
    "removeGlv(address,address)": FunctionFragment;
    "setGlv(address,address,bytes32,(address,address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getEmptyGlv" | "removeGlv" | "setGlv"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEmptyGlv",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlv",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Glv.PropsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEmptyGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeGlv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGlv", data: BytesLike): Result;

  events: {};
}

export interface GlvStoreUtilsTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvStoreUtilsTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEmptyGlv(overrides?: CallOverrides): Promise<[Glv.PropsStructOutput]>;

    removeGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      glv: Glv.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getEmptyGlv(overrides?: CallOverrides): Promise<Glv.PropsStructOutput>;

  removeGlv(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlv(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    glv: Glv.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEmptyGlv(overrides?: CallOverrides): Promise<Glv.PropsStructOutput>;

    removeGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      glv: Glv.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getEmptyGlv(overrides?: CallOverrides): Promise<BigNumber>;

    removeGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      glv: Glv.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEmptyGlv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlv(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      glv: Glv.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
