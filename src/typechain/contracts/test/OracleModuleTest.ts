/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GmOracleUtils {
  export type ReportStruct = {
    token: PromiseOrValue<string>;
    signerInfo: PromiseOrValue<BigNumberish>;
    precision: PromiseOrValue<BigNumberish>;
    minOracleBlockNumber: PromiseOrValue<BigNumberish>;
    maxOracleBlockNumber: PromiseOrValue<BigNumberish>;
    oracleTimestamp: PromiseOrValue<BigNumberish>;
    blockHash: PromiseOrValue<BytesLike>;
    minPrices: PromiseOrValue<BigNumberish>[];
    maxPrices: PromiseOrValue<BigNumberish>[];
    signatures: PromiseOrValue<BytesLike>[];
  };

  export type ReportStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber[],
    BigNumber[],
    string[]
  ] & {
    token: string;
    signerInfo: BigNumber;
    precision: BigNumber;
    minOracleBlockNumber: BigNumber;
    maxOracleBlockNumber: BigNumber;
    oracleTimestamp: BigNumber;
    blockHash: string;
    minPrices: BigNumber[];
    maxPrices: BigNumber[];
    signatures: string[];
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export interface OracleModuleTestInterface extends utils.Interface {
  functions: {
    "getSalt()": FunctionFragment;
    "getTokenOracleType(address,address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "validateSigner(address,(address,uint256,uint256,uint256,uint256,uint256,bytes32,uint256[],uint256[],bytes[]),address,uint256,uint256,bytes,address)": FunctionFragment;
    "validateSignerWithSalt(address,bytes32,(address,uint256,uint256,uint256,uint256,uint256,bytes32,uint256[],uint256[],bytes[]),address,uint256,uint256,bytes,address)": FunctionFragment;
    "withOraclePricesTest((address[],address[],bytes[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSalt"
      | "getTokenOracleType"
      | "oracle"
      | "validateSigner"
      | "validateSignerWithSalt"
      | "withOraclePricesTest"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getSalt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenOracleType",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateSigner",
    values: [
      PromiseOrValue<string>,
      GmOracleUtils.ReportStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSignerWithSalt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      GmOracleUtils.ReportStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withOraclePricesTest",
    values: [OracleUtils.SetPricesParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "getSalt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenOracleType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSignerWithSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withOraclePricesTest",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OracleModuleTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleModuleTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSalt(overrides?: CallOverrides): Promise<[string]>;

    getTokenOracleType(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    validateSigner(
      dataStore: PromiseOrValue<string>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateSignerWithSalt(
      dataStore: PromiseOrValue<string>,
      SALT: PromiseOrValue<BytesLike>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withOraclePricesTest(
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getSalt(overrides?: CallOverrides): Promise<string>;

  getTokenOracleType(
    dataStore: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  validateSigner(
    dataStore: PromiseOrValue<string>,
    report: GmOracleUtils.ReportStruct,
    token: PromiseOrValue<string>,
    minPrice: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    expectedSigner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateSignerWithSalt(
    dataStore: PromiseOrValue<string>,
    SALT: PromiseOrValue<BytesLike>,
    report: GmOracleUtils.ReportStruct,
    token: PromiseOrValue<string>,
    minPrice: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    expectedSigner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  withOraclePricesTest(
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSalt(overrides?: CallOverrides): Promise<string>;

    getTokenOracleType(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    validateSigner(
      dataStore: PromiseOrValue<string>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateSignerWithSalt(
      dataStore: PromiseOrValue<string>,
      SALT: PromiseOrValue<BytesLike>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withOraclePricesTest(
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getSalt(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenOracleType(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    validateSigner(
      dataStore: PromiseOrValue<string>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSignerWithSalt(
      dataStore: PromiseOrValue<string>,
      SALT: PromiseOrValue<BytesLike>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withOraclePricesTest(
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSalt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenOracleType(
      dataStore: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateSigner(
      dataStore: PromiseOrValue<string>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSignerWithSalt(
      dataStore: PromiseOrValue<string>,
      SALT: PromiseOrValue<BytesLike>,
      report: GmOracleUtils.ReportStruct,
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      expectedSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withOraclePricesTest(
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
