/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Shift {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type PropsStruct = {
    addresses: Shift.AddressesStruct;
    numbers: Shift.NumbersStruct;
  };

  export type PropsStructOutput = [
    Shift.AddressesStructOutput,
    Shift.NumbersStructOutput
  ] & {
    addresses: Shift.AddressesStructOutput;
    numbers: Shift.NumbersStructOutput;
  };
}

export interface ShiftStoreUtilsTestInterface extends utils.Interface {
  functions: {
    "getEmptyShift()": FunctionFragment;
    "removeShift(address,bytes32,address)": FunctionFragment;
    "setShift(address,bytes32,((address,address,address,address,address,address),(uint256,uint256,uint256,uint256,uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getEmptyShift" | "removeShift" | "setShift"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEmptyShift",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeShift",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setShift",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Shift.PropsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEmptyShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShift", data: BytesLike): Result;

  events: {};
}

export interface ShiftStoreUtilsTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShiftStoreUtilsTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEmptyShift(
      overrides?: CallOverrides
    ): Promise<[Shift.PropsStructOutput]>;

    removeShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      shift: Shift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getEmptyShift(overrides?: CallOverrides): Promise<Shift.PropsStructOutput>;

  removeShift(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShift(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    shift: Shift.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEmptyShift(overrides?: CallOverrides): Promise<Shift.PropsStructOutput>;

    removeShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      shift: Shift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getEmptyShift(overrides?: CallOverrides): Promise<BigNumber>;

    removeShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      shift: Shift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEmptyShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      shift: Shift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
