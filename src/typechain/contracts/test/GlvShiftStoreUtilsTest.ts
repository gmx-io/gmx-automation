/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    GlvShift.AddressesStructOutput,
    GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export interface GlvShiftStoreUtilsTestInterface extends utils.Interface {
  functions: {
    "getEmptyGlvShift()": FunctionFragment;
    "removeGlvShift(address,bytes32)": FunctionFragment;
    "setGlvShift(address,bytes32,((address,address,address),(uint256,uint256,uint256)))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getEmptyGlvShift"
      | "removeGlvShift"
      | "setGlvShift"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEmptyGlvShift",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeGlvShift",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlvShift",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      GlvShift.PropsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEmptyGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlvShift",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GlvShiftStoreUtilsTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvShiftStoreUtilsTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getEmptyGlvShift(
      overrides?: CallOverrides
    ): Promise<[GlvShift.PropsStructOutput]>;

    removeGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getEmptyGlvShift(
    overrides?: CallOverrides
  ): Promise<GlvShift.PropsStructOutput>;

  removeGlvShift(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlvShift(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    glvShift: GlvShift.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getEmptyGlvShift(
      overrides?: CallOverrides
    ): Promise<GlvShift.PropsStructOutput>;

    removeGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getEmptyGlvShift(overrides?: CallOverrides): Promise<BigNumber>;

    removeGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getEmptyGlvShift(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
