/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };
}

export interface MarketUtilsTestInterface extends utils.Interface {
  functions: {
    "getPoolUsdWithoutPnl(address,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),bool,bool)": FunctionFragment;
    "getReservedUsd(address,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),bool)": FunctionFragment;
    "getUsageFactor(address,(address,address,address,address),bool,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPoolUsdWithoutPnl"
      | "getReservedUsd"
      | "getUsageFactor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPoolUsdWithoutPnl",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservedUsd",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsageFactor",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolUsdWithoutPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservedUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsageFactor",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketUtilsTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketUtilsTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPoolUsdWithoutPnl(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReservedUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUsageFactor(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      reservedUsd: PromiseOrValue<BigNumberish>,
      poolUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getPoolUsdWithoutPnl(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    isLong: PromiseOrValue<boolean>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReservedUsd(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUsageFactor(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    isLong: PromiseOrValue<boolean>,
    reservedUsd: PromiseOrValue<BigNumberish>,
    poolUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getPoolUsdWithoutPnl(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsageFactor(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      reservedUsd: PromiseOrValue<BigNumberish>,
      poolUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getPoolUsdWithoutPnl(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsageFactor(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      reservedUsd: PromiseOrValue<BigNumberish>,
      poolUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolUsdWithoutPnl(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservedUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsageFactor(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      isLong: PromiseOrValue<boolean>,
      reservedUsd: PromiseOrValue<BigNumberish>,
      poolUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
