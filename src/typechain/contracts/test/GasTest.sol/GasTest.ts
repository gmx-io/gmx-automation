// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface GasTestInterface extends utils.Interface {
  functions: {
    "data()": FunctionFragment;
    "getCurrentTxL1GasFees(string)": FunctionFragment;
    "revertIfTxOriginIsZero()": FunctionFragment;
    "test(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "data"
      | "getCurrentTxL1GasFees"
      | "revertIfTxOriginIsZero"
      | "test"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTxL1GasFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfTxOriginIsZero",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "test",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTxL1GasFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfTxOriginIsZero",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "test", data: BytesLike): Result;

  events: {
    "CurrentTxL1GasFees(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurrentTxL1GasFees"): EventFragment;
}

export interface CurrentTxL1GasFeesEventObject {
  a: BigNumber;
  b: BigNumber;
}
export type CurrentTxL1GasFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  CurrentTxL1GasFeesEventObject
>;

export type CurrentTxL1GasFeesEventFilter =
  TypedEventFilter<CurrentTxL1GasFeesEvent>;

export interface GasTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GasTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    data(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTxL1GasFees(
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    revertIfTxOriginIsZero(overrides?: CallOverrides): Promise<[BigNumber]>;

    test(
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  data(overrides?: CallOverrides): Promise<string>;

  getCurrentTxL1GasFees(
    _data: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  revertIfTxOriginIsZero(overrides?: CallOverrides): Promise<BigNumber>;

  test(
    _data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<string>;

    getCurrentTxL1GasFees(
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    revertIfTxOriginIsZero(overrides?: CallOverrides): Promise<BigNumber>;

    test(
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    "CurrentTxL1GasFees(uint256,uint256)"(
      a?: null,
      b?: null
    ): CurrentTxL1GasFeesEventFilter;
    CurrentTxL1GasFees(a?: null, b?: null): CurrentTxL1GasFeesEventFilter;
  };

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTxL1GasFees(
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertIfTxOriginIsZero(overrides?: CallOverrides): Promise<BigNumber>;

    test(
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTxL1GasFees(
      _data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertIfTxOriginIsZero(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    test(
      _data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
