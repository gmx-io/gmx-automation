// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RoleInterface extends utils.Interface {
  functions: {
    "ADL_KEEPER()": FunctionFragment;
    "CLAIM_ADMIN()": FunctionFragment;
    "CONFIG_KEEPER()": FunctionFragment;
    "CONTRIBUTOR_DISTRIBUTOR()": FunctionFragment;
    "CONTRIBUTOR_KEEPER()": FunctionFragment;
    "CONTROLLER()": FunctionFragment;
    "FEE_DISTRIBUTION_KEEPER()": FunctionFragment;
    "FEE_KEEPER()": FunctionFragment;
    "FROZEN_ORDER_KEEPER()": FunctionFragment;
    "GOV_TOKEN_CONTROLLER()": FunctionFragment;
    "LIMITED_CONFIG_KEEPER()": FunctionFragment;
    "LIQUIDATION_KEEPER()": FunctionFragment;
    "MARKET_KEEPER()": FunctionFragment;
    "MULTICHAIN_READER()": FunctionFragment;
    "ORDER_KEEPER()": FunctionFragment;
    "PRICING_KEEPER()": FunctionFragment;
    "ROLE_ADMIN()": FunctionFragment;
    "ROUTER_PLUGIN()": FunctionFragment;
    "TIMELOCK_ADMIN()": FunctionFragment;
    "TIMELOCK_MULTISIG()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADL_KEEPER"
      | "CLAIM_ADMIN"
      | "CONFIG_KEEPER"
      | "CONTRIBUTOR_DISTRIBUTOR"
      | "CONTRIBUTOR_KEEPER"
      | "CONTROLLER"
      | "FEE_DISTRIBUTION_KEEPER"
      | "FEE_KEEPER"
      | "FROZEN_ORDER_KEEPER"
      | "GOV_TOKEN_CONTROLLER"
      | "LIMITED_CONFIG_KEEPER"
      | "LIQUIDATION_KEEPER"
      | "MARKET_KEEPER"
      | "MULTICHAIN_READER"
      | "ORDER_KEEPER"
      | "PRICING_KEEPER"
      | "ROLE_ADMIN"
      | "ROUTER_PLUGIN"
      | "TIMELOCK_ADMIN"
      | "TIMELOCK_MULTISIG"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADL_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CLAIM_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_DISTRIBUTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DISTRIBUTION_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FROZEN_ORDER_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOV_TOKEN_CONTROLLER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIMITED_CONFIG_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTICHAIN_READER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORDER_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICING_KEEPER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROUTER_PLUGIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMELOCK_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIMELOCK_MULTISIG",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADL_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CLAIM_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_DISTRIBUTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CONTROLLER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DISTRIBUTION_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FROZEN_ORDER_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOV_TOKEN_CONTROLLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIMITED_CONFIG_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTICHAIN_READER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORDER_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICING_KEEPER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROUTER_PLUGIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMELOCK_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIMELOCK_MULTISIG",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Role extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    CLAIM_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    CONFIG_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    CONTRIBUTOR_DISTRIBUTOR(overrides?: CallOverrides): Promise<[string]>;

    CONTRIBUTOR_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    FEE_DISTRIBUTION_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    GOV_TOKEN_CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    LIMITED_CONFIG_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    MULTICHAIN_READER(overrides?: CallOverrides): Promise<[string]>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<[string]>;

    TIMELOCK_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    TIMELOCK_MULTISIG(overrides?: CallOverrides): Promise<[string]>;
  };

  ADL_KEEPER(overrides?: CallOverrides): Promise<string>;

  CLAIM_ADMIN(overrides?: CallOverrides): Promise<string>;

  CONFIG_KEEPER(overrides?: CallOverrides): Promise<string>;

  CONTRIBUTOR_DISTRIBUTOR(overrides?: CallOverrides): Promise<string>;

  CONTRIBUTOR_KEEPER(overrides?: CallOverrides): Promise<string>;

  CONTROLLER(overrides?: CallOverrides): Promise<string>;

  FEE_DISTRIBUTION_KEEPER(overrides?: CallOverrides): Promise<string>;

  FEE_KEEPER(overrides?: CallOverrides): Promise<string>;

  FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

  GOV_TOKEN_CONTROLLER(overrides?: CallOverrides): Promise<string>;

  LIMITED_CONFIG_KEEPER(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<string>;

  MARKET_KEEPER(overrides?: CallOverrides): Promise<string>;

  MULTICHAIN_READER(overrides?: CallOverrides): Promise<string>;

  ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

  PRICING_KEEPER(overrides?: CallOverrides): Promise<string>;

  ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

  ROUTER_PLUGIN(overrides?: CallOverrides): Promise<string>;

  TIMELOCK_ADMIN(overrides?: CallOverrides): Promise<string>;

  TIMELOCK_MULTISIG(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<string>;

    CLAIM_ADMIN(overrides?: CallOverrides): Promise<string>;

    CONFIG_KEEPER(overrides?: CallOverrides): Promise<string>;

    CONTRIBUTOR_DISTRIBUTOR(overrides?: CallOverrides): Promise<string>;

    CONTRIBUTOR_KEEPER(overrides?: CallOverrides): Promise<string>;

    CONTROLLER(overrides?: CallOverrides): Promise<string>;

    FEE_DISTRIBUTION_KEEPER(overrides?: CallOverrides): Promise<string>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<string>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

    GOV_TOKEN_CONTROLLER(overrides?: CallOverrides): Promise<string>;

    LIMITED_CONFIG_KEEPER(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<string>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<string>;

    MULTICHAIN_READER(overrides?: CallOverrides): Promise<string>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<string>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<string>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<string>;

    TIMELOCK_ADMIN(overrides?: CallOverrides): Promise<string>;

    TIMELOCK_MULTISIG(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    CLAIM_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    CONFIG_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRIBUTOR_DISTRIBUTOR(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRIBUTOR_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_DISTRIBUTION_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    GOV_TOKEN_CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    LIMITED_CONFIG_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    MULTICHAIN_READER(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<BigNumber>;

    TIMELOCK_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    TIMELOCK_MULTISIG(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CLAIM_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONFIG_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRIBUTOR_DISTRIBUTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTRIBUTOR_KEEPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_DISTRIBUTION_KEEPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FROZEN_ORDER_KEEPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOV_TOKEN_CONTROLLER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIMITED_CONFIG_KEEPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LIQUIDATION_KEEPER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MULTICHAIN_READER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMELOCK_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIMELOCK_MULTISIG(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
