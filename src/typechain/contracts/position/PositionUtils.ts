// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace BaseOrderUtils {
  export type ExecuteOrderParamsContractsStruct = {
    dataStore: PromiseOrValue<string>;
    eventEmitter: PromiseOrValue<string>;
    multichainVault: PromiseOrValue<string>;
    orderVault: PromiseOrValue<string>;
    oracle: PromiseOrValue<string>;
    swapHandler: PromiseOrValue<string>;
    referralStorage: PromiseOrValue<string>;
  };

  export type ExecuteOrderParamsContractsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    dataStore: string;
    eventEmitter: string;
    multichainVault: string;
    orderVault: string;
    oracle: string;
    swapHandler: string;
    referralStorage: string;
  };
}

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtTime: BigNumber;
    validFromTime: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
    autoCancel: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput,
    string[]
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Position {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    collateralToken: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    account: string;
    market: string;
    collateralToken: string;
  };

  export type NumbersStruct = {
    sizeInUsd: PromiseOrValue<BigNumberish>;
    sizeInTokens: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    pendingImpactAmount: PromiseOrValue<BigNumberish>;
    borrowingFactor: PromiseOrValue<BigNumberish>;
    fundingFeeAmountPerSize: PromiseOrValue<BigNumberish>;
    longTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    shortTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    increasedAtTime: PromiseOrValue<BigNumberish>;
    decreasedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeInUsd: BigNumber;
    sizeInTokens: BigNumber;
    collateralAmount: BigNumber;
    pendingImpactAmount: BigNumber;
    borrowingFactor: BigNumber;
    fundingFeeAmountPerSize: BigNumber;
    longTokenClaimableFundingAmountPerSize: BigNumber;
    shortTokenClaimableFundingAmountPerSize: BigNumber;
    increasedAtTime: BigNumber;
    decreasedAtTime: BigNumber;
  };

  export type FlagsStruct = { isLong: PromiseOrValue<boolean> };

  export type FlagsStructOutput = [boolean] & { isLong: boolean };

  export type PropsStruct = {
    addresses: Position.AddressesStruct;
    numbers: Position.NumbersStruct;
    flags: Position.FlagsStruct;
  };

  export type PropsStructOutput = [
    Position.AddressesStructOutput,
    Position.NumbersStructOutput,
    Position.FlagsStructOutput
  ] & {
    addresses: Position.AddressesStructOutput;
    numbers: Position.NumbersStructOutput;
    flags: Position.FlagsStructOutput;
  };
}

export declare namespace PositionUtils {
  export type UpdatePositionParamsStruct = {
    contracts: BaseOrderUtils.ExecuteOrderParamsContractsStruct;
    market: Market.PropsStruct;
    order: Order.PropsStruct;
    orderKey: PromiseOrValue<BytesLike>;
    position: Position.PropsStruct;
    positionKey: PromiseOrValue<BytesLike>;
    secondaryOrderType: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePositionParamsStructOutput = [
    BaseOrderUtils.ExecuteOrderParamsContractsStructOutput,
    Market.PropsStructOutput,
    Order.PropsStructOutput,
    string,
    Position.PropsStructOutput,
    string,
    number
  ] & {
    contracts: BaseOrderUtils.ExecuteOrderParamsContractsStructOutput;
    market: Market.PropsStructOutput;
    order: Order.PropsStructOutput;
    orderKey: string;
    position: Position.PropsStructOutput;
    positionKey: string;
    secondaryOrderType: number;
  };

  export type IsPositionLiquidatableInfoStruct = {
    remainingCollateralUsd: PromiseOrValue<BigNumberish>;
    minCollateralUsd: PromiseOrValue<BigNumberish>;
    minCollateralUsdForLeverage: PromiseOrValue<BigNumberish>;
  };

  export type IsPositionLiquidatableInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    remainingCollateralUsd: BigNumber;
    minCollateralUsd: BigNumber;
    minCollateralUsdForLeverage: BigNumber;
  };

  export type WillPositionCollateralBeSufficientValuesStruct = {
    positionSizeInUsd: PromiseOrValue<BigNumberish>;
    positionCollateralAmount: PromiseOrValue<BigNumberish>;
    realizedPnlUsd: PromiseOrValue<BigNumberish>;
    openInterestDelta: PromiseOrValue<BigNumberish>;
  };

  export type WillPositionCollateralBeSufficientValuesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionSizeInUsd: BigNumber;
    positionCollateralAmount: BigNumber;
    realizedPnlUsd: BigNumber;
    openInterestDelta: BigNumber;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };
}

export interface PositionUtilsInterface extends utils.Interface {
  functions: {
    "getExecutionPriceForDecrease(((DataStore,EventEmitter,MultichainVault,OrderVault,IOracle,ISwapHandler,IReferralStorage),(address,address,address,address),((address,address,address,address,address,address,address,address[]),(uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool,bool,bool),bytes32[]),bytes32,((address,address,address),(uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256),(bool)),bytes32,uint8),(uint256,uint256))": FunctionFragment;
    "getExecutionPriceForIncrease(((DataStore,EventEmitter,MultichainVault,OrderVault,IOracle,ISwapHandler,IReferralStorage),(address,address,address,address),((address,address,address,address,address,address,address,address[]),(uint8,uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool,bool,bool),bytes32[]),bytes32,((address,address,address),(uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256),(bool)),bytes32,uint8),((uint256,uint256),(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "getPositionPnlUsd(DataStore,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),((address,address,address),(uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256),(bool)),uint256)": FunctionFragment;
    "isPositionLiquidatable(DataStore,IReferralStorage,((address,address,address),(uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256),(bool)),(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),bool,bool)": FunctionFragment;
    "validatePosition(DataStore,IReferralStorage,((address,address,address),(uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256,uint256,uint256),(bool)),(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),bool,bool)": FunctionFragment;
    "willPositionCollateralBeSufficient(DataStore,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),address,bool,(uint256,uint256,int256,int256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getExecutionPriceForDecrease"
      | "getExecutionPriceForIncrease"
      | "getPositionPnlUsd"
      | "isPositionLiquidatable"
      | "validatePosition"
      | "willPositionCollateralBeSufficient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getExecutionPriceForDecrease",
    values: [PositionUtils.UpdatePositionParamsStruct, Price.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionPriceForIncrease",
    values: [
      PositionUtils.UpdatePositionParamsStruct,
      MarketUtils.MarketPricesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionPnlUsd",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      Position.PropsStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionLiquidatable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Position.PropsStruct,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Position.PropsStruct,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "willPositionCollateralBeSufficient",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PositionUtils.WillPositionCollateralBeSufficientValuesStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getExecutionPriceForDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionPriceForIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionPnlUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willPositionCollateralBeSufficient",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PositionUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getExecutionPriceForDecrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      indexTokenPrice: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    getExecutionPriceForIncrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, boolean]>;

    getPositionPnlUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      position: Position.PropsStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    isPositionLiquidatable(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      forLiquidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, PositionUtils.IsPositionLiquidatableInfoStructOutput]
    >;

    validatePosition(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinPositionSize: PromiseOrValue<boolean>,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    willPositionCollateralBeSufficient(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      values: PositionUtils.WillPositionCollateralBeSufficientValuesStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  getExecutionPriceForDecrease(
    params: PositionUtils.UpdatePositionParamsStruct,
    indexTokenPrice: Price.PropsStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, boolean]>;

  getExecutionPriceForIncrease(
    params: PositionUtils.UpdatePositionParamsStruct,
    prices: MarketUtils.MarketPricesStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, boolean]>;

  getPositionPnlUsd(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    position: Position.PropsStruct,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  isPositionLiquidatable(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    position: Position.PropsStruct,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
    forLiquidation: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, PositionUtils.IsPositionLiquidatableInfoStructOutput]
  >;

  validatePosition(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    position: Position.PropsStruct,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    shouldValidateMinPositionSize: PromiseOrValue<boolean>,
    shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  willPositionCollateralBeSufficient(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    values: PositionUtils.WillPositionCollateralBeSufficientValuesStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  callStatic: {
    getExecutionPriceForDecrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      indexTokenPrice: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, boolean]>;

    getExecutionPriceForIncrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, boolean]>;

    getPositionPnlUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      position: Position.PropsStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    isPositionLiquidatable(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      forLiquidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, PositionUtils.IsPositionLiquidatableInfoStructOutput]
    >;

    validatePosition(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinPositionSize: PromiseOrValue<boolean>,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    willPositionCollateralBeSufficient(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      values: PositionUtils.WillPositionCollateralBeSufficientValuesStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    getExecutionPriceForDecrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      indexTokenPrice: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExecutionPriceForIncrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionPnlUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      position: Position.PropsStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPositionLiquidatable(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      forLiquidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatePosition(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinPositionSize: PromiseOrValue<boolean>,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    willPositionCollateralBeSufficient(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      values: PositionUtils.WillPositionCollateralBeSufficientValuesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getExecutionPriceForDecrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      indexTokenPrice: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExecutionPriceForIncrease(
      params: PositionUtils.UpdatePositionParamsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionPnlUsd(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      position: Position.PropsStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionLiquidatable(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      forLiquidation: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatePosition(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      position: Position.PropsStruct,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      shouldValidateMinPositionSize: PromiseOrValue<boolean>,
      shouldValidateMinCollateralUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willPositionCollateralBeSufficient(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      values: PositionUtils.WillPositionCollateralBeSufficientValuesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
