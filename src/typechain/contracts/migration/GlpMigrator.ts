/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlpMigrator {
  export type GlpRedemptionStruct = {
    token: PromiseOrValue<string>;
    glpAmount: PromiseOrValue<BigNumberish>;
    minOut: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    externalCallTargets: PromiseOrValue<string>[];
    externalCallDataList: PromiseOrValue<BytesLike>[];
    refundTokens: PromiseOrValue<string>[];
    refundReceivers: PromiseOrValue<string>[];
  };

  export type GlpRedemptionStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string[],
    string[],
    string[],
    string[]
  ] & {
    token: string;
    glpAmount: BigNumber;
    minOut: BigNumber;
    receiver: string;
    externalCallTargets: string[];
    externalCallDataList: string[];
    refundTokens: string[];
    refundReceivers: string[];
  };

  export type MigrationItemStruct = {
    market: PromiseOrValue<string>;
    long: GlpMigrator.GlpRedemptionStruct;
    short: GlpMigrator.GlpRedemptionStruct;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
  };

  export type MigrationItemStructOutput = [
    string,
    GlpMigrator.GlpRedemptionStructOutput,
    GlpMigrator.GlpRedemptionStructOutput,
    BigNumber,
    BigNumber
  ] & {
    market: string;
    long: GlpMigrator.GlpRedemptionStructOutput;
    short: GlpMigrator.GlpRedemptionStructOutput;
    minMarketTokens: BigNumber;
    executionFee: BigNumber;
  };
}

export interface GlpMigratorInterface extends utils.Interface {
  functions: {
    "dataStore()": FunctionFragment;
    "depositHandler()": FunctionFragment;
    "depositVault()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "externalHandler()": FunctionFragment;
    "glpRewardRouter()": FunctionFragment;
    "glpTimelock()": FunctionFragment;
    "glpVault()": FunctionFragment;
    "migrate(uint256,(address,(address,uint256,uint256,address,address[],bytes[],address[],address[]),(address,uint256,uint256,address,address[],bytes[],address[],address[]),uint256,uint256)[])": FunctionFragment;
    "reducedMintBurnFeeBasisPoints()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setReducedMintBurnFeeBasisPoints(uint256)": FunctionFragment;
    "stakedGlp()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dataStore"
      | "depositHandler"
      | "depositVault"
      | "eventEmitter"
      | "externalHandler"
      | "glpRewardRouter"
      | "glpTimelock"
      | "glpVault"
      | "migrate"
      | "reducedMintBurnFeeBasisPoints"
      | "roleStore"
      | "setReducedMintBurnFeeBasisPoints"
      | "stakedGlp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpRewardRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "glpVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BigNumberish>, GlpMigrator.MigrationItemStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reducedMintBurnFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReducedMintBurnFeeBasisPoints",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stakedGlp", values?: undefined): string;

  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glpRewardRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "glpTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glpVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reducedMintBurnFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReducedMintBurnFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakedGlp", data: BytesLike): Result;

  events: {};
}

export interface GlpMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlpMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dataStore(overrides?: CallOverrides): Promise<[string]>;

    depositHandler(overrides?: CallOverrides): Promise<[string]>;

    depositVault(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    externalHandler(overrides?: CallOverrides): Promise<[string]>;

    glpRewardRouter(overrides?: CallOverrides): Promise<[string]>;

    glpTimelock(overrides?: CallOverrides): Promise<[string]>;

    glpVault(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      totalGlpAmount: PromiseOrValue<BigNumberish>,
      migrationItems: GlpMigrator.MigrationItemStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reducedMintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setReducedMintBurnFeeBasisPoints(
      _reducedMintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedGlp(overrides?: CallOverrides): Promise<[string]>;
  };

  dataStore(overrides?: CallOverrides): Promise<string>;

  depositHandler(overrides?: CallOverrides): Promise<string>;

  depositVault(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  externalHandler(overrides?: CallOverrides): Promise<string>;

  glpRewardRouter(overrides?: CallOverrides): Promise<string>;

  glpTimelock(overrides?: CallOverrides): Promise<string>;

  glpVault(overrides?: CallOverrides): Promise<string>;

  migrate(
    totalGlpAmount: PromiseOrValue<BigNumberish>,
    migrationItems: GlpMigrator.MigrationItemStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reducedMintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setReducedMintBurnFeeBasisPoints(
    _reducedMintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedGlp(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dataStore(overrides?: CallOverrides): Promise<string>;

    depositHandler(overrides?: CallOverrides): Promise<string>;

    depositVault(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    externalHandler(overrides?: CallOverrides): Promise<string>;

    glpRewardRouter(overrides?: CallOverrides): Promise<string>;

    glpTimelock(overrides?: CallOverrides): Promise<string>;

    glpVault(overrides?: CallOverrides): Promise<string>;

    migrate(
      totalGlpAmount: PromiseOrValue<BigNumberish>,
      migrationItems: GlpMigrator.MigrationItemStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    reducedMintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setReducedMintBurnFeeBasisPoints(
      _reducedMintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedGlp(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    depositHandler(overrides?: CallOverrides): Promise<BigNumber>;

    depositVault(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    externalHandler(overrides?: CallOverrides): Promise<BigNumber>;

    glpRewardRouter(overrides?: CallOverrides): Promise<BigNumber>;

    glpTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    glpVault(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      totalGlpAmount: PromiseOrValue<BigNumberish>,
      migrationItems: GlpMigrator.MigrationItemStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reducedMintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setReducedMintBurnFeeBasisPoints(
      _reducedMintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedGlp(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    externalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpRewardRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpTimelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      totalGlpAmount: PromiseOrValue<BigNumberish>,
      migrationItems: GlpMigrator.MigrationItemStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reducedMintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReducedMintBurnFeeBasisPoints(
      _reducedMintBurnFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedGlp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
