// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ClaimHandler {
  export type ClaimParamStruct = {
    token: PromiseOrValue<string>;
    distributionId: PromiseOrValue<BigNumberish>;
    termsSignature: PromiseOrValue<BytesLike>;
  };

  export type ClaimParamStructOutput = [string, BigNumber, string] & {
    token: string;
    distributionId: BigNumber;
    termsSignature: string;
  };

  export type TransferClaimParamStruct = {
    token: PromiseOrValue<string>;
    distributionId: PromiseOrValue<BigNumberish>;
    fromAccount: PromiseOrValue<string>;
    toAccount: PromiseOrValue<string>;
  };

  export type TransferClaimParamStructOutput = [
    string,
    BigNumber,
    string,
    string
  ] & {
    token: string;
    distributionId: BigNumber;
    fromAccount: string;
    toAccount: string;
  };

  export type WithdrawParamStruct = {
    account: PromiseOrValue<string>;
    distributionId: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawParamStructOutput = [string, BigNumber] & {
    account: string;
    distributionId: BigNumber;
  };
}

export declare namespace ClaimUtils {
  export type DepositParamStruct = {
    account: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DepositParamStructOutput = [string, BigNumber] & {
    account: string;
    amount: BigNumber;
  };
}

export interface ClaimHandlerInterface extends utils.Interface {
  functions: {
    "claimFunds((address,uint256,bytes)[],address)": FunctionFragment;
    "claimVault()": FunctionFragment;
    "dataStore()": FunctionFragment;
    "depositFunds(address,uint256,(address,uint256)[])": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "getClaimableAmount(address,address,uint256[])": FunctionFragment;
    "getTotalClaimableAmount(address)": FunctionFragment;
    "removeTerms(uint256)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setTerms(uint256,string)": FunctionFragment;
    "transferClaim(address,(address,uint256,address,address)[])": FunctionFragment;
    "withdrawFunds(address,(address,uint256)[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimFunds"
      | "claimVault"
      | "dataStore"
      | "depositFunds"
      | "eventEmitter"
      | "getClaimableAmount"
      | "getTotalClaimableAmount"
      | "removeTerms"
      | "roleStore"
      | "setTerms"
      | "transferClaim"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimFunds",
    values: [ClaimHandler.ClaimParamStruct[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      ClaimUtils.DepositParamStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalClaimableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTerms",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTerms",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferClaim",
    values: [PromiseOrValue<string>, ClaimHandler.TransferClaimParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [
      PromiseOrValue<string>,
      ClaimHandler.WithdrawParamStruct[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTerms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ClaimHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClaimHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFunds(
      params: ClaimHandler.ClaimParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimVault(overrides?: CallOverrides): Promise<[string]>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    depositFunds(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    getClaimableAmount(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalClaimableAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      terms: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferClaim(
      token: PromiseOrValue<string>,
      params: ClaimHandler.TransferClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      token: PromiseOrValue<string>,
      params: ClaimHandler.WithdrawParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimFunds(
    params: ClaimHandler.ClaimParamStruct[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimVault(overrides?: CallOverrides): Promise<string>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  depositFunds(
    token: PromiseOrValue<string>,
    distributionId: PromiseOrValue<BigNumberish>,
    params: ClaimUtils.DepositParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  getClaimableAmount(
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    distributionIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalClaimableAmount(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeTerms(
    distributionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setTerms(
    distributionId: PromiseOrValue<BigNumberish>,
    terms: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferClaim(
    token: PromiseOrValue<string>,
    params: ClaimHandler.TransferClaimParamStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    token: PromiseOrValue<string>,
    params: ClaimHandler.WithdrawParamStruct[],
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFunds(
      params: ClaimHandler.ClaimParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimVault(overrides?: CallOverrides): Promise<string>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    depositFunds(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    getClaimableAmount(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimableAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      terms: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferClaim(
      token: PromiseOrValue<string>,
      params: ClaimHandler.TransferClaimParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(
      token: PromiseOrValue<string>,
      params: ClaimHandler.WithdrawParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claimFunds(
      params: ClaimHandler.ClaimParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimVault(overrides?: CallOverrides): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    depositFunds(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableAmount(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalClaimableAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      terms: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferClaim(
      token: PromiseOrValue<string>,
      params: ClaimHandler.TransferClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      token: PromiseOrValue<string>,
      params: ClaimHandler.WithdrawParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFunds(
      params: ClaimHandler.ClaimParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFunds(
      token: PromiseOrValue<string>,
      distributionId: PromiseOrValue<BigNumberish>,
      params: ClaimUtils.DepositParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableAmount(
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      distributionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalClaimableAmount(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTerms(
      distributionId: PromiseOrValue<BigNumberish>,
      terms: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferClaim(
      token: PromiseOrValue<string>,
      params: ClaimHandler.TransferClaimParamStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      token: PromiseOrValue<string>,
      params: ClaimHandler.WithdrawParamStruct[],
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
