// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type RateLimitExemptAddressStruct = {
  addr: PromiseOrValue<string>;
  isExempt: PromiseOrValue<boolean>;
};

export type RateLimitExemptAddressStructOutput = [string, boolean] & {
  addr: string;
  isExempt: boolean;
};

export declare namespace RateLimiter {
  export type RateLimitConfigStruct = {
    dstEid: PromiseOrValue<BigNumberish>;
    limit: PromiseOrValue<BigNumberish>;
    window: PromiseOrValue<BigNumberish>;
  };

  export type RateLimitConfigStructOutput = [number, BigNumber, BigNumber] & {
    dstEid: number;
    limit: BigNumber;
    window: BigNumber;
  };
}

export interface IOverridableInboundRatelimitInterface extends utils.Interface {
  functions: {
    "exemptAddresses(address)": FunctionFragment;
    "guidOverrides(bytes32)": FunctionFragment;
    "modifyOverridableGUIDs(bytes32[],bool)": FunctionFragment;
    "modifyRateLimitExemptAddresses((address,bool)[])": FunctionFragment;
    "setRateLimits((uint32,uint256,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exemptAddresses"
      | "guidOverrides"
      | "modifyOverridableGUIDs"
      | "modifyRateLimitExemptAddresses"
      | "setRateLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exemptAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "guidOverrides",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyOverridableGUIDs",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyRateLimitExemptAddresses",
    values: [RateLimitExemptAddressStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimits",
    values: [RateLimiter.RateLimitConfigStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "exemptAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guidOverrides",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyOverridableGUIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyRateLimitExemptAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimits",
    data: BytesLike
  ): Result;

  events: {
    "RateLimitOverrider_ModifiedAddress(tuple[])": EventFragment;
    "RateLimitOverrider_ModifiedGUID(bytes32[],bool)": EventFragment;
    "RateLimitUpdated(tuple[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "RateLimitOverrider_ModifiedAddress"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RateLimitOverrider_ModifiedGUID"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateLimitUpdated"): EventFragment;
}

export interface RateLimitOverrider_ModifiedAddressEventObject {
  addresses: RateLimitExemptAddressStructOutput[];
}
export type RateLimitOverrider_ModifiedAddressEvent = TypedEvent<
  [RateLimitExemptAddressStructOutput[]],
  RateLimitOverrider_ModifiedAddressEventObject
>;

export type RateLimitOverrider_ModifiedAddressEventFilter =
  TypedEventFilter<RateLimitOverrider_ModifiedAddressEvent>;

export interface RateLimitOverrider_ModifiedGUIDEventObject {
  guid: string[];
  canOverride: boolean;
}
export type RateLimitOverrider_ModifiedGUIDEvent = TypedEvent<
  [string[], boolean],
  RateLimitOverrider_ModifiedGUIDEventObject
>;

export type RateLimitOverrider_ModifiedGUIDEventFilter =
  TypedEventFilter<RateLimitOverrider_ModifiedGUIDEvent>;

export interface RateLimitUpdatedEventObject {
  newConfigs: RateLimiter.RateLimitConfigStructOutput[];
}
export type RateLimitUpdatedEvent = TypedEvent<
  [RateLimiter.RateLimitConfigStructOutput[]],
  RateLimitUpdatedEventObject
>;

export type RateLimitUpdatedEventFilter =
  TypedEventFilter<RateLimitUpdatedEvent>;

export interface IOverridableInboundRatelimit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOverridableInboundRatelimitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exemptAddresses(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isExempt: boolean }>;

    guidOverrides(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { canOverride: boolean }>;

    modifyOverridableGUIDs(
      guids: PromiseOrValue<BytesLike>[],
      canOverride: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyRateLimitExemptAddresses(
      _exemptAddresses: RateLimitExemptAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRateLimits(
      rateLimitConfigs: RateLimiter.RateLimitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  exemptAddresses(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  guidOverrides(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  modifyOverridableGUIDs(
    guids: PromiseOrValue<BytesLike>[],
    canOverride: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyRateLimitExemptAddresses(
    _exemptAddresses: RateLimitExemptAddressStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRateLimits(
    rateLimitConfigs: RateLimiter.RateLimitConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exemptAddresses(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    guidOverrides(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modifyOverridableGUIDs(
      guids: PromiseOrValue<BytesLike>[],
      canOverride: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyRateLimitExemptAddresses(
      _exemptAddresses: RateLimitExemptAddressStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRateLimits(
      rateLimitConfigs: RateLimiter.RateLimitConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RateLimitOverrider_ModifiedAddress(tuple[])"(
      addresses?: RateLimitExemptAddressStruct[] | null
    ): RateLimitOverrider_ModifiedAddressEventFilter;
    RateLimitOverrider_ModifiedAddress(
      addresses?: RateLimitExemptAddressStruct[] | null
    ): RateLimitOverrider_ModifiedAddressEventFilter;

    "RateLimitOverrider_ModifiedGUID(bytes32[],bool)"(
      guid?: PromiseOrValue<BytesLike>[] | null,
      canOverride?: null
    ): RateLimitOverrider_ModifiedGUIDEventFilter;
    RateLimitOverrider_ModifiedGUID(
      guid?: PromiseOrValue<BytesLike>[] | null,
      canOverride?: null
    ): RateLimitOverrider_ModifiedGUIDEventFilter;

    "RateLimitUpdated(tuple[])"(newConfigs?: null): RateLimitUpdatedEventFilter;
    RateLimitUpdated(newConfigs?: null): RateLimitUpdatedEventFilter;
  };

  estimateGas: {
    exemptAddresses(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guidOverrides(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyOverridableGUIDs(
      guids: PromiseOrValue<BytesLike>[],
      canOverride: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyRateLimitExemptAddresses(
      _exemptAddresses: RateLimitExemptAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRateLimits(
      rateLimitConfigs: RateLimiter.RateLimitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exemptAddresses(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guidOverrides(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyOverridableGUIDs(
      guids: PromiseOrValue<BytesLike>[],
      canOverride: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyRateLimitExemptAddresses(
      _exemptAddresses: RateLimitExemptAddressStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRateLimits(
      rateLimitConfigs: RateLimiter.RateLimitConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
