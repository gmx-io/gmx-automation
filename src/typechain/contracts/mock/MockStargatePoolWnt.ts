// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SendParamStruct = {
  dstEid: PromiseOrValue<BigNumberish>;
  to: PromiseOrValue<BytesLike>;
  amountLD: PromiseOrValue<BigNumberish>;
  minAmountLD: PromiseOrValue<BigNumberish>;
  extraOptions: PromiseOrValue<BytesLike>;
  composeMsg: PromiseOrValue<BytesLike>;
  oftCmd: PromiseOrValue<BytesLike>;
};

export type SendParamStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  dstEid: number;
  to: string;
  amountLD: BigNumber;
  minAmountLD: BigNumber;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type OFTLimitStruct = {
  minAmountLD: PromiseOrValue<BigNumberish>;
  maxAmountLD: PromiseOrValue<BigNumberish>;
};

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
  minAmountLD: BigNumber;
  maxAmountLD: BigNumber;
};

export type OFTFeeDetailStruct = {
  feeAmountLD: PromiseOrValue<BigNumberish>;
  description: PromiseOrValue<string>;
};

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
  feeAmountLD: BigNumber;
  description: string;
};

export type OFTReceiptStruct = {
  amountSentLD: PromiseOrValue<BigNumberish>;
  amountReceivedLD: PromiseOrValue<BigNumberish>;
};

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
};

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export interface MockStargatePoolWntInterface extends utils.Interface {
  functions: {
    "BRIDGE_OUT_FEE()": FunctionFragment;
    "SRC_EID()": FunctionFragment;
    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "sendToken(address,uint256,bytes)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGE_OUT_FEE"
      | "SRC_EID"
      | "quoteOFT"
      | "quoteSend"
      | "send"
      | "sendToken"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGE_OUT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SRC_EID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BRIDGE_OUT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SRC_EID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export interface MockStargatePoolWnt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockStargatePoolWntInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGE_OUT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SRC_EID(overrides?: CallOverrides): Promise<[number]>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      arg0: SendParamStruct,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    send(
      _sendParam: SendParamStruct,
      arg1: MessagingFeeStruct,
      arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  BRIDGE_OUT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  SRC_EID(overrides?: CallOverrides): Promise<number>;

  quoteOFT(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & {
      oftLimit: OFTLimitStructOutput;
      oftFeeDetails: OFTFeeDetailStructOutput[];
      oftReceipt: OFTReceiptStructOutput;
    }
  >;

  quoteSend(
    arg0: SendParamStruct,
    arg1: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  send(
    _sendParam: SendParamStruct,
    arg1: MessagingFeeStruct,
    arg2: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendToken(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BRIDGE_OUT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    SRC_EID(overrides?: CallOverrides): Promise<number>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      arg0: SendParamStruct,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    send(
      _sendParam: SendParamStruct,
      arg1: MessagingFeeStruct,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MessagingReceiptStructOutput, OFTReceiptStructOutput]>;

    sendToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BRIDGE_OUT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    SRC_EID(overrides?: CallOverrides): Promise<BigNumber>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSend(
      arg0: SendParamStruct,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      arg1: MessagingFeeStruct,
      arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_OUT_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SRC_EID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSend(
      arg0: SendParamStruct,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    send(
      _sendParam: SendParamStruct,
      arg1: MessagingFeeStruct,
      arg2: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendToken(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
