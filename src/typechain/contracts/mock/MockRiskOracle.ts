// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace MockRiskOracle {
  export type RiskParameterUpdateStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    newValue: PromiseOrValue<BytesLike>;
    referenceId: PromiseOrValue<string>;
    previousValue: PromiseOrValue<BytesLike>;
    updateType: PromiseOrValue<string>;
    updateId: PromiseOrValue<BigNumberish>;
    market: PromiseOrValue<string>;
    additionalData: PromiseOrValue<BytesLike>;
  };

  export type RiskParameterUpdateStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    timestamp: BigNumber;
    newValue: string;
    referenceId: string;
    previousValue: string;
    updateType: string;
    updateId: BigNumber;
    market: string;
    additionalData: string;
  };
}

export interface MockRiskOracleInterface extends utils.Interface {
  functions: {
    "addAuthorizedSender(address)": FunctionFragment;
    "addUpdateType(string)": FunctionFragment;
    "getAllUpdateTypes()": FunctionFragment;
    "getLatestUpdateByParameterAndMarket(string,address)": FunctionFragment;
    "getUpdateById(uint256)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "latestUpdateIdByMarketAndType(address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "publishBulkRiskParameterUpdates(string[],bytes[],string[],address[],bytes[])": FunctionFragment;
    "publishRiskParameterUpdate(string,bytes,string,address,bytes)": FunctionFragment;
    "removeAuthorizedSender(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCounter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAuthorizedSender"
      | "addUpdateType"
      | "getAllUpdateTypes"
      | "getLatestUpdateByParameterAndMarket"
      | "getUpdateById"
      | "isAuthorized"
      | "latestUpdateIdByMarketAndType"
      | "owner"
      | "publishBulkRiskParameterUpdates"
      | "publishRiskParameterUpdate"
      | "removeAuthorizedSender"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateCounter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAuthorizedSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addUpdateType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUpdateTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestUpdateByParameterAndMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdateById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestUpdateIdByMarketAndType",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishBulkRiskParameterUpdates",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishRiskParameterUpdate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCounter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUpdateType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUpdateTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestUpdateByParameterAndMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdateById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestUpdateIdByMarketAndType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishBulkRiskParameterUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishRiskParameterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCounter",
    data: BytesLike
  ): Result;

  events: {
    "AuthorizedSenderAdded(address)": EventFragment;
    "AuthorizedSenderRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParameterUpdated(string,bytes,bytes,uint256,string,uint256,address,bytes)": EventFragment;
    "UpdateTypeAdded(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedSenderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizedSenderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTypeAdded"): EventFragment;
}

export interface AuthorizedSenderAddedEventObject {
  sender: string;
}
export type AuthorizedSenderAddedEvent = TypedEvent<
  [string],
  AuthorizedSenderAddedEventObject
>;

export type AuthorizedSenderAddedEventFilter =
  TypedEventFilter<AuthorizedSenderAddedEvent>;

export interface AuthorizedSenderRemovedEventObject {
  sender: string;
}
export type AuthorizedSenderRemovedEvent = TypedEvent<
  [string],
  AuthorizedSenderRemovedEventObject
>;

export type AuthorizedSenderRemovedEventFilter =
  TypedEventFilter<AuthorizedSenderRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParameterUpdatedEventObject {
  referenceId: string;
  newValue: string;
  previousValue: string;
  timestamp: BigNumber;
  updateType: string;
  updateId: BigNumber;
  market: string;
  additionalData: string;
}
export type ParameterUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber, string, string],
  ParameterUpdatedEventObject
>;

export type ParameterUpdatedEventFilter =
  TypedEventFilter<ParameterUpdatedEvent>;

export interface UpdateTypeAddedEventObject {
  updateType: string;
}
export type UpdateTypeAddedEvent = TypedEvent<
  [string],
  UpdateTypeAddedEventObject
>;

export type UpdateTypeAddedEventFilter = TypedEventFilter<UpdateTypeAddedEvent>;

export interface MockRiskOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockRiskOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addUpdateType(
      newUpdateType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllUpdateTypes(overrides?: CallOverrides): Promise<[string[]]>;

    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MockRiskOracle.RiskParameterUpdateStructOutput]>;

    getUpdateById(
      updateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MockRiskOracle.RiskParameterUpdateStructOutput]>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    latestUpdateIdByMarketAndType(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publishBulkRiskParameterUpdates(
      referenceIds: PromiseOrValue<string>[],
      newValues: PromiseOrValue<BytesLike>[],
      updateTypes: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      additionalData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishRiskParameterUpdate(
      referenceId: PromiseOrValue<string>,
      newValue: PromiseOrValue<BytesLike>,
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCounter(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addAuthorizedSender(
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addUpdateType(
    newUpdateType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllUpdateTypes(overrides?: CallOverrides): Promise<string[]>;

  getLatestUpdateByParameterAndMarket(
    updateType: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MockRiskOracle.RiskParameterUpdateStructOutput>;

  getUpdateById(
    updateId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockRiskOracle.RiskParameterUpdateStructOutput>;

  isAuthorized(
    sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestUpdateIdByMarketAndType(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  publishBulkRiskParameterUpdates(
    referenceIds: PromiseOrValue<string>[],
    newValues: PromiseOrValue<BytesLike>[],
    updateTypes: PromiseOrValue<string>[],
    markets: PromiseOrValue<string>[],
    additionalData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishRiskParameterUpdate(
    referenceId: PromiseOrValue<string>,
    newValue: PromiseOrValue<BytesLike>,
    updateType: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    additionalData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAuthorizedSender(
    sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCounter(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addUpdateType(
      newUpdateType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllUpdateTypes(overrides?: CallOverrides): Promise<string[]>;

    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MockRiskOracle.RiskParameterUpdateStructOutput>;

    getUpdateById(
      updateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockRiskOracle.RiskParameterUpdateStructOutput>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestUpdateIdByMarketAndType(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    publishBulkRiskParameterUpdates(
      referenceIds: PromiseOrValue<string>[],
      newValues: PromiseOrValue<BytesLike>[],
      updateTypes: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      additionalData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    publishRiskParameterUpdate(
      referenceId: PromiseOrValue<string>,
      newValue: PromiseOrValue<BytesLike>,
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuthorizedSenderAdded(address)"(
      sender?: PromiseOrValue<string> | null
    ): AuthorizedSenderAddedEventFilter;
    AuthorizedSenderAdded(
      sender?: PromiseOrValue<string> | null
    ): AuthorizedSenderAddedEventFilter;

    "AuthorizedSenderRemoved(address)"(
      sender?: PromiseOrValue<string> | null
    ): AuthorizedSenderRemovedEventFilter;
    AuthorizedSenderRemoved(
      sender?: PromiseOrValue<string> | null
    ): AuthorizedSenderRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ParameterUpdated(string,bytes,bytes,uint256,string,uint256,address,bytes)"(
      referenceId?: null,
      newValue?: null,
      previousValue?: null,
      timestamp?: null,
      updateType?: PromiseOrValue<string> | null,
      updateId?: PromiseOrValue<BigNumberish> | null,
      market?: PromiseOrValue<string> | null,
      additionalData?: null
    ): ParameterUpdatedEventFilter;
    ParameterUpdated(
      referenceId?: null,
      newValue?: null,
      previousValue?: null,
      timestamp?: null,
      updateType?: PromiseOrValue<string> | null,
      updateId?: PromiseOrValue<BigNumberish> | null,
      market?: PromiseOrValue<string> | null,
      additionalData?: null
    ): ParameterUpdatedEventFilter;

    "UpdateTypeAdded(string)"(
      updateType?: PromiseOrValue<string> | null
    ): UpdateTypeAddedEventFilter;
    UpdateTypeAdded(
      updateType?: PromiseOrValue<string> | null
    ): UpdateTypeAddedEventFilter;
  };

  estimateGas: {
    addAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addUpdateType(
      newUpdateType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllUpdateTypes(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdateById(
      updateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestUpdateIdByMarketAndType(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publishBulkRiskParameterUpdates(
      referenceIds: PromiseOrValue<string>[],
      newValues: PromiseOrValue<BytesLike>[],
      updateTypes: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      additionalData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishRiskParameterUpdate(
      referenceId: PromiseOrValue<string>,
      newValue: PromiseOrValue<BytesLike>,
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addUpdateType(
      newUpdateType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllUpdateTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdateById(
      updateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestUpdateIdByMarketAndType(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishBulkRiskParameterUpdates(
      referenceIds: PromiseOrValue<string>[],
      newValues: PromiseOrValue<BytesLike>[],
      updateTypes: PromiseOrValue<string>[],
      markets: PromiseOrValue<string>[],
      additionalData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishRiskParameterUpdate(
      referenceId: PromiseOrValue<string>,
      newValue: PromiseOrValue<BytesLike>,
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      additionalData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedSender(
      sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
