// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export declare namespace MultichainReaderUtils {
  export type ReadRequestInputsStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type ReadRequestInputsStructOutput = [number, string, string] & {
    chainId: number;
    target: string;
    callData: string;
  };

  export type ExtraOptionsInputsStruct = {
    gasLimit: PromiseOrValue<BigNumberish>;
    returnDataSize: PromiseOrValue<BigNumberish>;
    msgValue: PromiseOrValue<BigNumberish>;
  };

  export type ExtraOptionsInputsStructOutput = [
    BigNumber,
    number,
    BigNumber
  ] & { gasLimit: BigNumber; returnDataSize: number; msgValue: BigNumber };

  export type ReceivedDataStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    readData: PromiseOrValue<BytesLike>;
  };

  export type ReceivedDataStructOutput = [BigNumber, string] & {
    timestamp: BigNumber;
    readData: string;
  };
}

export interface TestLZReadInterface extends utils.Interface {
  functions: {
    "WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT()": FunctionFragment;
    "bytes32ToAddress(bytes32)": FunctionFragment;
    "callSendReadRequests((uint32,address,bytes)[],(uint128,uint32,uint128),bool)": FunctionFragment;
    "callquoteReadFee((uint32,address,bytes)[],(uint128,uint32,uint128))": FunctionFragment;
    "decode(bytes)": FunctionFragment;
    "deposit()": FunctionFragment;
    "feeAmount(bytes32)": FunctionFragment;
    "feeKeeper()": FunctionFragment;
    "guids(uint256)": FunctionFragment;
    "latestReadNumber()": FunctionFragment;
    "latestReceivedData()": FunctionFragment;
    "latestTimeStamp()": FunctionFragment;
    "messagingReceiptStorage()": FunctionFragment;
    "multichainReader()": FunctionFragment;
    "owner()": FunctionFragment;
    "processLzReceive(bytes32,(uint256,bytes))": FunctionFragment;
    "receivedData(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setmultichainReader(address)": FunctionFragment;
    "stakedGmx(bytes32)": FunctionFragment;
    "testAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "triggerTransaction(bytes32)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT"
      | "bytes32ToAddress"
      | "callSendReadRequests"
      | "callquoteReadFee"
      | "decode"
      | "deposit"
      | "feeAmount"
      | "feeKeeper"
      | "guids"
      | "latestReadNumber"
      | "latestReceivedData"
      | "latestTimeStamp"
      | "messagingReceiptStorage"
      | "multichainReader"
      | "owner"
      | "processLzReceive"
      | "receivedData"
      | "renounceOwnership"
      | "setmultichainReader"
      | "stakedGmx"
      | "testAddress"
      | "transferOwnership"
      | "triggerTransaction"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "callSendReadRequests",
    values: [
      MultichainReaderUtils.ReadRequestInputsStruct[],
      MultichainReaderUtils.ExtraOptionsInputsStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "callquoteReadFee",
    values: [
      MultichainReaderUtils.ReadRequestInputsStruct[],
      MultichainReaderUtils.ExtraOptionsInputsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeAmount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "feeKeeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestReadNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestReceivedData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messagingReceiptStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multichainReader",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processLzReceive",
    values: [
      PromiseOrValue<BytesLike>,
      MultichainReaderUtils.ReceivedDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receivedData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setmultichainReader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedGmx",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "testAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callSendReadRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callquoteReadFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestReadNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestReceivedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messagingReceiptStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setmultichainReader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakedGmx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TestLZRead extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLZReadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<[string]>;

    bytes32ToAddress(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    callSendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      triggerTransactionInput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callquoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decode(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MultichainReaderUtils.ReceivedDataStructOutput]>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeAmount(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    feeKeeper(overrides?: CallOverrides): Promise<[string]>;

    guids(
      readNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { guid: string }>;

    latestReadNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestReceivedData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { timestamp: BigNumber; readData: string }
    >;

    latestTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    messagingReceiptStorage(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, MessagingFeeStructOutput] & {
        guid: string;
        nonce: BigNumber;
        fee: MessagingFeeStructOutput;
      }
    >;

    multichainReader(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    processLzReceive(
      guid: PromiseOrValue<BytesLike>,
      receivedDataInput: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    receivedData(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { timestamp: BigNumber; readData: string }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setmultichainReader(
      _multichainReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedGmx(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    testAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerTransaction(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { trigger: boolean }>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

  bytes32ToAddress(
    _b: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callSendReadRequests(
    readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
    extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
    triggerTransactionInput: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callquoteReadFee(
    readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
    extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decode(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MultichainReaderUtils.ReceivedDataStructOutput>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeAmount(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeKeeper(overrides?: CallOverrides): Promise<string>;

  guids(
    readNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  latestReadNumber(overrides?: CallOverrides): Promise<BigNumber>;

  latestReceivedData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { timestamp: BigNumber; readData: string }>;

  latestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  messagingReceiptStorage(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, MessagingFeeStructOutput] & {
      guid: string;
      nonce: BigNumber;
      fee: MessagingFeeStructOutput;
    }
  >;

  multichainReader(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  processLzReceive(
    guid: PromiseOrValue<BytesLike>,
    receivedDataInput: MultichainReaderUtils.ReceivedDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  receivedData(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { timestamp: BigNumber; readData: string }>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setmultichainReader(
    _multichainReader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedGmx(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerTransaction(
    guid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<string>;

    bytes32ToAddress(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    callSendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      triggerTransactionInput: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    callquoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decode(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MultichainReaderUtils.ReceivedDataStructOutput>;

    deposit(overrides?: CallOverrides): Promise<void>;

    feeAmount(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeKeeper(overrides?: CallOverrides): Promise<string>;

    guids(
      readNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    latestReadNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestReceivedData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { timestamp: BigNumber; readData: string }
    >;

    latestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    messagingReceiptStorage(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, MessagingFeeStructOutput] & {
        guid: string;
        nonce: BigNumber;
        fee: MessagingFeeStructOutput;
      }
    >;

    multichainReader(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    processLzReceive(
      guid: PromiseOrValue<BytesLike>,
      receivedDataInput: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    receivedData(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { timestamp: BigNumber; readData: string }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setmultichainReader(
      _multichainReader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedGmx(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerTransaction(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bytes32ToAddress(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callSendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      triggerTransactionInput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callquoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decode(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeAmount(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    guids(
      readNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestReadNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestReceivedData(overrides?: CallOverrides): Promise<BigNumber>;

    latestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    messagingReceiptStorage(overrides?: CallOverrides): Promise<BigNumber>;

    multichainReader(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    processLzReceive(
      guid: PromiseOrValue<BytesLike>,
      receivedDataInput: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    receivedData(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setmultichainReader(
      _multichainReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedGmx(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerTransaction(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WITHDRAWABLE_BUYBACK_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bytes32ToAddress(
      _b: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callSendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      triggerTransactionInput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callquoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decode(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeAmount(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guids(
      readNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestReadNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestReceivedData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestTimeStamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messagingReceiptStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainReader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processLzReceive(
      guid: PromiseOrValue<BytesLike>,
      receivedDataInput: MultichainReaderUtils.ReceivedDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    receivedData(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setmultichainReader(
      _multichainReader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedGmx(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerTransaction(
      guid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
