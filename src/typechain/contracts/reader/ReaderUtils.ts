/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    cancellationReceiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[]
  ] & {
    account: string;
    receiver: string;
    cancellationReceiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    decreasePositionSwapType: PromiseOrValue<BigNumberish>;
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    validFromTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderType: number;
    decreasePositionSwapType: number;
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtTime: BigNumber;
    validFromTime: BigNumber;
  };

  export type FlagsStruct = {
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
    autoCancel: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean, boolean, boolean] & {
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
    autoCancel: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };

  export type CollateralTypeStruct = {
    longToken: PromiseOrValue<BigNumberish>;
    shortToken: PromiseOrValue<BigNumberish>;
  };

  export type CollateralTypeStructOutput = [BigNumber, BigNumber] & {
    longToken: BigNumber;
    shortToken: BigNumber;
  };

  export type PositionTypeStruct = {
    long: MarketUtils.CollateralTypeStruct;
    short: MarketUtils.CollateralTypeStruct;
  };

  export type PositionTypeStructOutput = [
    MarketUtils.CollateralTypeStructOutput,
    MarketUtils.CollateralTypeStructOutput
  ] & {
    long: MarketUtils.CollateralTypeStructOutput;
    short: MarketUtils.CollateralTypeStructOutput;
  };

  export type GetNextFundingAmountPerSizeResultStruct = {
    longsPayShorts: PromiseOrValue<boolean>;
    fundingFactorPerSecond: PromiseOrValue<BigNumberish>;
    nextSavedFundingFactorPerSecond: PromiseOrValue<BigNumberish>;
    fundingFeeAmountPerSizeDelta: MarketUtils.PositionTypeStruct;
    claimableFundingAmountPerSizeDelta: MarketUtils.PositionTypeStruct;
  };

  export type GetNextFundingAmountPerSizeResultStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    MarketUtils.PositionTypeStructOutput,
    MarketUtils.PositionTypeStructOutput
  ] & {
    longsPayShorts: boolean;
    fundingFactorPerSecond: BigNumber;
    nextSavedFundingFactorPerSecond: BigNumber;
    fundingFeeAmountPerSizeDelta: MarketUtils.PositionTypeStructOutput;
    claimableFundingAmountPerSizeDelta: MarketUtils.PositionTypeStructOutput;
  };
}

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace ReaderUtils {
  export type BaseFundingValuesStruct = {
    fundingFeeAmountPerSize: MarketUtils.PositionTypeStruct;
    claimableFundingAmountPerSize: MarketUtils.PositionTypeStruct;
  };

  export type BaseFundingValuesStructOutput = [
    MarketUtils.PositionTypeStructOutput,
    MarketUtils.PositionTypeStructOutput
  ] & {
    fundingFeeAmountPerSize: MarketUtils.PositionTypeStructOutput;
    claimableFundingAmountPerSize: MarketUtils.PositionTypeStructOutput;
  };

  export type VirtualInventoryStruct = {
    virtualPoolAmountForLongToken: PromiseOrValue<BigNumberish>;
    virtualPoolAmountForShortToken: PromiseOrValue<BigNumberish>;
    virtualInventoryForPositions: PromiseOrValue<BigNumberish>;
  };

  export type VirtualInventoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    virtualPoolAmountForLongToken: BigNumber;
    virtualPoolAmountForShortToken: BigNumber;
    virtualInventoryForPositions: BigNumber;
  };

  export type MarketInfoStruct = {
    market: Market.PropsStruct;
    borrowingFactorPerSecondForLongs: PromiseOrValue<BigNumberish>;
    borrowingFactorPerSecondForShorts: PromiseOrValue<BigNumberish>;
    baseFunding: ReaderUtils.BaseFundingValuesStruct;
    nextFunding: MarketUtils.GetNextFundingAmountPerSizeResultStruct;
    virtualInventory: ReaderUtils.VirtualInventoryStruct;
    isDisabled: PromiseOrValue<boolean>;
  };

  export type MarketInfoStructOutput = [
    Market.PropsStructOutput,
    BigNumber,
    BigNumber,
    ReaderUtils.BaseFundingValuesStructOutput,
    MarketUtils.GetNextFundingAmountPerSizeResultStructOutput,
    ReaderUtils.VirtualInventoryStructOutput,
    boolean
  ] & {
    market: Market.PropsStructOutput;
    borrowingFactorPerSecondForLongs: BigNumber;
    borrowingFactorPerSecondForShorts: BigNumber;
    baseFunding: ReaderUtils.BaseFundingValuesStructOutput;
    nextFunding: MarketUtils.GetNextFundingAmountPerSizeResultStructOutput;
    virtualInventory: ReaderUtils.VirtualInventoryStructOutput;
    isDisabled: boolean;
  };
}

export interface ReaderUtilsInterface extends utils.Interface {
  functions: {
    "getAccountOrders(DataStore,address,uint256,uint256)": FunctionFragment;
    "getAdlState(DataStore,address,bool,((uint256,uint256),(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "getBaseFundingValues(DataStore,(address,address,address,address))": FunctionFragment;
    "getMarketInfo(DataStore,((uint256,uint256),(uint256,uint256),(uint256,uint256)),address)": FunctionFragment;
    "getMarketInfoList(DataStore,((uint256,uint256),(uint256,uint256),(uint256,uint256))[],uint256,uint256)": FunctionFragment;
    "getMarkets(DataStore,uint256,uint256)": FunctionFragment;
    "getOrder(DataStore,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountOrders"
      | "getAdlState"
      | "getBaseFundingValues"
      | "getMarketInfo"
      | "getMarketInfoList"
      | "getMarkets"
      | "getOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountOrders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdlState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      MarketUtils.MarketPricesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseFundingValues",
    values: [PromiseOrValue<string>, Market.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [
      PromiseOrValue<string>,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfoList",
    values: [
      PromiseOrValue<string>,
      MarketUtils.MarketPricesStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdlState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseFundingValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;

  events: {};
}

export interface ReaderUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Order.PropsStructOutput[]]>;

    getAdlState(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;

    getBaseFundingValues(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<[ReaderUtils.BaseFundingValuesStructOutput]>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReaderUtils.MarketInfoStructOutput]>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReaderUtils.MarketInfoStructOutput[]]>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Market.PropsStructOutput[]]>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Order.PropsStructOutput]>;
  };

  getAccountOrders(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Order.PropsStructOutput[]>;

  getAdlState(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    prices: MarketUtils.MarketPricesStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;

  getBaseFundingValues(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    overrides?: CallOverrides
  ): Promise<ReaderUtils.BaseFundingValuesStructOutput>;

  getMarketInfo(
    dataStore: PromiseOrValue<string>,
    prices: MarketUtils.MarketPricesStruct,
    marketKey: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReaderUtils.MarketInfoStructOutput>;

  getMarketInfoList(
    dataStore: PromiseOrValue<string>,
    marketPricesList: MarketUtils.MarketPricesStruct[],
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReaderUtils.MarketInfoStructOutput[]>;

  getMarkets(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Market.PropsStructOutput[]>;

  getOrder(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Order.PropsStructOutput>;

  callStatic: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Order.PropsStructOutput[]>;

    getAdlState(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean, BigNumber, BigNumber]>;

    getBaseFundingValues(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<ReaderUtils.BaseFundingValuesStructOutput>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReaderUtils.MarketInfoStructOutput>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReaderUtils.MarketInfoStructOutput[]>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Market.PropsStructOutput[]>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Order.PropsStructOutput>;
  };

  filters: {};

  estimateGas: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdlState(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseFundingValues(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountOrders(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdlState(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseFundingValues(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      dataStore: PromiseOrValue<string>,
      prices: MarketUtils.MarketPricesStruct,
      marketKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfoList(
      dataStore: PromiseOrValue<string>,
      marketPricesList: MarketUtils.MarketPricesStruct[],
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
