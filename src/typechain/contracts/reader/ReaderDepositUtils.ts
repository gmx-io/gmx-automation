/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };
}

export declare namespace ReaderDepositUtils {
  export type GetDepositAmountOutForSingleTokenParamsStruct = {
    dataStore: PromiseOrValue<string>;
    market: Market.PropsStruct;
    prices: MarketUtils.MarketPricesStruct;
    tokenIn: PromiseOrValue<string>;
    tokenInPrice: Price.PropsStruct;
    tokenOut: PromiseOrValue<string>;
    tokenOutPrice: Price.PropsStruct;
    amount: PromiseOrValue<BigNumberish>;
    priceImpactUsd: PromiseOrValue<BigNumberish>;
    uiFeeReceiver: PromiseOrValue<string>;
    swapPricingType: PromiseOrValue<BigNumberish>;
  };

  export type GetDepositAmountOutForSingleTokenParamsStructOutput = [
    string,
    Market.PropsStructOutput,
    MarketUtils.MarketPricesStructOutput,
    string,
    Price.PropsStructOutput,
    string,
    Price.PropsStructOutput,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    dataStore: string;
    market: Market.PropsStructOutput;
    prices: MarketUtils.MarketPricesStructOutput;
    tokenIn: string;
    tokenInPrice: Price.PropsStructOutput;
    tokenOut: string;
    tokenOutPrice: Price.PropsStructOutput;
    amount: BigNumber;
    priceImpactUsd: BigNumber;
    uiFeeReceiver: string;
    swapPricingType: number;
  };
}

export interface ReaderDepositUtilsInterface extends utils.Interface {
  functions: {
    "getDepositAmountOut(DataStore,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),uint256,uint256,address,uint8,bool)": FunctionFragment;
    "getDepositAmountOutForSingleToken((DataStore,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)),address,(uint256,uint256),address,(uint256,uint256),uint256,int256,address,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDepositAmountOut"
      | "getDepositAmountOutForSingleToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDepositAmountOut",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmountOutForSingleToken",
    values: [ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDepositAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmountOutForSingleToken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ReaderDepositUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderDepositUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDepositAmountOut(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      longTokenAmount: PromiseOrValue<BigNumberish>,
      shortTokenAmount: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      includeVirtualInventoryImpact: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositAmountOutForSingleToken(
      params: ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getDepositAmountOut(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    longTokenAmount: PromiseOrValue<BigNumberish>,
    shortTokenAmount: PromiseOrValue<BigNumberish>,
    uiFeeReceiver: PromiseOrValue<string>,
    swapPricingType: PromiseOrValue<BigNumberish>,
    includeVirtualInventoryImpact: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositAmountOutForSingleToken(
    params: ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getDepositAmountOut(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      longTokenAmount: PromiseOrValue<BigNumberish>,
      shortTokenAmount: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      includeVirtualInventoryImpact: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmountOutForSingleToken(
      params: ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getDepositAmountOut(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      longTokenAmount: PromiseOrValue<BigNumberish>,
      shortTokenAmount: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      includeVirtualInventoryImpact: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmountOutForSingleToken(
      params: ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDepositAmountOut(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      longTokenAmount: PromiseOrValue<BigNumberish>,
      shortTokenAmount: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      includeVirtualInventoryImpact: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositAmountOutForSingleToken(
      params: ReaderDepositUtils.GetDepositAmountOutForSingleTokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
