// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvDeposit {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minGlvTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean] & {
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };

  export type PropsStruct = {
    addresses: GlvDeposit.AddressesStruct;
    numbers: GlvDeposit.NumbersStruct;
    flags: GlvDeposit.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvDeposit.AddressesStructOutput,
    GlvDeposit.NumbersStructOutput,
    GlvDeposit.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvDeposit.AddressesStructOutput;
    numbers: GlvDeposit.NumbersStructOutput;
    flags: GlvDeposit.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace GlvWithdrawal {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    glvTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    glvTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: GlvWithdrawal.AddressesStruct;
    numbers: GlvWithdrawal.NumbersStruct;
    flags: GlvWithdrawal.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvWithdrawal.AddressesStructOutput,
    GlvWithdrawal.NumbersStructOutput,
    GlvWithdrawal.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvWithdrawal.AddressesStructOutput;
    numbers: GlvWithdrawal.NumbersStructOutput;
    flags: GlvWithdrawal.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace Glv {
  export type PropsStruct = {
    glvToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string] & {
    glvToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace GlvReader {
  export type GlvInfoStruct = {
    glv: Glv.PropsStruct;
    markets: PromiseOrValue<string>[];
  };

  export type GlvInfoStructOutput = [Glv.PropsStructOutput, string[]] & {
    glv: Glv.PropsStructOutput;
    markets: string[];
  };
}

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    GlvShift.AddressesStructOutput,
    GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export interface GlvReaderInterface extends utils.Interface {
  functions: {
    "getAccountGlvDeposits(address,address,uint256,uint256)": FunctionFragment;
    "getAccountGlvWithdrawals(address,address,uint256,uint256)": FunctionFragment;
    "getGlv(address,address)": FunctionFragment;
    "getGlvBySalt(address,bytes32)": FunctionFragment;
    "getGlvDeposit(address,bytes32)": FunctionFragment;
    "getGlvDeposits(address,uint256,uint256)": FunctionFragment;
    "getGlvInfo(address,address)": FunctionFragment;
    "getGlvInfoList(address,uint256,uint256)": FunctionFragment;
    "getGlvShift(address,bytes32)": FunctionFragment;
    "getGlvShifts(address,uint256,uint256)": FunctionFragment;
    "getGlvTokenPrice(address,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)": FunctionFragment;
    "getGlvValue(address,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)": FunctionFragment;
    "getGlvWithdrawal(address,bytes32)": FunctionFragment;
    "getGlvWithdrawals(address,uint256,uint256)": FunctionFragment;
    "getGlvs(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountGlvDeposits"
      | "getAccountGlvWithdrawals"
      | "getGlv"
      | "getGlvBySalt"
      | "getGlvDeposit"
      | "getGlvDeposits"
      | "getGlvInfo"
      | "getGlvInfoList"
      | "getGlvShift"
      | "getGlvShifts"
      | "getGlvTokenPrice"
      | "getGlvValue"
      | "getGlvWithdrawal"
      | "getGlvWithdrawals"
      | "getGlvs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountGlvDeposits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountGlvWithdrawals",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvBySalt",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvDeposits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvInfoList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvShift",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvShifts",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvTokenPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      Price.PropsStruct[],
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvValue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      Price.PropsStruct[],
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvWithdrawal",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvWithdrawals",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountGlvDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountGlvWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlvBySalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlvInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGlvInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvShifts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGlvs", data: BytesLike): Result;

  events: {};
}

export interface GlvReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountGlvDeposits(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvDeposit.PropsStructOutput[]]>;

    getAccountGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvWithdrawal.PropsStructOutput[]]>;

    getGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Glv.PropsStructOutput]>;

    getGlvBySalt(
      dataStore: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Glv.PropsStructOutput]>;

    getGlvDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GlvDeposit.PropsStructOutput]>;

    getGlvDeposits(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvDeposit.PropsStructOutput[]]>;

    getGlvInfo(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[GlvReader.GlvInfoStructOutput]>;

    getGlvInfoList(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvReader.GlvInfoStructOutput[]]>;

    getGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GlvShift.PropsStructOutput]>;

    getGlvShifts(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvShift.PropsStructOutput[]]>;

    getGlvTokenPrice(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getGlvValue(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGlvWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GlvWithdrawal.PropsStructOutput]>;

    getGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GlvWithdrawal.PropsStructOutput[]]>;

    getGlvs(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Glv.PropsStructOutput[]]>;
  };

  getAccountGlvDeposits(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvDeposit.PropsStructOutput[]>;

  getAccountGlvWithdrawals(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvWithdrawal.PropsStructOutput[]>;

  getGlv(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Glv.PropsStructOutput>;

  getGlvBySalt(
    dataStore: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Glv.PropsStructOutput>;

  getGlvDeposit(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GlvDeposit.PropsStructOutput>;

  getGlvDeposits(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvDeposit.PropsStructOutput[]>;

  getGlvInfo(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<GlvReader.GlvInfoStructOutput>;

  getGlvInfoList(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvReader.GlvInfoStructOutput[]>;

  getGlvShift(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GlvShift.PropsStructOutput>;

  getGlvShifts(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvShift.PropsStructOutput[]>;

  getGlvTokenPrice(
    dataStore: PromiseOrValue<string>,
    marketAddresses: PromiseOrValue<string>[],
    indexTokenPrices: Price.PropsStruct[],
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    glv: PromiseOrValue<string>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getGlvValue(
    dataStore: PromiseOrValue<string>,
    marketAddresses: PromiseOrValue<string>[],
    indexTokenPrices: Price.PropsStruct[],
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    glv: PromiseOrValue<string>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGlvWithdrawal(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GlvWithdrawal.PropsStructOutput>;

  getGlvWithdrawals(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GlvWithdrawal.PropsStructOutput[]>;

  getGlvs(
    dataStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Glv.PropsStructOutput[]>;

  callStatic: {
    getAccountGlvDeposits(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvDeposit.PropsStructOutput[]>;

    getAccountGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvWithdrawal.PropsStructOutput[]>;

    getGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Glv.PropsStructOutput>;

    getGlvBySalt(
      dataStore: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Glv.PropsStructOutput>;

    getGlvDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GlvDeposit.PropsStructOutput>;

    getGlvDeposits(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvDeposit.PropsStructOutput[]>;

    getGlvInfo(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<GlvReader.GlvInfoStructOutput>;

    getGlvInfoList(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvReader.GlvInfoStructOutput[]>;

    getGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GlvShift.PropsStructOutput>;

    getGlvShifts(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvShift.PropsStructOutput[]>;

    getGlvTokenPrice(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getGlvValue(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GlvWithdrawal.PropsStructOutput>;

    getGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GlvWithdrawal.PropsStructOutput[]>;

    getGlvs(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Glv.PropsStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getAccountGlvDeposits(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvBySalt(
      dataStore: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvDeposits(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvInfo(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvInfoList(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvShifts(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvTokenPrice(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvValue(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlvs(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountGlvDeposits(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvBySalt(
      dataStore: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvDeposit(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvDeposits(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvInfo(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvInfoList(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvShift(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvShifts(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvTokenPrice(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvValue(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvWithdrawal(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvWithdrawals(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlvs(
      dataStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
