/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace MarketUtils {
  export type MarketPricesStruct = {
    indexTokenPrice: Price.PropsStruct;
    longTokenPrice: Price.PropsStruct;
    shortTokenPrice: Price.PropsStruct;
  };

  export type MarketPricesStructOutput = [
    Price.PropsStructOutput,
    Price.PropsStructOutput,
    Price.PropsStructOutput
  ] & {
    indexTokenPrice: Price.PropsStructOutput;
    longTokenPrice: Price.PropsStructOutput;
    shortTokenPrice: Price.PropsStructOutput;
  };

  export type CollateralTypeStruct = {
    longToken: PromiseOrValue<BigNumberish>;
    shortToken: PromiseOrValue<BigNumberish>;
  };

  export type CollateralTypeStructOutput = [BigNumber, BigNumber] & {
    longToken: BigNumber;
    shortToken: BigNumber;
  };

  export type PositionTypeStruct = {
    long: MarketUtils.CollateralTypeStruct;
    short: MarketUtils.CollateralTypeStruct;
  };

  export type PositionTypeStructOutput = [
    MarketUtils.CollateralTypeStructOutput,
    MarketUtils.CollateralTypeStructOutput
  ] & {
    long: MarketUtils.CollateralTypeStructOutput;
    short: MarketUtils.CollateralTypeStructOutput;
  };

  export type GetNextFundingAmountPerSizeResultStruct = {
    longsPayShorts: PromiseOrValue<boolean>;
    fundingFactorPerSecond: PromiseOrValue<BigNumberish>;
    nextSavedFundingFactorPerSecond: PromiseOrValue<BigNumberish>;
    fundingFeeAmountPerSizeDelta: MarketUtils.PositionTypeStruct;
    claimableFundingAmountPerSizeDelta: MarketUtils.PositionTypeStruct;
  };

  export type GetNextFundingAmountPerSizeResultStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    MarketUtils.PositionTypeStructOutput,
    MarketUtils.PositionTypeStructOutput
  ] & {
    longsPayShorts: boolean;
    fundingFactorPerSecond: BigNumber;
    nextSavedFundingFactorPerSecond: BigNumber;
    fundingFeeAmountPerSizeDelta: MarketUtils.PositionTypeStructOutput;
    claimableFundingAmountPerSizeDelta: MarketUtils.PositionTypeStructOutput;
  };
}

export declare namespace Position {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    collateralToken: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    account: string;
    market: string;
    collateralToken: string;
  };

  export type NumbersStruct = {
    sizeInUsd: PromiseOrValue<BigNumberish>;
    sizeInTokens: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    borrowingFactor: PromiseOrValue<BigNumberish>;
    fundingFeeAmountPerSize: PromiseOrValue<BigNumberish>;
    longTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    shortTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    increasedAtTime: PromiseOrValue<BigNumberish>;
    decreasedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeInUsd: BigNumber;
    sizeInTokens: BigNumber;
    collateralAmount: BigNumber;
    borrowingFactor: BigNumber;
    fundingFeeAmountPerSize: BigNumber;
    longTokenClaimableFundingAmountPerSize: BigNumber;
    shortTokenClaimableFundingAmountPerSize: BigNumber;
    increasedAtTime: BigNumber;
    decreasedAtTime: BigNumber;
  };

  export type FlagsStruct = { isLong: PromiseOrValue<boolean> };

  export type FlagsStructOutput = [boolean] & { isLong: boolean };

  export type PropsStruct = {
    addresses: Position.AddressesStruct;
    numbers: Position.NumbersStruct;
    flags: Position.FlagsStruct;
  };

  export type PropsStructOutput = [
    Position.AddressesStructOutput,
    Position.NumbersStructOutput,
    Position.FlagsStructOutput
  ] & {
    addresses: Position.AddressesStructOutput;
    numbers: Position.NumbersStructOutput;
    flags: Position.FlagsStructOutput;
  };
}

export declare namespace PositionPricingUtils {
  export type PositionReferralFeesStruct = {
    referralCode: PromiseOrValue<BytesLike>;
    affiliate: PromiseOrValue<string>;
    trader: PromiseOrValue<string>;
    totalRebateFactor: PromiseOrValue<BigNumberish>;
    affiliateRewardFactor: PromiseOrValue<BigNumberish>;
    adjustedAffiliateRewardFactor: PromiseOrValue<BigNumberish>;
    traderDiscountFactor: PromiseOrValue<BigNumberish>;
    totalRebateAmount: PromiseOrValue<BigNumberish>;
    traderDiscountAmount: PromiseOrValue<BigNumberish>;
    affiliateRewardAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionReferralFeesStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    referralCode: string;
    affiliate: string;
    trader: string;
    totalRebateFactor: BigNumber;
    affiliateRewardFactor: BigNumber;
    adjustedAffiliateRewardFactor: BigNumber;
    traderDiscountFactor: BigNumber;
    totalRebateAmount: BigNumber;
    traderDiscountAmount: BigNumber;
    affiliateRewardAmount: BigNumber;
  };

  export type PositionProFeesStruct = {
    traderTier: PromiseOrValue<BigNumberish>;
    traderDiscountFactor: PromiseOrValue<BigNumberish>;
    traderDiscountAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionProFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    traderTier: BigNumber;
    traderDiscountFactor: BigNumber;
    traderDiscountAmount: BigNumber;
  };

  export type PositionFundingFeesStruct = {
    fundingFeeAmount: PromiseOrValue<BigNumberish>;
    claimableLongTokenAmount: PromiseOrValue<BigNumberish>;
    claimableShortTokenAmount: PromiseOrValue<BigNumberish>;
    latestFundingFeeAmountPerSize: PromiseOrValue<BigNumberish>;
    latestLongTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    latestShortTokenClaimableFundingAmountPerSize: PromiseOrValue<BigNumberish>;
  };

  export type PositionFundingFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    fundingFeeAmount: BigNumber;
    claimableLongTokenAmount: BigNumber;
    claimableShortTokenAmount: BigNumber;
    latestFundingFeeAmountPerSize: BigNumber;
    latestLongTokenClaimableFundingAmountPerSize: BigNumber;
    latestShortTokenClaimableFundingAmountPerSize: BigNumber;
  };

  export type PositionBorrowingFeesStruct = {
    borrowingFeeUsd: PromiseOrValue<BigNumberish>;
    borrowingFeeAmount: PromiseOrValue<BigNumberish>;
    borrowingFeeReceiverFactor: PromiseOrValue<BigNumberish>;
    borrowingFeeAmountForFeeReceiver: PromiseOrValue<BigNumberish>;
  };

  export type PositionBorrowingFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    borrowingFeeUsd: BigNumber;
    borrowingFeeAmount: BigNumber;
    borrowingFeeReceiverFactor: BigNumber;
    borrowingFeeAmountForFeeReceiver: BigNumber;
  };

  export type PositionUiFeesStruct = {
    uiFeeReceiver: PromiseOrValue<string>;
    uiFeeReceiverFactor: PromiseOrValue<BigNumberish>;
    uiFeeAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionUiFeesStructOutput = [string, BigNumber, BigNumber] & {
    uiFeeReceiver: string;
    uiFeeReceiverFactor: BigNumber;
    uiFeeAmount: BigNumber;
  };

  export type PositionLiquidationFeesStruct = {
    liquidationFeeUsd: PromiseOrValue<BigNumberish>;
    liquidationFeeAmount: PromiseOrValue<BigNumberish>;
    liquidationFeeReceiverFactor: PromiseOrValue<BigNumberish>;
    liquidationFeeAmountForFeeReceiver: PromiseOrValue<BigNumberish>;
  };

  export type PositionLiquidationFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    liquidationFeeUsd: BigNumber;
    liquidationFeeAmount: BigNumber;
    liquidationFeeReceiverFactor: BigNumber;
    liquidationFeeAmountForFeeReceiver: BigNumber;
  };

  export type PositionFeesStruct = {
    referral: PositionPricingUtils.PositionReferralFeesStruct;
    pro: PositionPricingUtils.PositionProFeesStruct;
    funding: PositionPricingUtils.PositionFundingFeesStruct;
    borrowing: PositionPricingUtils.PositionBorrowingFeesStruct;
    ui: PositionPricingUtils.PositionUiFeesStruct;
    liquidation: PositionPricingUtils.PositionLiquidationFeesStruct;
    collateralTokenPrice: Price.PropsStruct;
    positionFeeFactor: PromiseOrValue<BigNumberish>;
    protocolFeeAmount: PromiseOrValue<BigNumberish>;
    positionFeeReceiverFactor: PromiseOrValue<BigNumberish>;
    feeReceiverAmount: PromiseOrValue<BigNumberish>;
    feeAmountForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmountForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmount: PromiseOrValue<BigNumberish>;
    totalCostAmountExcludingFunding: PromiseOrValue<BigNumberish>;
    totalCostAmount: PromiseOrValue<BigNumberish>;
    totalDiscountAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionFeesStructOutput = [
    PositionPricingUtils.PositionReferralFeesStructOutput,
    PositionPricingUtils.PositionProFeesStructOutput,
    PositionPricingUtils.PositionFundingFeesStructOutput,
    PositionPricingUtils.PositionBorrowingFeesStructOutput,
    PositionPricingUtils.PositionUiFeesStructOutput,
    PositionPricingUtils.PositionLiquidationFeesStructOutput,
    Price.PropsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    referral: PositionPricingUtils.PositionReferralFeesStructOutput;
    pro: PositionPricingUtils.PositionProFeesStructOutput;
    funding: PositionPricingUtils.PositionFundingFeesStructOutput;
    borrowing: PositionPricingUtils.PositionBorrowingFeesStructOutput;
    ui: PositionPricingUtils.PositionUiFeesStructOutput;
    liquidation: PositionPricingUtils.PositionLiquidationFeesStructOutput;
    collateralTokenPrice: Price.PropsStructOutput;
    positionFeeFactor: BigNumber;
    protocolFeeAmount: BigNumber;
    positionFeeReceiverFactor: BigNumber;
    feeReceiverAmount: BigNumber;
    feeAmountForPool: BigNumber;
    positionFeeAmountForPool: BigNumber;
    positionFeeAmount: BigNumber;
    totalCostAmountExcludingFunding: BigNumber;
    totalCostAmount: BigNumber;
    totalDiscountAmount: BigNumber;
  };
}

export declare namespace ReaderPricingUtils {
  export type ExecutionPriceResultStruct = {
    priceImpactUsd: PromiseOrValue<BigNumberish>;
    priceImpactDiffUsd: PromiseOrValue<BigNumberish>;
    executionPrice: PromiseOrValue<BigNumberish>;
  };

  export type ExecutionPriceResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    priceImpactUsd: BigNumber;
    priceImpactDiffUsd: BigNumber;
    executionPrice: BigNumber;
  };
}

export declare namespace ReaderPositionUtils {
  export type PositionInfoStruct = {
    positionKey: PromiseOrValue<BytesLike>;
    position: Position.PropsStruct;
    fees: PositionPricingUtils.PositionFeesStruct;
    executionPriceResult: ReaderPricingUtils.ExecutionPriceResultStruct;
    basePnlUsd: PromiseOrValue<BigNumberish>;
    uncappedBasePnlUsd: PromiseOrValue<BigNumberish>;
    pnlAfterPriceImpactUsd: PromiseOrValue<BigNumberish>;
  };

  export type PositionInfoStructOutput = [
    string,
    Position.PropsStructOutput,
    PositionPricingUtils.PositionFeesStructOutput,
    ReaderPricingUtils.ExecutionPriceResultStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    positionKey: string;
    position: Position.PropsStructOutput;
    fees: PositionPricingUtils.PositionFeesStructOutput;
    executionPriceResult: ReaderPricingUtils.ExecutionPriceResultStructOutput;
    basePnlUsd: BigNumber;
    uncappedBasePnlUsd: BigNumber;
    pnlAfterPriceImpactUsd: BigNumber;
  };
}

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export interface ReaderPositionUtilsInterface extends utils.Interface {
  functions: {
    "getAccountPositionInfoList(DataStore,IReferralStorage,address,address[],((uint256,uint256),(uint256,uint256),(uint256,uint256))[],address,uint256,uint256)": FunctionFragment;
    "getAccountPositions(DataStore,address,uint256,uint256)": FunctionFragment;
    "getNextFundingAmountPerSize(DataStore,(address,address,address,address),((uint256,uint256),(uint256,uint256),(uint256,uint256)))": FunctionFragment;
    "getPositionInfo(DataStore,IReferralStorage,bytes32,((uint256,uint256),(uint256,uint256),(uint256,uint256)),uint256,address,bool)": FunctionFragment;
    "getPositionInfoList(DataStore,IReferralStorage,bytes32[],((uint256,uint256),(uint256,uint256),(uint256,uint256))[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAccountPositionInfoList"
      | "getAccountPositions"
      | "getNextFundingAmountPerSize"
      | "getPositionInfo"
      | "getPositionInfoList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAccountPositionInfoList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      MarketUtils.MarketPricesStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountPositions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextFundingAmountPerSize",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      MarketUtils.MarketPricesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      MarketUtils.MarketPricesStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfoList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      MarketUtils.MarketPricesStruct[],
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountPositionInfoList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextFundingAmountPerSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfoList",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ReaderPositionUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderPositionUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      marketPrices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ReaderPositionUtils.PositionInfoStructOutput[]]>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Position.PropsStructOutput[]]>;

    getNextFundingAmountPerSize(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<[MarketUtils.GetNextFundingAmountPerSizeResultStructOutput]>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      usePositionSizeAsSizeDeltaUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[ReaderPositionUtils.PositionInfoStructOutput]>;

    getPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReaderPositionUtils.PositionInfoStructOutput[]]>;
  };

  getAccountPositionInfoList(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    marketPrices: MarketUtils.MarketPricesStruct[],
    uiFeeReceiver: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ReaderPositionUtils.PositionInfoStructOutput[]>;

  getAccountPositions(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Position.PropsStructOutput[]>;

  getNextFundingAmountPerSize(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    prices: MarketUtils.MarketPricesStruct,
    overrides?: CallOverrides
  ): Promise<MarketUtils.GetNextFundingAmountPerSizeResultStructOutput>;

  getPositionInfo(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    positionKey: PromiseOrValue<BytesLike>,
    prices: MarketUtils.MarketPricesStruct,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    uiFeeReceiver: PromiseOrValue<string>,
    usePositionSizeAsSizeDeltaUsd: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<ReaderPositionUtils.PositionInfoStructOutput>;

  getPositionInfoList(
    dataStore: PromiseOrValue<string>,
    referralStorage: PromiseOrValue<string>,
    positionKeys: PromiseOrValue<BytesLike>[],
    prices: MarketUtils.MarketPricesStruct[],
    uiFeeReceiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReaderPositionUtils.PositionInfoStructOutput[]>;

  callStatic: {
    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      marketPrices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ReaderPositionUtils.PositionInfoStructOutput[]>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Position.PropsStructOutput[]>;

    getNextFundingAmountPerSize(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<MarketUtils.GetNextFundingAmountPerSizeResultStructOutput>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      usePositionSizeAsSizeDeltaUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<ReaderPositionUtils.PositionInfoStructOutput>;

    getPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReaderPositionUtils.PositionInfoStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      marketPrices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextFundingAmountPerSize(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      usePositionSizeAsSizeDeltaUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      marketPrices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountPositions(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextFundingAmountPerSize(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      prices: MarketUtils.MarketPricesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfo(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKey: PromiseOrValue<BytesLike>,
      prices: MarketUtils.MarketPricesStruct,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      uiFeeReceiver: PromiseOrValue<string>,
      usePositionSizeAsSizeDeltaUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionInfoList(
      dataStore: PromiseOrValue<string>,
      referralStorage: PromiseOrValue<string>,
      positionKeys: PromiseOrValue<BytesLike>[],
      prices: MarketUtils.MarketPricesStruct[],
      uiFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
