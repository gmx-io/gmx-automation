/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export interface GlvUtilsInterface extends utils.Interface {
  functions: {
    "getGlvMarketCount(DataStore,address)": FunctionFragment;
    "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)": FunctionFragment;
    "getGlvValue(DataStore,Oracle,address,bool)": FunctionFragment;
    "validateGlv(DataStore,address)": FunctionFragment;
    "validateGlvMarket(DataStore,address,address,bool)": FunctionFragment;
    "validateGlvMarketTokenBalance(DataStore,address,(address,address,address,address),uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getGlvMarketCount"
      | "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"
      | "getGlvValue(DataStore,Oracle,address,bool)"
      | "validateGlv"
      | "validateGlvMarket"
      | "validateGlvMarketTokenBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getGlvMarketCount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      Price.PropsStruct[],
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlvValue(DataStore,Oracle,address,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateGlvMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateGlvMarketTokenBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      Market.PropsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGlvMarketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlvValue(DataStore,Oracle,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateGlvMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateGlvMarketTokenBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GlvUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGlvMarketCount(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getGlvValue(DataStore,Oracle,address,bool)"(
      dataStore: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateGlvMarket(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      shouldBeEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateGlvMarketTokenBalance(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: Market.PropsStruct,
      marketPoolValue: PromiseOrValue<BigNumberish>,
      marketTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getGlvMarketCount(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"(
    dataStore: PromiseOrValue<string>,
    marketAddresses: PromiseOrValue<string>[],
    indexTokenPrices: Price.PropsStruct[],
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    glv: PromiseOrValue<string>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getGlvValue(DataStore,Oracle,address,bool)"(
    dataStore: PromiseOrValue<string>,
    oracle: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateGlv(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateGlvMarket(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    shouldBeEnabled: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateGlvMarketTokenBalance(
    dataStore: PromiseOrValue<string>,
    glv: PromiseOrValue<string>,
    market: Market.PropsStruct,
    marketPoolValue: PromiseOrValue<BigNumberish>,
    marketTokenSupply: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getGlvMarketCount(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlvValue(DataStore,Oracle,address,bool)"(
      dataStore: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateGlvMarket(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      shouldBeEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateGlvMarketTokenBalance(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: Market.PropsStruct,
      marketPoolValue: PromiseOrValue<BigNumberish>,
      marketTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getGlvMarketCount(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlvValue(DataStore,Oracle,address,bool)"(
      dataStore: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateGlvMarket(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      shouldBeEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateGlvMarketTokenBalance(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: Market.PropsStruct,
      marketPoolValue: PromiseOrValue<BigNumberish>,
      marketTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getGlvMarketCount(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlvValue(DataStore,address[],(uint256,uint256)[],(uint256,uint256),(uint256,uint256),address,bool)"(
      dataStore: PromiseOrValue<string>,
      marketAddresses: PromiseOrValue<string>[],
      indexTokenPrices: Price.PropsStruct[],
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlvValue(DataStore,Oracle,address,bool)"(
      dataStore: PromiseOrValue<string>,
      oracle: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateGlv(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateGlvMarket(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      shouldBeEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateGlvMarketTokenBalance(
      dataStore: PromiseOrValue<string>,
      glv: PromiseOrValue<string>,
      market: Market.PropsStruct,
      marketPoolValue: PromiseOrValue<BigNumberish>,
      marketTokenSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
