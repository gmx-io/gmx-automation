// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    GlvShift.AddressesStructOutput,
    GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export interface GlvShiftStoreUtilsInterface extends utils.Interface {
  functions: {
    "FROM_MARKET()": FunctionFragment;
    "GLV()": FunctionFragment;
    "MARKET_TOKEN_AMOUNT()": FunctionFragment;
    "MIN_MARKET_TOKENS()": FunctionFragment;
    "TO_MARKET()": FunctionFragment;
    "UPDATED_AT_TIME()": FunctionFragment;
    "get(DataStore,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FROM_MARKET"
      | "GLV"
      | "MARKET_TOKEN_AMOUNT"
      | "MIN_MARKET_TOKENS"
      | "TO_MARKET"
      | "UPDATED_AT_TIME"
      | "get"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FROM_MARKET",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GLV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MARKET_TOKEN_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MARKET_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TO_MARKET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPDATED_AT_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FROM_MARKET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GLV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_TOKEN_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MARKET_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TO_MARKET", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATED_AT_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;

  events: {};
}

export interface GlvShiftStoreUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvShiftStoreUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FROM_MARKET(overrides?: CallOverrides): Promise<[string]>;

    GLV(overrides?: CallOverrides): Promise<[string]>;

    MARKET_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<[string]>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<[string]>;

    TO_MARKET(overrides?: CallOverrides): Promise<[string]>;

    UPDATED_AT_TIME(overrides?: CallOverrides): Promise<[string]>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[GlvShift.PropsStructOutput]>;
  };

  FROM_MARKET(overrides?: CallOverrides): Promise<string>;

  GLV(overrides?: CallOverrides): Promise<string>;

  MARKET_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

  MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<string>;

  TO_MARKET(overrides?: CallOverrides): Promise<string>;

  UPDATED_AT_TIME(overrides?: CallOverrides): Promise<string>;

  get(
    dataStore: PromiseOrValue<string>,
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<GlvShift.PropsStructOutput>;

  callStatic: {
    FROM_MARKET(overrides?: CallOverrides): Promise<string>;

    GLV(overrides?: CallOverrides): Promise<string>;

    MARKET_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<string>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<string>;

    TO_MARKET(overrides?: CallOverrides): Promise<string>;

    UPDATED_AT_TIME(overrides?: CallOverrides): Promise<string>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<GlvShift.PropsStructOutput>;
  };

  filters: {};

  estimateGas: {
    FROM_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    GLV(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET_TOKEN_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    TO_MARKET(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATED_AT_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FROM_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GLV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MARKET_TOKEN_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_MARKET_TOKENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TO_MARKET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATED_AT_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      dataStore: PromiseOrValue<string>,
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
