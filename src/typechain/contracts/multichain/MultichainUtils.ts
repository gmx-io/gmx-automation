// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MultichainUtilsInterface extends utils.Interface {
  functions: {
    "getMultichainBalanceAmount(DataStore,address,address)": FunctionFragment;
    "validateMultichainEndpoint(DataStore,address)": FunctionFragment;
    "validateMultichainProvider(DataStore,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMultichainBalanceAmount"
      | "validateMultichainEndpoint"
      | "validateMultichainProvider"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMultichainBalanceAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMultichainEndpoint",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateMultichainProvider",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMultichainBalanceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMultichainEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateMultichainProvider",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultichainUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultichainUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMultichainBalanceAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateMultichainEndpoint(
      dataStore: PromiseOrValue<string>,
      endpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    validateMultichainProvider(
      dataStore: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getMultichainBalanceAmount(
    dataStore: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateMultichainEndpoint(
    dataStore: PromiseOrValue<string>,
    endpoint: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  validateMultichainProvider(
    dataStore: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getMultichainBalanceAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateMultichainEndpoint(
      dataStore: PromiseOrValue<string>,
      endpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateMultichainProvider(
      dataStore: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getMultichainBalanceAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateMultichainEndpoint(
      dataStore: PromiseOrValue<string>,
      endpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateMultichainProvider(
      dataStore: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMultichainBalanceAmount(
      dataStore: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateMultichainEndpoint(
      dataStore: PromiseOrValue<string>,
      endpoint: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateMultichainProvider(
      dataStore: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
