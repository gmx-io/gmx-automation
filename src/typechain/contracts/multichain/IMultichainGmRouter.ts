// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export declare namespace IRelayUtils {
  export type ExternalCallsStruct = {
    sendTokens: PromiseOrValue<string>[];
    sendAmounts: PromiseOrValue<BigNumberish>[];
    externalCallTargets: PromiseOrValue<string>[];
    externalCallDataList: PromiseOrValue<BytesLike>[];
    refundTokens: PromiseOrValue<string>[];
    refundReceivers: PromiseOrValue<string>[];
  };

  export type ExternalCallsStructOutput = [
    string[],
    BigNumber[],
    string[],
    string[],
    string[],
    string[]
  ] & {
    sendTokens: string[];
    sendAmounts: BigNumber[];
    externalCallTargets: string[];
    externalCallDataList: string[];
    refundTokens: string[];
    refundReceivers: string[];
  };

  export type TokenPermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    token: PromiseOrValue<string>;
  };

  export type TokenPermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    token: string;
  };

  export type FeeParamsStruct = {
    feeToken: PromiseOrValue<string>;
    feeAmount: PromiseOrValue<BigNumberish>;
    feeSwapPath: PromiseOrValue<string>[];
  };

  export type FeeParamsStructOutput = [string, BigNumber, string[]] & {
    feeToken: string;
    feeAmount: BigNumber;
    feeSwapPath: string[];
  };

  export type RelayParamsStruct = {
    oracleParams: OracleUtils.SetPricesParamsStruct;
    externalCalls: IRelayUtils.ExternalCallsStruct;
    tokenPermits: IRelayUtils.TokenPermitStruct[];
    fee: IRelayUtils.FeeParamsStruct;
    userNonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    desChainId: PromiseOrValue<BigNumberish>;
  };

  export type RelayParamsStructOutput = [
    OracleUtils.SetPricesParamsStructOutput,
    IRelayUtils.ExternalCallsStructOutput,
    IRelayUtils.TokenPermitStructOutput[],
    IRelayUtils.FeeParamsStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    oracleParams: OracleUtils.SetPricesParamsStructOutput;
    externalCalls: IRelayUtils.ExternalCallsStructOutput;
    tokenPermits: IRelayUtils.TokenPermitStructOutput[];
    fee: IRelayUtils.FeeParamsStructOutput;
    userNonce: BigNumber;
    deadline: BigNumber;
    signature: string;
    desChainId: BigNumber;
  };

  export type TransferRequestsStruct = {
    tokens: PromiseOrValue<string>[];
    receivers: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type TransferRequestsStructOutput = [
    string[],
    string[],
    BigNumber[]
  ] & { tokens: string[]; receivers: string[]; amounts: BigNumber[] };
}

export declare namespace IDepositUtils {
  export type CreateDepositParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateDepositParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateDepositParamsStruct = {
    addresses: IDepositUtils.CreateDepositParamsAddressesStruct;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateDepositParamsStructOutput = [
    IDepositUtils.CreateDepositParamsAddressesStructOutput,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IDepositUtils.CreateDepositParamsAddressesStructOutput;
    minMarketTokens: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace IShiftUtils {
  export type CreateShiftParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type CreateShiftParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    fromMarket: string;
    toMarket: string;
  };

  export type CreateShiftParamsStruct = {
    addresses: IShiftUtils.CreateShiftParamsAddressesStruct;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateShiftParamsStructOutput = [
    IShiftUtils.CreateShiftParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IShiftUtils.CreateShiftParamsAddressesStructOutput;
    minMarketTokens: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace IWithdrawalUtils {
  export type CreateWithdrawalParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateWithdrawalParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateWithdrawalParamsStruct = {
    addresses: IWithdrawalUtils.CreateWithdrawalParamsAddressesStruct;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateWithdrawalParamsStructOutput = [
    IWithdrawalUtils.CreateWithdrawalParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IWithdrawalUtils.CreateWithdrawalParamsAddressesStructOutput;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export interface IMultichainGmRouterInterface extends utils.Interface {
  functions: {
    "createDeposit(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address,uint256,(address[],address[],uint256[]),((address,address,address,address,address,address,address[],address[]),uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
    "createShift(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address,uint256,(address[],address[],uint256[]),((address,address,address,address,address),uint256,uint256,uint256,bytes32[]))": FunctionFragment;
    "createWithdrawal(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address,uint256,(address[],address[],uint256[]),((address,address,address,address,address[],address[]),uint256,uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createDeposit" | "createShift" | "createWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createDeposit",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IRelayUtils.TransferRequestsStruct,
      IDepositUtils.CreateDepositParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createShift",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IRelayUtils.TransferRequestsStruct,
      IShiftUtils.CreateShiftParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawal",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IRelayUtils.TransferRequestsStruct,
      IWithdrawalUtils.CreateWithdrawalParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMultichainGmRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMultichainGmRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createShift(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createDeposit(
    relayParams: IRelayUtils.RelayParamsStruct,
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IDepositUtils.CreateDepositParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createShift(
    relayParams: IRelayUtils.RelayParamsStruct,
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IShiftUtils.CreateShiftParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createWithdrawal(
    relayParams: IRelayUtils.RelayParamsStruct,
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createShift(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createShift(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IDepositUtils.CreateDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createShift(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IShiftUtils.CreateShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IWithdrawalUtils.CreateWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
