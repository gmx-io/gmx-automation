// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export declare namespace IRelayUtils {
  export type ExternalCallsStruct = {
    sendTokens: PromiseOrValue<string>[];
    sendAmounts: PromiseOrValue<BigNumberish>[];
    externalCallTargets: PromiseOrValue<string>[];
    externalCallDataList: PromiseOrValue<BytesLike>[];
    refundTokens: PromiseOrValue<string>[];
    refundReceivers: PromiseOrValue<string>[];
  };

  export type ExternalCallsStructOutput = [
    string[],
    BigNumber[],
    string[],
    string[],
    string[],
    string[]
  ] & {
    sendTokens: string[];
    sendAmounts: BigNumber[];
    externalCallTargets: string[];
    externalCallDataList: string[];
    refundTokens: string[];
    refundReceivers: string[];
  };

  export type TokenPermitStruct = {
    owner: PromiseOrValue<string>;
    spender: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    token: PromiseOrValue<string>;
  };

  export type TokenPermitStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string
  ] & {
    owner: string;
    spender: string;
    value: BigNumber;
    deadline: BigNumber;
    v: number;
    r: string;
    s: string;
    token: string;
  };

  export type FeeParamsStruct = {
    feeToken: PromiseOrValue<string>;
    feeAmount: PromiseOrValue<BigNumberish>;
    feeSwapPath: PromiseOrValue<string>[];
  };

  export type FeeParamsStructOutput = [string, BigNumber, string[]] & {
    feeToken: string;
    feeAmount: BigNumber;
    feeSwapPath: string[];
  };

  export type RelayParamsStruct = {
    oracleParams: OracleUtils.SetPricesParamsStruct;
    externalCalls: IRelayUtils.ExternalCallsStruct;
    tokenPermits: IRelayUtils.TokenPermitStruct[];
    fee: IRelayUtils.FeeParamsStruct;
    userNonce: PromiseOrValue<BigNumberish>;
    deadline: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    desChainId: PromiseOrValue<BigNumberish>;
  };

  export type RelayParamsStructOutput = [
    OracleUtils.SetPricesParamsStructOutput,
    IRelayUtils.ExternalCallsStructOutput,
    IRelayUtils.TokenPermitStructOutput[],
    IRelayUtils.FeeParamsStructOutput,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    oracleParams: OracleUtils.SetPricesParamsStructOutput;
    externalCalls: IRelayUtils.ExternalCallsStructOutput;
    tokenPermits: IRelayUtils.TokenPermitStructOutput[];
    fee: IRelayUtils.FeeParamsStructOutput;
    userNonce: BigNumber;
    deadline: BigNumber;
    signature: string;
    desChainId: BigNumber;
  };

  export type TransferRequestsStruct = {
    tokens: PromiseOrValue<string>[];
    receivers: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type TransferRequestsStructOutput = [
    string[],
    string[],
    BigNumber[]
  ] & { tokens: string[]; receivers: string[]; amounts: BigNumber[] };
}

export declare namespace IGlvDepositUtils {
  export type CreateGlvDepositParamsAddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateGlvDepositParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateGlvDepositParamsStruct = {
    addresses: IGlvDepositUtils.CreateGlvDepositParamsAddressesStruct;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateGlvDepositParamsStructOutput = [
    IGlvDepositUtils.CreateGlvDepositParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    string[]
  ] & {
    addresses: IGlvDepositUtils.CreateGlvDepositParamsAddressesStructOutput;
    minGlvTokens: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
    dataList: string[];
  };
}

export declare namespace IGlvWithdrawalUtils {
  export type CreateGlvWithdrawalParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    glv: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateGlvWithdrawalParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    glv: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateGlvWithdrawalParamsStruct = {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStruct;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateGlvWithdrawalParamsStructOutput = [
    IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export interface IMultichainGlvRouterInterface extends utils.Interface {
  functions: {
    "createGlvDeposit(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address,uint256,(address[],address[],uint256[]),((address,address,address,address,address,address,address,address[],address[]),uint256,uint256,uint256,bool,bool,bytes32[]))": FunctionFragment;
    "createGlvWithdrawal(((address[],address[],bytes[]),(address[],uint256[],address[],bytes[],address[],address[]),(address,address,uint256,uint256,uint8,bytes32,bytes32,address)[],(address,uint256,address[]),uint256,uint256,bytes,uint256),address,uint256,(address[],address[],uint256[]),((address,address,address,address,address,address[],address[]),uint256,uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createGlvDeposit" | "createGlvWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGlvDeposit",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IRelayUtils.TransferRequestsStruct,
      IGlvDepositUtils.CreateGlvDepositParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvWithdrawal",
    values: [
      IRelayUtils.RelayParamsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IRelayUtils.TransferRequestsStruct,
      IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvWithdrawal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMultichainGlvRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMultichainGlvRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGlvDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGlvDeposit(
    relayParams: IRelayUtils.RelayParamsStruct,
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvWithdrawal(
    relayParams: IRelayUtils.RelayParamsStruct,
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    transferRequests: IRelayUtils.TransferRequestsStruct,
    params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGlvDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createGlvWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    createGlvDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGlvDeposit(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvWithdrawal(
      relayParams: IRelayUtils.RelayParamsStruct,
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      transferRequests: IRelayUtils.TransferRequestsStruct,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
