// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type OriginStruct = {
  srcEid: PromiseOrValue<BigNumberish>;
  sender: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export type MessagingFeeStruct = {
  nativeFee: PromiseOrValue<BigNumberish>;
  lzTokenFee: PromiseOrValue<BigNumberish>;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: PromiseOrValue<BytesLike>;
  nonce: PromiseOrValue<BigNumberish>;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export declare namespace MultichainReaderUtils {
  export type ReadRequestInputsStruct = {
    targetChainEid: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
  };

  export type ReadRequestInputsStructOutput = [number, string, string] & {
    targetChainEid: number;
    target: string;
    callData: string;
  };

  export type ExtraOptionsInputsStruct = {
    gasLimit: PromiseOrValue<BigNumberish>;
    returnDataSize: PromiseOrValue<BigNumberish>;
    msgValue: PromiseOrValue<BigNumberish>;
  };

  export type ExtraOptionsInputsStructOutput = [
    BigNumber,
    number,
    BigNumber
  ] & { gasLimit: BigNumber; returnDataSize: number; msgValue: BigNumber };
}

export interface MultichainReaderInterface extends utils.Interface {
  functions: {
    "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
    "currentChainEid()": FunctionFragment;
    "dataStore()": FunctionFragment;
    "endpoint()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "lzReduce(bytes,bytes[])": FunctionFragment;
    "nextNonce(uint32,bytes32)": FunctionFragment;
    "oAppVersion()": FunctionFragment;
    "peers(uint32)": FunctionFragment;
    "quoteReadFee((uint32,address,bytes)[],(uint128,uint32,uint128))": FunctionFragment;
    "roleStore()": FunctionFragment;
    "sendReadRequests((uint32,address,bytes)[],(uint128,uint32,uint128))": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowInitializePath"
      | "currentChainEid"
      | "dataStore"
      | "endpoint"
      | "eventEmitter"
      | "isComposeMsgSender"
      | "lzReceive"
      | "lzReduce"
      | "nextNonce"
      | "oAppVersion"
      | "peers"
      | "quoteReadFee"
      | "roleStore"
      | "sendReadRequests"
      | "setDelegate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currentChainEid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [
      OriginStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReduce",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "peers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteReadFee",
    values: [
      MultichainReaderUtils.ReadRequestInputsStruct[],
      MultichainReaderUtils.ExtraOptionsInputsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendReadRequests",
    values: [
      MultichainReaderUtils.ReadRequestInputsStruct[],
      MultichainReaderUtils.ExtraOptionsInputsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentChainEid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReduce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteReadFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendReadRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultichainReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultichainReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentChainEid(overrides?: CallOverrides): Promise<[number]>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lzReduce(
      _cmd: PromiseOrValue<BytesLike>,
      _responses: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    peers(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { peer: string }>;

    quoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    sendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowInitializePath(
    origin: OriginStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentChainEid(overrides?: CallOverrides): Promise<number>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  isComposeMsgSender(
    arg0: OriginStruct,
    arg1: PromiseOrValue<BytesLike>,
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lzReceive(
    _origin: OriginStruct,
    _guid: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    _executor: PromiseOrValue<string>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lzReduce(
    _cmd: PromiseOrValue<BytesLike>,
    _responses: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  nextNonce(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oAppVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderVersion: BigNumber;
      receiverVersion: BigNumber;
    }
  >;

  peers(
    _eid: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteReadFee(
    readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
    extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  sendReadRequests(
    readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
    extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDelegate(
    _delegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentChainEid(overrides?: CallOverrides): Promise<number>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    lzReduce(
      _cmd: PromiseOrValue<BytesLike>,
      _responses: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    peers(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    sendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<MessagingReceiptStructOutput>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentChainEid(overrides?: CallOverrides): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lzReduce(
      _cmd: PromiseOrValue<BytesLike>,
      _responses: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;

    peers(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    sendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentChainEid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: PromiseOrValue<BytesLike>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzReceive(
      _origin: OriginStruct,
      _guid: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      _executor: PromiseOrValue<string>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lzReduce(
      _cmd: PromiseOrValue<BytesLike>,
      _responses: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextNonce(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peers(
      _eid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteReadFee(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendReadRequests(
      readRequestInputs: MultichainReaderUtils.ReadRequestInputsStruct[],
      extraOptionsInputs: MultichainReaderUtils.ExtraOptionsInputsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      _delegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
