/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMultichainProvider {
  export type BridgeOutParamsStruct = {
    provider: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type BridgeOutParamsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    provider: string;
    account: string;
    token: string;
    amount: BigNumber;
    data: string;
  };
}

export interface LayerZeroProviderInterface extends utils.Interface {
  functions: {
    "bridgeOut((address,address,address,uint256,bytes))": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "lzCompose(address,bytes32,bytes,address,bytes)": FunctionFragment;
    "multichainGlvRouter()": FunctionFragment;
    "multichainGmRouter()": FunctionFragment;
    "multichainVault()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "withdrawTokens(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgeOut"
      | "dataStore"
      | "eventEmitter"
      | "lzCompose"
      | "multichainGlvRouter"
      | "multichainGmRouter"
      | "multichainVault"
      | "roleStore"
      | "withdrawTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeOut",
    values: [IMultichainProvider.BridgeOutParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzCompose",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multichainGlvRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multichainGmRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multichainVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "bridgeOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzCompose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multichainGlvRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainGmRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "TokenTransferReverted(string,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenTransferReverted"): EventFragment;
}

export interface TokenTransferRevertedEventObject {
  reason: string;
  returndata: string;
}
export type TokenTransferRevertedEvent = TypedEvent<
  [string, string],
  TokenTransferRevertedEventObject
>;

export type TokenTransferRevertedEventFilter =
  TypedEventFilter<TokenTransferRevertedEvent>;

export interface LayerZeroProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LayerZeroProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeOut(
      params: IMultichainProvider.BridgeOutParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    lzCompose(
      from: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multichainGlvRouter(overrides?: CallOverrides): Promise<[string]>;

    multichainGmRouter(overrides?: CallOverrides): Promise<[string]>;

    multichainVault(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeOut(
    params: IMultichainProvider.BridgeOutParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  lzCompose(
    from: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    message: PromiseOrValue<BytesLike>,
    arg3: PromiseOrValue<string>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multichainGlvRouter(overrides?: CallOverrides): Promise<string>;

  multichainGmRouter(overrides?: CallOverrides): Promise<string>;

  multichainVault(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  withdrawTokens(
    token: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeOut(
      params: IMultichainProvider.BridgeOutParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    lzCompose(
      from: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    multichainGlvRouter(overrides?: CallOverrides): Promise<string>;

    multichainGmRouter(overrides?: CallOverrides): Promise<string>;

    multichainVault(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenTransferReverted(string,bytes)"(
      reason?: null,
      returndata?: null
    ): TokenTransferRevertedEventFilter;
    TokenTransferReverted(
      reason?: null,
      returndata?: null
    ): TokenTransferRevertedEventFilter;
  };

  estimateGas: {
    bridgeOut(
      params: IMultichainProvider.BridgeOutParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    lzCompose(
      from: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multichainGlvRouter(overrides?: CallOverrides): Promise<BigNumber>;

    multichainGmRouter(overrides?: CallOverrides): Promise<BigNumber>;

    multichainVault(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeOut(
      params: IMultichainProvider.BridgeOutParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzCompose(
      from: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<BytesLike>,
      arg3: PromiseOrValue<string>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multichainGlvRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainGmRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTokens(
      token: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
