// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace SwapPricingUtils {
  export type GetPriceImpactUsdParamsStruct = {
    dataStore: PromiseOrValue<string>;
    market: Market.PropsStruct;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    priceForTokenA: PromiseOrValue<BigNumberish>;
    priceForTokenB: PromiseOrValue<BigNumberish>;
    usdDeltaForTokenA: PromiseOrValue<BigNumberish>;
    usdDeltaForTokenB: PromiseOrValue<BigNumberish>;
    includeVirtualInventoryImpact: PromiseOrValue<boolean>;
  };

  export type GetPriceImpactUsdParamsStructOutput = [
    string,
    Market.PropsStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    dataStore: string;
    market: Market.PropsStructOutput;
    tokenA: string;
    tokenB: string;
    priceForTokenA: BigNumber;
    priceForTokenB: BigNumber;
    usdDeltaForTokenA: BigNumber;
    usdDeltaForTokenB: BigNumber;
    includeVirtualInventoryImpact: boolean;
  };

  export type SwapFeesStruct = {
    feeReceiverAmount: PromiseOrValue<BigNumberish>;
    feeAmountForPool: PromiseOrValue<BigNumberish>;
    amountAfterFees: PromiseOrValue<BigNumberish>;
    uiFeeReceiver: PromiseOrValue<string>;
    uiFeeReceiverFactor: PromiseOrValue<BigNumberish>;
    uiFeeAmount: PromiseOrValue<BigNumberish>;
  };

  export type SwapFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    feeReceiverAmount: BigNumber;
    feeAmountForPool: BigNumber;
    amountAfterFees: BigNumber;
    uiFeeReceiver: string;
    uiFeeReceiverFactor: BigNumber;
    uiFeeAmount: BigNumber;
  };
}

export interface SwapPricingUtilsInterface extends utils.Interface {
  functions: {
    "getPriceImpactUsd((DataStore,(address,address,address,address),address,address,uint256,uint256,int256,int256,bool))": FunctionFragment;
    "getSwapFees(DataStore,address,uint256,bool,address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPriceImpactUsd" | "getSwapFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPriceImpactUsd",
    values: [SwapPricingUtils.GetPriceImpactUsdParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFees",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPriceImpactUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFees",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SwapPricingUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapPricingUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPriceImpactUsd(
      params: SwapPricingUtils.GetPriceImpactUsdParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getSwapFees(
      dataStore: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      balanceWasImproved: PromiseOrValue<boolean>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SwapPricingUtils.SwapFeesStructOutput]>;
  };

  getPriceImpactUsd(
    params: SwapPricingUtils.GetPriceImpactUsdParamsStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getSwapFees(
    dataStore: PromiseOrValue<string>,
    marketToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    balanceWasImproved: PromiseOrValue<boolean>,
    uiFeeReceiver: PromiseOrValue<string>,
    swapPricingType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SwapPricingUtils.SwapFeesStructOutput>;

  callStatic: {
    getPriceImpactUsd(
      params: SwapPricingUtils.GetPriceImpactUsdParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getSwapFees(
      dataStore: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      balanceWasImproved: PromiseOrValue<boolean>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SwapPricingUtils.SwapFeesStructOutput>;
  };

  filters: {};

  estimateGas: {
    getPriceImpactUsd(
      params: SwapPricingUtils.GetPriceImpactUsdParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFees(
      dataStore: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      balanceWasImproved: PromiseOrValue<boolean>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPriceImpactUsd(
      params: SwapPricingUtils.GetPriceImpactUsdParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFees(
      dataStore: PromiseOrValue<string>,
      marketToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      balanceWasImproved: PromiseOrValue<boolean>,
      uiFeeReceiver: PromiseOrValue<string>,
      swapPricingType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
