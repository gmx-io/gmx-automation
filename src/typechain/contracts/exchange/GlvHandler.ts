/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvDeposit {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    initialLongTokenAmount: PromiseOrValue<BigNumberish>;
    initialShortTokenAmount: PromiseOrValue<BigNumberish>;
    minGlvTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    marketTokenAmount: BigNumber;
    initialLongTokenAmount: BigNumber;
    initialShortTokenAmount: BigNumber;
    minGlvTokens: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean, boolean] & {
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };

  export type PropsStruct = {
    addresses: GlvDeposit.AddressesStruct;
    numbers: GlvDeposit.NumbersStruct;
    flags: GlvDeposit.FlagsStruct;
  };

  export type PropsStructOutput = [
    GlvDeposit.AddressesStructOutput,
    GlvDeposit.NumbersStructOutput,
    GlvDeposit.FlagsStructOutput
  ] & {
    addresses: GlvDeposit.AddressesStructOutput;
    numbers: GlvDeposit.NumbersStructOutput;
    flags: GlvDeposit.FlagsStructOutput;
  };
}

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    GlvShift.AddressesStructOutput,
    GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export declare namespace GlvWithdrawal {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    glvTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    glvTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: GlvWithdrawal.AddressesStruct;
    numbers: GlvWithdrawal.NumbersStruct;
    flags: GlvWithdrawal.FlagsStruct;
  };

  export type PropsStructOutput = [
    GlvWithdrawal.AddressesStructOutput,
    GlvWithdrawal.NumbersStructOutput,
    GlvWithdrawal.FlagsStructOutput
  ] & {
    addresses: GlvWithdrawal.AddressesStructOutput;
    numbers: GlvWithdrawal.NumbersStructOutput;
    flags: GlvWithdrawal.FlagsStructOutput;
  };
}

export declare namespace GlvDepositUtils {
  export type CreateGlvDepositParamsStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    initialLongToken: PromiseOrValue<string>;
    initialShortToken: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
    minGlvTokens: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isMarketTokenDeposit: PromiseOrValue<boolean>;
  };

  export type CreateGlvDepositParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    glv: string;
    market: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    initialLongToken: string;
    initialShortToken: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minGlvTokens: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    shouldUnwrapNativeToken: boolean;
    isMarketTokenDeposit: boolean;
  };
}

export declare namespace GlvShiftUtils {
  export type CreateGlvShiftParamsStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
  };

  export type CreateGlvShiftParamsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
  };
}

export declare namespace GlvWithdrawalUtils {
  export type CreateGlvWithdrawalParamsStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    glv: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type CreateGlvWithdrawalParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    glv: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };

  export type SimulatePricesParamsStruct = {
    primaryTokens: PromiseOrValue<string>[];
    primaryPrices: Price.PropsStruct[];
    minTimestamp: PromiseOrValue<BigNumberish>;
    maxTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type SimulatePricesParamsStructOutput = [
    string[],
    Price.PropsStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    primaryTokens: string[];
    primaryPrices: Price.PropsStructOutput[];
    minTimestamp: BigNumber;
    maxTimestamp: BigNumber;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export interface GlvHandlerInterface extends utils.Interface {
  functions: {
    "_executeGlvDeposit(bytes32,((address,address,address,address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool,bool)),address)": FunctionFragment;
    "_executeGlvShift(bytes32,((address,address,address),(uint256,uint256,uint256)),address)": FunctionFragment;
    "_executeGlvWithdrawal(bytes32,((address,address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256),(bool)),address)": FunctionFragment;
    "addMarketToGlv(address,address)": FunctionFragment;
    "cancelGlvDeposit(bytes32)": FunctionFragment;
    "cancelGlvWithdrawal(bytes32)": FunctionFragment;
    "createGlvDeposit(address,(address,address,address,address,address,address,address,address[],address[],uint256,uint256,uint256,bool,bool))": FunctionFragment;
    "createGlvShift((address,address,address,uint256,uint256))": FunctionFragment;
    "createGlvWithdrawal(address,(address,address,address,address,address,address[],address[],uint256,uint256,bool,uint256,uint256))": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "executeGlvDeposit(bytes32,(address[],address[],bytes[]))": FunctionFragment;
    "executeGlvShift(bytes32,(address[],address[],bytes[]))": FunctionFragment;
    "executeGlvWithdrawal(bytes32,(address[],address[],bytes[]))": FunctionFragment;
    "glvVault()": FunctionFragment;
    "oracle()": FunctionFragment;
    "removeMarketFromGlv(address,address)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "shiftVault()": FunctionFragment;
    "simulateExecuteGlvDeposit(bytes32,(address[],(uint256,uint256)[],uint256,uint256))": FunctionFragment;
    "simulateExecuteGlvWithdrawal(bytes32,(address[],(uint256,uint256)[],uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_executeGlvDeposit"
      | "_executeGlvShift"
      | "_executeGlvWithdrawal"
      | "addMarketToGlv"
      | "cancelGlvDeposit"
      | "cancelGlvWithdrawal"
      | "createGlvDeposit"
      | "createGlvShift"
      | "createGlvWithdrawal"
      | "dataStore"
      | "eventEmitter"
      | "executeGlvDeposit"
      | "executeGlvShift"
      | "executeGlvWithdrawal"
      | "glvVault"
      | "oracle"
      | "removeMarketFromGlv"
      | "roleStore"
      | "shiftVault"
      | "simulateExecuteGlvDeposit"
      | "simulateExecuteGlvWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_executeGlvDeposit",
    values: [
      PromiseOrValue<BytesLike>,
      GlvDeposit.PropsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_executeGlvShift",
    values: [
      PromiseOrValue<BytesLike>,
      GlvShift.PropsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_executeGlvWithdrawal",
    values: [
      PromiseOrValue<BytesLike>,
      GlvWithdrawal.PropsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketToGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGlvDeposit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvDeposit",
    values: [
      PromiseOrValue<string>,
      GlvDepositUtils.CreateGlvDepositParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvShift",
    values: [GlvShiftUtils.CreateGlvShiftParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvWithdrawal",
    values: [
      PromiseOrValue<string>,
      GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeGlvDeposit",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGlvShift",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "glvVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMarketFromGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shiftVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteGlvDeposit",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SimulatePricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SimulatePricesParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "_executeGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_executeGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_executeGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketToGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glvVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketFromGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shiftVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteGlvDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteGlvWithdrawal",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GlvHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      glvDeposit: GlvDeposit.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvDeposit(
      account: PromiseOrValue<string>,
      params: GlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      params: GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    glvVault(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    shiftVault(overrides?: CallOverrides): Promise<[string]>;

    simulateExecuteGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _executeGlvDeposit(
    key: PromiseOrValue<BytesLike>,
    glvDeposit: GlvDeposit.PropsStruct,
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _executeGlvShift(
    key: PromiseOrValue<BytesLike>,
    glvShift: GlvShift.PropsStruct,
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _executeGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    glvWithdrawal: GlvWithdrawal.PropsStruct,
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMarketToGlv(
    glv: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelGlvDeposit(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvDeposit(
    account: PromiseOrValue<string>,
    params: GlvDepositUtils.CreateGlvDepositParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvShift(
    params: GlvShiftUtils.CreateGlvShiftParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvWithdrawal(
    account: PromiseOrValue<string>,
    params: GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  executeGlvDeposit(
    key: PromiseOrValue<BytesLike>,
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeGlvShift(
    key: PromiseOrValue<BytesLike>,
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  glvVault(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  removeMarketFromGlv(
    glv: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  shiftVault(overrides?: CallOverrides): Promise<string>;

  simulateExecuteGlvDeposit(
    key: PromiseOrValue<BytesLike>,
    params: OracleUtils.SimulatePricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simulateExecuteGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    params: OracleUtils.SimulatePricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      glvDeposit: GlvDeposit.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGlvDeposit(
      account: PromiseOrValue<string>,
      params: GlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      params: GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    glvVault(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    shiftVault(overrides?: CallOverrides): Promise<string>;

    simulateExecuteGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      glvDeposit: GlvDeposit.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvDeposit(
      account: PromiseOrValue<string>,
      params: GlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      params: GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    glvVault(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    shiftVault(overrides?: CallOverrides): Promise<BigNumber>;

    simulateExecuteGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      glvDeposit: GlvDeposit.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvDeposit(
      account: PromiseOrValue<string>,
      params: GlvDepositUtils.CreateGlvDepositParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      params: GlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    glvVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shiftVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    simulateExecuteGlvDeposit(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
