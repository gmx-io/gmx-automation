/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvShift {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
  };

  export type NumbersStruct = {
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber] & {
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtTime: BigNumber;
  };

  export type PropsStruct = {
    addresses: GlvShift.AddressesStruct;
    numbers: GlvShift.NumbersStruct;
  };

  export type PropsStructOutput = [
    GlvShift.AddressesStructOutput,
    GlvShift.NumbersStructOutput
  ] & {
    addresses: GlvShift.AddressesStructOutput;
    numbers: GlvShift.NumbersStructOutput;
  };
}

export declare namespace GlvShiftUtils {
  export type CreateGlvShiftParamsStruct = {
    glv: PromiseOrValue<string>;
    fromMarket: PromiseOrValue<string>;
    toMarket: PromiseOrValue<string>;
    marketTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
  };

  export type CreateGlvShiftParamsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    glv: string;
    fromMarket: string;
    toMarket: string;
    marketTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };
}

export interface GlvShiftHandlerInterface extends utils.Interface {
  functions: {
    "_executeGlvShift(bytes32,((address,address,address),(uint256,uint256,uint256)),address)": FunctionFragment;
    "addMarketToGlv(address,address)": FunctionFragment;
    "createGlvShift((address,address,address,uint256,uint256))": FunctionFragment;
    "dataStore()": FunctionFragment;
    "depositHandler()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "executeGlvShift(bytes32,(address[],address[],bytes[]))": FunctionFragment;
    "glvVault()": FunctionFragment;
    "multichainVault()": FunctionFragment;
    "oracle()": FunctionFragment;
    "removeMarketFromGlv(address,address)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "shiftVault()": FunctionFragment;
    "swapHandler()": FunctionFragment;
    "withdrawalHandler()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_executeGlvShift"
      | "addMarketToGlv"
      | "createGlvShift"
      | "dataStore"
      | "depositHandler"
      | "eventEmitter"
      | "executeGlvShift"
      | "glvVault"
      | "multichainVault"
      | "oracle"
      | "removeMarketFromGlv"
      | "roleStore"
      | "shiftVault"
      | "swapHandler"
      | "withdrawalHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_executeGlvShift",
    values: [
      PromiseOrValue<BytesLike>,
      GlvShift.PropsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketToGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvShift",
    values: [GlvShiftUtils.CreateGlvShiftParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeGlvShift",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "glvVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multichainVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMarketFromGlv",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shiftVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_executeGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketToGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGlvShift",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glvVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multichainVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketFromGlv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shiftVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalHandler",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GlvShiftHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvShiftHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    depositHandler(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    glvVault(overrides?: CallOverrides): Promise<[string]>;

    multichainVault(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    shiftVault(overrides?: CallOverrides): Promise<[string]>;

    swapHandler(overrides?: CallOverrides): Promise<[string]>;

    withdrawalHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  _executeGlvShift(
    key: PromiseOrValue<BytesLike>,
    glvShift: GlvShift.PropsStruct,
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMarketToGlv(
    glv: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvShift(
    params: GlvShiftUtils.CreateGlvShiftParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  depositHandler(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  executeGlvShift(
    key: PromiseOrValue<BytesLike>,
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  glvVault(overrides?: CallOverrides): Promise<string>;

  multichainVault(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  removeMarketFromGlv(
    glv: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  shiftVault(overrides?: CallOverrides): Promise<string>;

  swapHandler(overrides?: CallOverrides): Promise<string>;

  withdrawalHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    depositHandler(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    glvVault(overrides?: CallOverrides): Promise<string>;

    multichainVault(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    shiftVault(overrides?: CallOverrides): Promise<string>;

    swapHandler(overrides?: CallOverrides): Promise<string>;

    withdrawalHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    depositHandler(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    glvVault(overrides?: CallOverrides): Promise<BigNumber>;

    multichainVault(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    shiftVault(overrides?: CallOverrides): Promise<BigNumber>;

    swapHandler(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      glvShift: GlvShift.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMarketToGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvShift(
      params: GlvShiftUtils.CreateGlvShiftParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeGlvShift(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    glvVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multichainVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMarketFromGlv(
      glv: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shiftVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
