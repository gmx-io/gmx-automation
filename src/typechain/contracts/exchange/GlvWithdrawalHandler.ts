// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace GlvWithdrawal {
  export type AddressesStruct = {
    glv: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    glv: string;
    market: string;
    account: string;
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type NumbersStruct = {
    glvTokenAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtTime: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    srcChainId: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    glvTokenAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtTime: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    srcChainId: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: GlvWithdrawal.AddressesStruct;
    numbers: GlvWithdrawal.NumbersStruct;
    flags: GlvWithdrawal.FlagsStruct;
    _dataList: PromiseOrValue<BytesLike>[];
  };

  export type PropsStructOutput = [
    GlvWithdrawal.AddressesStructOutput,
    GlvWithdrawal.NumbersStructOutput,
    GlvWithdrawal.FlagsStructOutput,
    string[]
  ] & {
    addresses: GlvWithdrawal.AddressesStructOutput;
    numbers: GlvWithdrawal.NumbersStructOutput;
    flags: GlvWithdrawal.FlagsStructOutput;
    _dataList: string[];
  };
}

export declare namespace IGlvWithdrawalUtils {
  export type CreateGlvWithdrawalParamsAddressesStruct = {
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    glv: PromiseOrValue<string>;
    longTokenSwapPath: PromiseOrValue<string>[];
    shortTokenSwapPath: PromiseOrValue<string>[];
  };

  export type CreateGlvWithdrawalParamsAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string[],
    string[]
  ] & {
    receiver: string;
    callbackContract: string;
    uiFeeReceiver: string;
    market: string;
    glv: string;
    longTokenSwapPath: string[];
    shortTokenSwapPath: string[];
  };

  export type CreateGlvWithdrawalParamsStruct = {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStruct;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    dataList: PromiseOrValue<BytesLike>[];
  };

  export type CreateGlvWithdrawalParamsStructOutput = [
    IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    addresses: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsAddressesStructOutput;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    dataList: string[];
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };

  export type SimulatePricesParamsStruct = {
    primaryTokens: PromiseOrValue<string>[];
    primaryPrices: Price.PropsStruct[];
    minTimestamp: PromiseOrValue<BigNumberish>;
    maxTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type SimulatePricesParamsStructOutput = [
    string[],
    Price.PropsStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    primaryTokens: string[];
    primaryPrices: Price.PropsStructOutput[];
    minTimestamp: BigNumber;
    maxTimestamp: BigNumber;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export interface GlvWithdrawalHandlerInterface extends utils.Interface {
  functions: {
    "_executeGlvWithdrawal(bytes32,((address,address,address,address,address,address,address[],address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool),bytes32[]),address)": FunctionFragment;
    "cancelGlvWithdrawal(bytes32)": FunctionFragment;
    "createGlvWithdrawal(address,uint256,((address,address,address,address,address,address[],address[]),uint256,uint256,bool,uint256,uint256,bytes32[]))": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "executeGlvWithdrawal(bytes32,(address[],address[],bytes[]))": FunctionFragment;
    "glvVault()": FunctionFragment;
    "multichainTransferRouter()": FunctionFragment;
    "multichainVault()": FunctionFragment;
    "oracle()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "simulateExecuteGlvWithdrawal(bytes32,(address[],(uint256,uint256)[],uint256,uint256))": FunctionFragment;
    "swapHandler()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_executeGlvWithdrawal"
      | "cancelGlvWithdrawal"
      | "createGlvWithdrawal"
      | "dataStore"
      | "eventEmitter"
      | "executeGlvWithdrawal"
      | "glvVault"
      | "multichainTransferRouter"
      | "multichainVault"
      | "oracle"
      | "roleStore"
      | "simulateExecuteGlvWithdrawal"
      | "swapHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_executeGlvWithdrawal",
    values: [
      PromiseOrValue<BytesLike>,
      GlvWithdrawal.PropsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGlvWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "glvVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multichainTransferRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multichainVault",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "simulateExecuteGlvWithdrawal",
    values: [PromiseOrValue<BytesLike>, OracleUtils.SimulatePricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapHandler",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_executeGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glvVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multichainTransferRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multichainVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simulateExecuteGlvWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapHandler",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GlvWithdrawalHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlvWithdrawalHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    glvVault(overrides?: CallOverrides): Promise<[string]>;

    multichainTransferRouter(overrides?: CallOverrides): Promise<[string]>;

    multichainVault(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  _executeGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    glvWithdrawal: GlvWithdrawal.PropsStruct,
    keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGlvWithdrawal(
    account: PromiseOrValue<string>,
    srcChainId: PromiseOrValue<BigNumberish>,
    params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  executeGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    oracleParams: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  glvVault(overrides?: CallOverrides): Promise<string>;

  multichainTransferRouter(overrides?: CallOverrides): Promise<string>;

  multichainVault(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  simulateExecuteGlvWithdrawal(
    key: PromiseOrValue<BytesLike>,
    params: OracleUtils.SimulatePricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    glvVault(overrides?: CallOverrides): Promise<string>;

    multichainTransferRouter(overrides?: CallOverrides): Promise<string>;

    multichainVault(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    glvVault(overrides?: CallOverrides): Promise<BigNumber>;

    multichainTransferRouter(overrides?: CallOverrides): Promise<BigNumber>;

    multichainVault(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      glvWithdrawal: GlvWithdrawal.PropsStruct,
      keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGlvWithdrawal(
      account: PromiseOrValue<string>,
      srcChainId: PromiseOrValue<BigNumberish>,
      params: IGlvWithdrawalUtils.CreateGlvWithdrawalParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      oracleParams: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    glvVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multichainTransferRouter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multichainVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    simulateExecuteGlvWithdrawal(
      key: PromiseOrValue<BytesLike>,
      params: OracleUtils.SimulatePricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
