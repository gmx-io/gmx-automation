// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SwapUtilsInterface extends utils.Interface {
  functions: {
    "getOutputToken(DataStore,address[],address)": FunctionFragment;
    "validateSwapOutputToken(DataStore,address[],address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getOutputToken" | "validateSwapOutputToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOutputToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSwapOutputToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOutputToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSwapOutputToken",
    data: BytesLike
  ): Result;

  events: {
    "SwapReverted(string,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SwapReverted"): EventFragment;
}

export interface SwapRevertedEventObject {
  reason: string;
  reasonBytes: string;
}
export type SwapRevertedEvent = TypedEvent<
  [string, string],
  SwapRevertedEventObject
>;

export type SwapRevertedEventFilter = TypedEventFilter<SwapRevertedEvent>;

export interface SwapUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validateSwapOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      expectedOutputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getOutputToken(
    dataStore: PromiseOrValue<string>,
    swapPath: PromiseOrValue<string>[],
    inputToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  validateSwapOutputToken(
    dataStore: PromiseOrValue<string>,
    swapPath: PromiseOrValue<string>[],
    inputToken: PromiseOrValue<string>,
    expectedOutputToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    validateSwapOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      expectedOutputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SwapReverted(string,bytes)"(
      reason?: null,
      reasonBytes?: null
    ): SwapRevertedEventFilter;
    SwapReverted(reason?: null, reasonBytes?: null): SwapRevertedEventFilter;
  };

  estimateGas: {
    getOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateSwapOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      expectedOutputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateSwapOutputToken(
      dataStore: PromiseOrValue<string>,
      swapPath: PromiseOrValue<string>[],
      inputToken: PromiseOrValue<string>,
      expectedOutputToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
