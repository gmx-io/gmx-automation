// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
  };

  export type PropsStructOutput = [string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
  };
}

export declare namespace ISwapUtils {
  export type SwapParamsStruct = {
    dataStore: PromiseOrValue<string>;
    eventEmitter: PromiseOrValue<string>;
    oracle: PromiseOrValue<string>;
    bank: PromiseOrValue<string>;
    key: PromiseOrValue<BytesLike>;
    tokenIn: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
    swapPathMarkets: Market.PropsStruct[];
    minOutputAmount: PromiseOrValue<BigNumberish>;
    receiver: PromiseOrValue<string>;
    uiFeeReceiver: PromiseOrValue<string>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    swapPricingType: PromiseOrValue<BigNumberish>;
  };

  export type SwapParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    Market.PropsStructOutput[],
    BigNumber,
    string,
    string,
    boolean,
    number
  ] & {
    dataStore: string;
    eventEmitter: string;
    oracle: string;
    bank: string;
    key: string;
    tokenIn: string;
    amountIn: BigNumber;
    swapPathMarkets: Market.PropsStructOutput[];
    minOutputAmount: BigNumber;
    receiver: string;
    uiFeeReceiver: string;
    shouldUnwrapNativeToken: boolean;
    swapPricingType: number;
  };
}

export interface ISwapHandlerInterface extends utils.Interface {
  functions: {
    "swap((address,address,address,address,bytes32,address,uint256,(address,address,address,address)[],uint256,address,address,bool,uint8))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "swap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [ISwapUtils.SwapParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface ISwapHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISwapHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      params: ISwapUtils.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    params: ISwapUtils.SwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      params: ISwapUtils.SwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    swap(
      params: ISwapUtils.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      params: ISwapUtils.SwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
