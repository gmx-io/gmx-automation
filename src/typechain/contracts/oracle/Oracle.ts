/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export declare namespace OracleUtils {
  export type SetPricesParamsStruct = {
    tokens: PromiseOrValue<string>[];
    providers: PromiseOrValue<string>[];
    data: PromiseOrValue<BytesLike>[];
  };

  export type SetPricesParamsStructOutput = [string[], string[], string[]] & {
    tokens: string[];
    providers: string[];
    data: string[];
  };

  export type ValidatedPriceStruct = {
    token: PromiseOrValue<string>;
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    provider: PromiseOrValue<string>;
  };

  export type ValidatedPriceStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    token: string;
    min: BigNumber;
    max: BigNumber;
    timestamp: BigNumber;
    provider: string;
  };
}

export interface OracleInterface extends utils.Interface {
  functions: {
    "clearAllPrices()": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "getPrimaryPrice(address)": FunctionFragment;
    "getTokensWithPrices(uint256,uint256)": FunctionFragment;
    "getTokensWithPricesCount()": FunctionFragment;
    "maxTimestamp()": FunctionFragment;
    "minTimestamp()": FunctionFragment;
    "primaryPrices(address)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "sequencerUptimeFeed()": FunctionFragment;
    "setPrices((address[],address[],bytes[]))": FunctionFragment;
    "setPricesForAtomicAction((address[],address[],bytes[]))": FunctionFragment;
    "setPrimaryPrice(address,(uint256,uint256))": FunctionFragment;
    "setTimestamps(uint256,uint256)": FunctionFragment;
    "validatePrices((address[],address[],bytes[]),bool)": FunctionFragment;
    "validateSequencerUp()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clearAllPrices"
      | "dataStore"
      | "eventEmitter"
      | "getPrimaryPrice"
      | "getTokensWithPrices"
      | "getTokensWithPricesCount"
      | "maxTimestamp"
      | "minTimestamp"
      | "primaryPrices"
      | "roleStore"
      | "sequencerUptimeFeed"
      | "setPrices"
      | "setPricesForAtomicAction"
      | "setPrimaryPrice"
      | "setTimestamps"
      | "validatePrices"
      | "validateSequencerUp"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clearAllPrices",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensWithPrices",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensWithPricesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequencerUptimeFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPrices",
    values: [OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricesForAtomicAction",
    values: [OracleUtils.SetPricesParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryPrice",
    values: [PromiseOrValue<string>, Price.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimestamps",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatePrices",
    values: [OracleUtils.SetPricesParamsStruct, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSequencerUp",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "clearAllPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensWithPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensWithPricesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequencerUptimeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricesForAtomicAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimestamps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSequencerUp",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Price.PropsStructOutput]>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<[string]>;

    setPrices(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPricesForAtomicAction(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimestamps(
      _minTimestamp: PromiseOrValue<BigNumberish>,
      _maxTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatePrices(
      params: OracleUtils.SetPricesParamsStruct,
      forAtomicAction: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateSequencerUp(overrides?: CallOverrides): Promise<[void]>;
  };

  clearAllPrices(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  getPrimaryPrice(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Price.PropsStructOutput>;

  getTokensWithPrices(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

  maxTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  minTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  primaryPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  sequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

  setPrices(
    params: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPricesForAtomicAction(
    params: OracleUtils.SetPricesParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrimaryPrice(
    token: PromiseOrValue<string>,
    price: Price.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimestamps(
    _minTimestamp: PromiseOrValue<BigNumberish>,
    _maxTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatePrices(
    params: OracleUtils.SetPricesParamsStruct,
    forAtomicAction: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateSequencerUp(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    clearAllPrices(overrides?: CallOverrides): Promise<void>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Price.PropsStructOutput>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    minTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<string>;

    setPrices(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricesForAtomicAction(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimestamps(
      _minTimestamp: PromiseOrValue<BigNumberish>,
      _maxTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatePrices(
      params: OracleUtils.SetPricesParamsStruct,
      forAtomicAction: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<OracleUtils.ValidatedPriceStructOutput[]>;

    validateSequencerUp(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensWithPricesCount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    minTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    sequencerUptimeFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setPrices(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPricesForAtomicAction(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimestamps(
      _minTimestamp: PromiseOrValue<BigNumberish>,
      _maxTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatePrices(
      params: OracleUtils.SetPricesParamsStruct,
      forAtomicAction: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateSequencerUp(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    clearAllPrices(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrimaryPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensWithPrices(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensWithPricesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primaryPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequencerUptimeFeed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPrices(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPricesForAtomicAction(
      params: OracleUtils.SetPricesParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryPrice(
      token: PromiseOrValue<string>,
      price: Price.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimestamps(
      _minTimestamp: PromiseOrValue<BigNumberish>,
      _maxTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatePrices(
      params: OracleUtils.SetPricesParamsStruct,
      forAtomicAction: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateSequencerUp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
