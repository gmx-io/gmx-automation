// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace EdgeDataStreamVerifier {
  export type ReportStruct = {
    feedId: PromiseOrValue<BytesLike>;
    bid: PromiseOrValue<BigNumberish>;
    ask: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    expo: PromiseOrValue<BigNumberish>;
  };

  export type ReportStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    feedId: string;
    bid: BigNumber;
    ask: BigNumber;
    timestamp: number;
    expo: number;
  };
}

export interface EdgeDataStreamVerifierInterface extends utils.Interface {
  functions: {
    "extractSigner(string,uint192,uint32,uint32,uint256,uint256,int32,bytes)": FunctionFragment;
    "trustedSigner()": FunctionFragment;
    "verifyData(bytes)": FunctionFragment;
    "verifySignature(string,uint192,uint32,uint32,uint256,uint256,int32,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "extractSigner"
      | "trustedSigner"
      | "verifyData"
      | "verifySignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "extractSigner",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "extractSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifyData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EdgeDataStreamVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EdgeDataStreamVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    extractSigner(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    trustedSigner(overrides?: CallOverrides): Promise<[string]>;

    verifyData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[EdgeDataStreamVerifier.ReportStructOutput]>;

    verifySignature(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  extractSigner(
    feedId: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    roundId: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    bid: PromiseOrValue<BigNumberish>,
    ask: PromiseOrValue<BigNumberish>,
    expo: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  trustedSigner(overrides?: CallOverrides): Promise<string>;

  verifyData(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<EdgeDataStreamVerifier.ReportStructOutput>;

  verifySignature(
    feedId: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    roundId: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    bid: PromiseOrValue<BigNumberish>,
    ask: PromiseOrValue<BigNumberish>,
    expo: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    extractSigner(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    trustedSigner(overrides?: CallOverrides): Promise<string>;

    verifyData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<EdgeDataStreamVerifier.ReportStructOutput>;

    verifySignature(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    extractSigner(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedSigner(overrides?: CallOverrides): Promise<BigNumber>;

    verifyData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySignature(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    extractSigner(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyData(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySignature(
      feedId: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      roundId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      bid: PromiseOrValue<BigNumberish>,
      ask: PromiseOrValue<BigNumberish>,
      expo: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
