/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace OracleUtils {
  export type ValidatedPriceStruct = {
    token: PromiseOrValue<string>;
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    provider: PromiseOrValue<string>;
  };

  export type ValidatedPriceStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    token: string;
    min: BigNumber;
    max: BigNumber;
    timestamp: BigNumber;
    provider: string;
  };
}

export interface GmOracleProviderInterface extends utils.Interface {
  functions: {
    "MAX_SIGNERS()": FunctionFragment;
    "MAX_SIGNER_INDEX()": FunctionFragment;
    "SIGNER_INDEX_LENGTH()": FunctionFragment;
    "dataStore()": FunctionFragment;
    "getOraclePrice(address,bytes)": FunctionFragment;
    "oracleStore()": FunctionFragment;
    "roleStore()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SIGNERS"
      | "MAX_SIGNER_INDEX"
      | "SIGNER_INDEX_LENGTH"
      | "dataStore"
      | "getOraclePrice"
      | "oracleStore"
      | "roleStore"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SIGNER_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNER_INDEX_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOraclePrice",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SIGNER_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNER_INDEX_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;

  events: {};
}

export interface GmOracleProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GmOracleProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    getOraclePrice(
      token: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[OracleUtils.ValidatedPriceStructOutput]>;

    oracleStore(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  getOraclePrice(
    token: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<OracleUtils.ValidatedPriceStructOutput>;

  oracleStore(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    getOraclePrice(
      token: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<OracleUtils.ValidatedPriceStructOutput>;

    oracleStore(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNER_INDEX_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    getOraclePrice(
      token: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleStore(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SIGNERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SIGNER_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIGNER_INDEX_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOraclePrice(
      token: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
