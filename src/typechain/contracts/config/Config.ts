// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ConfigUtils {
  export type InitOracleConfigPriceFeedParamsStruct = {
    feedAddress: PromiseOrValue<string>;
    multiplier: PromiseOrValue<BigNumberish>;
    heartbeatDuration: PromiseOrValue<BigNumberish>;
    stablePrice: PromiseOrValue<BigNumberish>;
  };

  export type InitOracleConfigPriceFeedParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    feedAddress: string;
    multiplier: BigNumber;
    heartbeatDuration: BigNumber;
    stablePrice: BigNumber;
  };

  export type InitOracleConfigDataStreamParamsStruct = {
    feedId: PromiseOrValue<BytesLike>;
    multiplier: PromiseOrValue<BigNumberish>;
    spreadReductionFactor: PromiseOrValue<BigNumberish>;
  };

  export type InitOracleConfigDataStreamParamsStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    feedId: string;
    multiplier: BigNumber;
    spreadReductionFactor: BigNumber;
  };

  export type InitOracleConfigEdgeParamsStruct = {
    feedId: PromiseOrValue<BytesLike>;
    tokenDecimals: PromiseOrValue<BigNumberish>;
  };

  export type InitOracleConfigEdgeParamsStructOutput = [string, BigNumber] & {
    feedId: string;
    tokenDecimals: BigNumber;
  };

  export type InitOracleConfigParamsStruct = {
    token: PromiseOrValue<string>;
    priceFeed: ConfigUtils.InitOracleConfigPriceFeedParamsStruct;
    dataStream: ConfigUtils.InitOracleConfigDataStreamParamsStruct;
    edge: ConfigUtils.InitOracleConfigEdgeParamsStruct;
  };

  export type InitOracleConfigParamsStructOutput = [
    string,
    ConfigUtils.InitOracleConfigPriceFeedParamsStructOutput,
    ConfigUtils.InitOracleConfigDataStreamParamsStructOutput,
    ConfigUtils.InitOracleConfigEdgeParamsStructOutput
  ] & {
    token: string;
    priceFeed: ConfigUtils.InitOracleConfigPriceFeedParamsStructOutput;
    dataStream: ConfigUtils.InitOracleConfigDataStreamParamsStructOutput;
    edge: ConfigUtils.InitOracleConfigEdgeParamsStructOutput;
  };
}

export interface ConfigInterface extends utils.Interface {
  functions: {
    "allowedBaseKeys(bytes32)": FunctionFragment;
    "allowedLimitedBaseKeys(bytes32)": FunctionFragment;
    "dataStore()": FunctionFragment;
    "eventEmitter()": FunctionFragment;
    "initOracleConfig((address,(address,uint256,uint256,uint256),(bytes32,uint256,uint256),(bytes32,uint256)))": FunctionFragment;
    "initOracleProviderForToken(address,address,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setAddress(bytes32,bytes,address)": FunctionFragment;
    "setBool(bytes32,bytes,bool)": FunctionFragment;
    "setBytes32(bytes32,bytes,bytes32)": FunctionFragment;
    "setClaimableCollateralFactorForAccount(address,address,uint256,address,uint256)": FunctionFragment;
    "setClaimableCollateralFactorForTime(address,address,uint256,uint256)": FunctionFragment;
    "setClaimableCollateralReductionFactorForAccount(address,address,uint256,address,uint256)": FunctionFragment;
    "setInt(bytes32,bytes,int256)": FunctionFragment;
    "setOracleProviderForToken(address,address,address)": FunctionFragment;
    "setPositionImpactDistributionRate(address,uint256,uint256)": FunctionFragment;
    "setUint(bytes32,bytes,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowedBaseKeys"
      | "allowedLimitedBaseKeys"
      | "dataStore"
      | "eventEmitter"
      | "initOracleConfig"
      | "initOracleProviderForToken"
      | "multicall"
      | "roleStore"
      | "setAddress"
      | "setBool"
      | "setBytes32"
      | "setClaimableCollateralFactorForAccount"
      | "setClaimableCollateralFactorForTime"
      | "setClaimableCollateralReductionFactorForAccount"
      | "setInt"
      | "setOracleProviderForToken"
      | "setPositionImpactDistributionRate"
      | "setUint"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowedBaseKeys",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedLimitedBaseKeys",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "dataStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eventEmitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initOracleConfig",
    values: [ConfigUtils.InitOracleConfigParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initOracleProviderForToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableCollateralFactorForAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableCollateralFactorForTime",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimableCollateralReductionFactorForAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInt",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleProviderForToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionImpactDistributionRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedBaseKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedLimitedBaseKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventEmitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initOracleConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initOracleProviderForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableCollateralFactorForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableCollateralFactorForTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimableCollateralReductionFactorForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleProviderForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionImpactDistributionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;

  events: {};
}

export interface Config extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowedLimitedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dataStore(overrides?: CallOverrides): Promise<[string]>;

    eventEmitter(overrides?: CallOverrides): Promise<[string]>;

    initOracleConfig(
      params: ConfigUtils.InitOracleConfigParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setAddress(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBool(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBytes32(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimableCollateralFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimableCollateralFactorForTime(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClaimableCollateralReductionFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInt(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPositionImpactDistributionRate(
      market: PromiseOrValue<string>,
      minPositionImpactPoolAmount: PromiseOrValue<BigNumberish>,
      positionImpactPoolDistributionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUint(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowedBaseKeys(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowedLimitedBaseKeys(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dataStore(overrides?: CallOverrides): Promise<string>;

  eventEmitter(overrides?: CallOverrides): Promise<string>;

  initOracleConfig(
    params: ConfigUtils.InitOracleConfigParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initOracleProviderForToken(
    oracle: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setAddress(
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBool(
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBytes32(
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimableCollateralFactorForAccount(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    timeKey: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimableCollateralFactorForTime(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    timeKey: PromiseOrValue<BigNumberish>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClaimableCollateralReductionFactorForAccount(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    timeKey: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInt(
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleProviderForToken(
    oracle: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPositionImpactDistributionRate(
    market: PromiseOrValue<string>,
    minPositionImpactPoolAmount: PromiseOrValue<BigNumberish>,
    positionImpactPoolDistributionRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUint(
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowedLimitedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dataStore(overrides?: CallOverrides): Promise<string>;

    eventEmitter(overrides?: CallOverrides): Promise<string>;

    initOracleConfig(
      params: ConfigUtils.InitOracleConfigParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setAddress(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBool(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBytes32(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimableCollateralFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimableCollateralFactorForTime(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimableCollateralReductionFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInt(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionImpactDistributionRate(
      market: PromiseOrValue<string>,
      minPositionImpactPoolAmount: PromiseOrValue<BigNumberish>,
      positionImpactPoolDistributionRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUint(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowedLimitedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataStore(overrides?: CallOverrides): Promise<BigNumber>;

    eventEmitter(overrides?: CallOverrides): Promise<BigNumber>;

    initOracleConfig(
      params: ConfigUtils.InitOracleConfigParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBool(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBytes32(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimableCollateralFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimableCollateralFactorForTime(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClaimableCollateralReductionFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInt(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPositionImpactDistributionRate(
      market: PromiseOrValue<string>,
      minPositionImpactPoolAmount: PromiseOrValue<BigNumberish>,
      positionImpactPoolDistributionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUint(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowedLimitedBaseKeys(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eventEmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initOracleConfig(
      params: ConfigUtils.InitOracleConfigParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddress(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBool(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBytes32(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimableCollateralFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimableCollateralFactorForTime(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClaimableCollateralReductionFactorForAccount(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      timeKey: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInt(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleProviderForToken(
      oracle: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPositionImpactDistributionRate(
      market: PromiseOrValue<string>,
      minPositionImpactPoolAmount: PromiseOrValue<BigNumberish>,
      positionImpactPoolDistributionRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUint(
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
