// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IRiskOracle {
  export type RiskParameterUpdateStruct = {
    timestamp: PromiseOrValue<BigNumberish>;
    newValue: PromiseOrValue<BytesLike>;
    referenceId: PromiseOrValue<string>;
    previousValue: PromiseOrValue<BytesLike>;
    updateType: PromiseOrValue<string>;
    updateId: PromiseOrValue<BigNumberish>;
    market: PromiseOrValue<string>;
    additionalData: PromiseOrValue<BytesLike>;
  };

  export type RiskParameterUpdateStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    timestamp: BigNumber;
    newValue: string;
    referenceId: string;
    previousValue: string;
    updateType: string;
    updateId: BigNumber;
    market: string;
    additionalData: string;
  };
}

export interface IRiskOracleInterface extends utils.Interface {
  functions: {
    "getLatestUpdateByParameterAndMarket(string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getLatestUpdateByParameterAndMarket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLatestUpdateByParameterAndMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLatestUpdateByParameterAndMarket",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRiskOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRiskOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IRiskOracle.RiskParameterUpdateStructOutput]>;
  };

  getLatestUpdateByParameterAndMarket(
    updateType: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IRiskOracle.RiskParameterUpdateStructOutput>;

  callStatic: {
    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IRiskOracle.RiskParameterUpdateStructOutput>;
  };

  filters: {};

  estimateGas: {
    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLatestUpdateByParameterAndMarket(
      updateType: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
