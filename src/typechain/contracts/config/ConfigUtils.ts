// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ConfigUtilsInterface extends utils.Interface {
  functions: {
    "MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND()": FunctionFragment;
    "MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND()": FunctionFragment;
    "MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND()": FunctionFragment;
    "MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME()": FunctionFragment;
    "validateRange(DataStore,bytes32,bytes,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND"
      | "MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND"
      | "MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND"
      | "MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME"
      | "validateRange"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateRange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateRange",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ConfigUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConfigUtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validateRange(
      dataStore: PromiseOrValue<string>,
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validateRange(
    dataStore: PromiseOrValue<string>,
    baseKey: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateRange(
      dataStore: PromiseOrValue<string>,
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateRange(
      dataStore: PromiseOrValue<string>,
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ALLOWED_FUNDING_DECREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ALLOWED_FUNDING_INCREASE_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ALLOWED_MAX_FUNDING_FACTOR_PER_SECOND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_POSITION_IMPACT_POOL_DISTRIBUTION_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateRange(
      dataStore: PromiseOrValue<string>,
      baseKey: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
