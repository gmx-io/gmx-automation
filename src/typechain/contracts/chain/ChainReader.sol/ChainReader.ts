/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ChainReaderInterface extends utils.Interface {
  functions: {
    "arbSys()": FunctionFragment;
    "getBlockHash(uint256)": FunctionFragment;
    "getBlockHashAndLatestBlockNumber(uint256)": FunctionFragment;
    "getBlockHashWithDelayAndLatestBlockNumber(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "latestBlockHash()": FunctionFragment;
    "updateLatestBlockHash(uint256)": FunctionFragment;
    "updateLatestBlockHashWithDelay()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arbSys"
      | "getBlockHash"
      | "getBlockHashAndLatestBlockNumber"
      | "getBlockHashWithDelayAndLatestBlockNumber"
      | "getBlockNumber"
      | "latestBlockHash"
      | "updateLatestBlockHash"
      | "updateLatestBlockHashWithDelay"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "arbSys", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashAndLatestBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashWithDelayAndLatestBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLatestBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLatestBlockHashWithDelay",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "arbSys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashAndLatestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashWithDelayAndLatestBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLatestBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLatestBlockHashWithDelay",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ChainReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChainReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbSys(overrides?: CallOverrides): Promise<[string]>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBlockHashAndLatestBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getBlockHashWithDelayAndLatestBlockNumber(
      blockNumberDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestBlockHash(overrides?: CallOverrides): Promise<[string]>;

    updateLatestBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLatestBlockHashWithDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  arbSys(overrides?: CallOverrides): Promise<string>;

  getBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlockHashAndLatestBlockNumber(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getBlockHashWithDelayAndLatestBlockNumber(
    blockNumberDiff: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  latestBlockHash(overrides?: CallOverrides): Promise<string>;

  updateLatestBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLatestBlockHashWithDelay(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbSys(overrides?: CallOverrides): Promise<string>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlockHashAndLatestBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getBlockHashWithDelayAndLatestBlockNumber(
      blockNumberDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestBlockHash(overrides?: CallOverrides): Promise<string>;

    updateLatestBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLatestBlockHashWithDelay(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    arbSys(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockHashAndLatestBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockHashWithDelayAndLatestBlockNumber(
      blockNumberDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestBlockHash(overrides?: CallOverrides): Promise<BigNumber>;

    updateLatestBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLatestBlockHashWithDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbSys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockHashAndLatestBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockHashWithDelayAndLatestBlockNumber(
      blockNumberDiff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLatestBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLatestBlockHashWithDelay(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
