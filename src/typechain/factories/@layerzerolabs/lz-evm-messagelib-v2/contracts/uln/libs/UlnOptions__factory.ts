// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  UlnOptions,
  UlnOptionsInterface,
} from "../../../../../../@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/UlnOptions";

const _abi = [
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType1Option",
    type: "error",
  },
  {
    inputs: [],
    name: "LZ_ULN_InvalidLegacyType2Option",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "workerId",
        type: "uint8",
      },
    ],
    name: "LZ_ULN_InvalidWorkerId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "cursor",
        type: "uint256",
      },
    ],
    name: "LZ_ULN_InvalidWorkerOptions",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "optionType",
        type: "uint16",
      },
    ],
    name: "LZ_ULN_UnsupportedOptionType",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220453b719e2b04f4b9b6a07f099d2b5d32cfab8cb0fb9e0e0a03e6552a1ba9e01064736f6c634300081d0033";

type UlnOptionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UlnOptionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UlnOptions__factory extends ContractFactory {
  constructor(...args: UlnOptionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UlnOptions> {
    return super.deploy(overrides || {}) as Promise<UlnOptions>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UlnOptions {
    return super.attach(address) as UlnOptions;
  }
  override connect(signer: Signer): UlnOptions__factory {
    return super.connect(signer) as UlnOptions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UlnOptionsInterface {
    return new utils.Interface(_abi) as UlnOptionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UlnOptions {
    return new Contract(address, _abi, signerOrProvider) as UlnOptions;
  }
}
