// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ReadCodecV1,
  ReadCodecV1Interface,
} from "../../../../../../@layerzerolabs/oapp-evm/contracts/oapp/libs/ReadCodecV1";

const _abi = [
  {
    inputs: [],
    name: "InvalidType",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidVersion",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207623282301da4b548fb7c1a5712264fd4e8b737d9190b955af5ec3d94d06ee9464736f6c63430008140033";

type ReadCodecV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReadCodecV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReadCodecV1__factory extends ContractFactory {
  constructor(...args: ReadCodecV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReadCodecV1> {
    return super.deploy(overrides || {}) as Promise<ReadCodecV1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReadCodecV1 {
    return super.attach(address) as ReadCodecV1;
  }
  override connect(signer: Signer): ReadCodecV1__factory {
    return super.connect(signer) as ReadCodecV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReadCodecV1Interface {
    return new utils.Interface(_abi) as ReadCodecV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReadCodecV1 {
    return new Contract(address, _abi, signerOrProvider) as ReadCodecV1;
  }
}
