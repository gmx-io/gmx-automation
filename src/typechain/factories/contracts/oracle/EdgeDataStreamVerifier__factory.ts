// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EdgeDataStreamVerifier,
  EdgeDataStreamVerifierInterface,
} from "../../../contracts/oracle/EdgeDataStreamVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedSigner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "recoverError",
        type: "uint256",
      },
    ],
    name: "InvalidEdgeSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEdgeSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTrustedSignerAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "uint192",
        name: "price",
        type: "uint192",
      },
      {
        internalType: "uint32",
        name: "roundId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
      {
        internalType: "int32",
        name: "expo",
        type: "int32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "extractSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "verifyData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "bid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ask",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32",
          },
        ],
        internalType: "struct EdgeDataStreamVerifier.Report",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "uint192",
        name: "price",
        type: "uint192",
      },
      {
        internalType: "uint32",
        name: "roundId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
      {
        internalType: "int32",
        name: "expo",
        type: "int32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5060405161091e38038061091e833981016040819052602c916062565b6001600160a01b038116605257604051639e5d5cf360e01b815260040160405180910390fd5b6001600160a01b03166080526090565b600060208284031215607357600080fd5b81516001600160a01b0381168114608957600080fd5b9392505050565b60805161086c6100b260003960008181610107015261012d015261086c6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063166a15191461005157806375c5ebb514610079578063d94d4f55146100d7578063f74d548014610102575b600080fd5b61006461005f36600461057a565b610129565b60405190151581526020015b60405180910390f35b61008c610087366004610637565b61017c565b6040516100709190600060a08201905082518252602083015160208301526040830151604083015263ffffffff6060840151166060830152608083015160030b608083015292915050565b6100ea6100e536600461057a565b61023a565b6040516001600160a01b039091168152602001610070565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101658a8a8a8a8a8a8a8a61023a565b6001600160a01b0316149998505050505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290808080808080806101ba8b8b018c6106a9565b975097509750975097509750975097506101da8888888888888789610129565b6101f757604051638a1cc36b60e01b815260040160405180910390fd5b6040805160a081018252895160209a8b0120815298890194909452928701919091525063ffffffff909116606085015260030b6080840152509091505092915050565b60008061028b8a805190602001206102518b6102fe565b61025a8b6102fe565b6102638b6102fe565b61026c8b6102fe565b6102758b6102fe565b6102866102818c610766565b6102fe565b610328565b905060008061029a838661038f565b909250905060008160048111156102b3576102b3610797565b146102ef578060048111156102ca576102ca610797565b60405163545e155f60e01b81526004016102e691815260200190565b60405180910390fd5b509a9950505050505050505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b600080888884604051602001610340939291906107dd565b6040516020818303038152906040529050808787878760405160200161036a959493929190610801565b60408051808303601f1901815291905280516020909101209998505050505050505050565b60008082516041036103c55760208301516040840151606085015160001a6103b9878285856103d4565b945094505050506103cd565b506000905060025b9250929050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156104015750600090506003610485565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610455573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661047e57600060019250925050610485565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104b557600080fd5b8135602083016000806001600160401b038411156104d5576104d561048e565b50604051601f19601f85018116603f011681018181106001600160401b03821117156105035761050361048e565b60405283815290508082840187101561051b57600080fd5b838360208301376000602085830101528094505050505092915050565b80356001600160c01b038116811461054f57600080fd5b919050565b803563ffffffff8116811461054f57600080fd5b8035600381900b811461054f57600080fd5b600080600080600080600080610100898b03121561059757600080fd5b88356001600160401b038111156105ad57600080fd5b6105b98b828c016104a4565b9850506105c860208a01610538565b96506105d660408a01610554565b95506105e460608a01610554565b94506080890135935060a0890135925061060060c08a01610568565b915060e08901356001600160401b0381111561061b57600080fd5b6106278b828c016104a4565b9150509295985092959890939650565b6000806020838503121561064a57600080fd5b82356001600160401b0381111561066057600080fd5b8301601f8101851361067157600080fd5b80356001600160401b0381111561068757600080fd5b85602082840101111561069957600080fd5b6020919091019590945092505050565b600080600080600080600080610100898b0312156106c657600080fd5b88356001600160401b038111156106dc57600080fd5b6106e88b828c016104a4565b9850506106f760208a01610538565b965061070560408a01610554565b955061071360608a01610554565b94506080890135935060a0890135925060c08901356001600160401b0381111561073c57600080fd5b6107488b828c016104a4565b92505061075760e08a01610568565b90509295985092959890939650565b60008160030b637fffffff19810361078e57634e487b7160e01b600052601160045260246000fd5b60000392915050565b634e487b7160e01b600052602160045260246000fd5b6000815160005b818110156107ce57602081850181015186830152016107b4565b50600093019283525090919050565b83815260006107f86107f260208401866107ad565b846107ad565b95945050505050565b600061082b6107f261082561081f610819868c6107ad565b8a6107ad565b886107ad565b866107ad565b97965050505050505056fea2646970667358221220e41262de7fa69259c8e9b59030daa706b29fb1aab744b8e24dbddbba04a1247164736f6c634300081d0033";

type EdgeDataStreamVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EdgeDataStreamVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EdgeDataStreamVerifier__factory extends ContractFactory {
  constructor(...args: EdgeDataStreamVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _trustedSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EdgeDataStreamVerifier> {
    return super.deploy(
      _trustedSigner,
      overrides || {}
    ) as Promise<EdgeDataStreamVerifier>;
  }
  override getDeployTransaction(
    _trustedSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_trustedSigner, overrides || {});
  }
  override attach(address: string): EdgeDataStreamVerifier {
    return super.attach(address) as EdgeDataStreamVerifier;
  }
  override connect(signer: Signer): EdgeDataStreamVerifier__factory {
    return super.connect(signer) as EdgeDataStreamVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EdgeDataStreamVerifierInterface {
    return new utils.Interface(_abi) as EdgeDataStreamVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EdgeDataStreamVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EdgeDataStreamVerifier;
  }
}
