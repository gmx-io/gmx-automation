// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EdgeDataStreamVerifier,
  EdgeDataStreamVerifierInterface,
} from "../../../contracts/oracle/EdgeDataStreamVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedSigner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "recoverError",
        type: "uint256",
      },
    ],
    name: "InvalidEdgeSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEdgeSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTrustedSignerAddress",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "uint192",
        name: "price",
        type: "uint192",
      },
      {
        internalType: "uint32",
        name: "roundId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
      {
        internalType: "int32",
        name: "expo",
        type: "int32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "extractSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedSigner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "verifyData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "feedId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "bid",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ask",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "timestamp",
            type: "uint32",
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32",
          },
        ],
        internalType: "struct EdgeDataStreamVerifier.Report",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "feedId",
        type: "string",
      },
      {
        internalType: "uint192",
        name: "price",
        type: "uint192",
      },
      {
        internalType: "uint32",
        name: "roundId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
      {
        internalType: "int32",
        name: "expo",
        type: "int32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610a72380380610a7283398101604081905261002f91610067565b6001600160a01b03811661005657604051639e5d5cf360e01b815260040160405180910390fd5b6001600160a01b0316608052610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b6080516109b96100b960003960008181610107015261012d01526109b96000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063166a15191461005157806375c5ebb514610079578063d94d4f55146100d7578063f74d548014610102575b600080fd5b61006461005f366004610676565b610129565b60405190151581526020015b60405180910390f35b61008c61008736600461072f565b61017c565b6040516100709190600060a08201905082518252602083015160208301526040830151604083015263ffffffff6060840151166060830152608083015160030b608083015292915050565b6100ea6100e5366004610676565b610240565b6040516001600160a01b039091168152602001610070565b6100ea7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166101658a8a8a8a8a8a8a8a610240565b6001600160a01b0316149998505050505050505050565b6040805160a081018252600080825260208201819052918101829052606081018290526080810182905290808080808080806101ba8b8b018c6107a0565b975097509750975097509750975097506101da8888888888888789610129565b6101f757604051638a1cc36b60e01b815260040160405180910390fd5b6040518060a0016040528061020b8a610307565b81526020018581526020018481526020018663ffffffff1681526020018260030b815250985050505050505050505b92915050565b6000806102946102518b6020610326565b61025a8b610402565b6102638b610402565b61026c8b610402565b6102758b610402565b61027e8b610402565b61028f61028a8c61086f565b610402565b61042c565b90506000806102a38386610493565b909250905060008160048111156102bc576102bc610892565b146102f8578060048111156102d3576102d3610892565b60405163545e155f60e01b81526004016102ef91815260200190565b60405180910390fd5b509a9950505050505050505050565b80516000908290820361031d5750600092915050565b50506020015190565b60606000826001600160401b0381111561034257610342610592565b6040519080825280601f01601f19166020018201604052801561036c576020820181803683370190505b5084519091508381111561037d5750825b60005b818110156103f85785818151811061039a5761039a6108a8565b01602001516001600160f81b03191683826103b585896108be565b6103bf91906108d1565b815181106103cf576103cf6108a8565b60200101906001600160f81b031916908160001a905350806103f0816108e4565b915050610380565b5090949350505050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6000808888846040516020016104449392919061092d565b6040516020818303038152906040529050808787878760405160200161046e959493929190610954565b60408051808303601f1901815291905280516020909101209998505050505050505050565b60008082516041036104c95760208301516040840151606085015160001a6104bd878285856104d8565b945094505050506104d1565b506000905060025b9250929050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156105055750600090506003610589565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610559573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661058257600060019250925050610589565b9150600090505b94509492505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126105b957600080fd5b81356001600160401b03808211156105d3576105d3610592565b604051601f8301601f19908116603f011681019082821181831017156105fb576105fb610592565b8160405283815286602085880101111561061457600080fd5b836020870160208301376000602085830101528094505050505092915050565b80356001600160c01b038116811461064b57600080fd5b919050565b803563ffffffff8116811461064b57600080fd5b8035600381900b811461064b57600080fd5b600080600080600080600080610100898b03121561069357600080fd5b88356001600160401b03808211156106aa57600080fd5b6106b68c838d016105a8565b99506106c460208c01610634565b98506106d260408c01610650565b97506106e060608c01610650565b965060808b0135955060a08b013594506106fc60c08c01610664565b935060e08b013591508082111561071257600080fd5b5061071f8b828c016105a8565b9150509295985092959890939650565b6000806020838503121561074257600080fd5b82356001600160401b038082111561075957600080fd5b818501915085601f83011261076d57600080fd5b81358181111561077c57600080fd5b86602082850101111561078e57600080fd5b60209290920196919550909350505050565b600080600080600080600080610100898b0312156107bd57600080fd5b88356001600160401b03808211156107d457600080fd5b6107e08c838d016105a8565b99506107ee60208c01610634565b98506107fc60408c01610650565b975061080a60608c01610650565b965060808b0135955060a08b0135945060c08b013591508082111561082e57600080fd5b5061083b8b828c016105a8565b92505061084a60e08a01610664565b90509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b60008160030b637fffffff19810361088957610889610859565b60000392915050565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8181038181111561023a5761023a610859565b8082018082111561023a5761023a610859565b6000600182016108f6576108f6610859565b5060010190565b6000815160005b8181101561091e5760208185018101518683015201610904565b50600093019283525090919050565b600061094b61094561093f84886108fd565b866108fd565b846108fd565b95945050505050565b600061097861094561093f61097261096c868c6108fd565b8a6108fd565b886108fd565b97965050505050505056fea26469706673582212201aed28715cdef7929b6cec60bc781e4c076892d1edccc5a5af55aa10b3c0c65964736f6c63430008140033";

type EdgeDataStreamVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EdgeDataStreamVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EdgeDataStreamVerifier__factory extends ContractFactory {
  constructor(...args: EdgeDataStreamVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _trustedSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EdgeDataStreamVerifier> {
    return super.deploy(
      _trustedSigner,
      overrides || {}
    ) as Promise<EdgeDataStreamVerifier>;
  }
  override getDeployTransaction(
    _trustedSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_trustedSigner, overrides || {});
  }
  override attach(address: string): EdgeDataStreamVerifier {
    return super.attach(address) as EdgeDataStreamVerifier;
  }
  override connect(signer: Signer): EdgeDataStreamVerifier__factory {
    return super.connect(signer) as EdgeDataStreamVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EdgeDataStreamVerifierInterface {
    return new utils.Interface(_abi) as EdgeDataStreamVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EdgeDataStreamVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EdgeDataStreamVerifier;
  }
}
