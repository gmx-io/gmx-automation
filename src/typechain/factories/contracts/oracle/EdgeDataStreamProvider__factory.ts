// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  EdgeDataStreamProvider,
  EdgeDataStreamProviderInterface,
} from "../../../contracts/oracle/EdgeDataStreamProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
      {
        internalType: "contract EdgeDataStreamVerifier",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "EmptyDataStreamFeedId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "feedId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "expectedFeedId",
        type: "bytes32",
      },
    ],
    name: "InvalidDataStreamFeedId",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
    ],
    name: "InvalidEdgeDataStreamBidAsk",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "expo",
        type: "int256",
      },
    ],
    name: "InvalidEdgeDataStreamExpo",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ask",
        type: "uint256",
      },
    ],
    name: "InvalidEdgeDataStreamPrices",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getOraclePrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "min",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "max",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
        ],
        internalType: "struct OracleUtils.ValidatedPrice",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isChainlinkOnChainProvider",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldAdjustTimestamp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract EdgeDataStreamVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610b13380380610b1383398101604081905261002f91610064565b6001600160a01b0392831660805290821660a0521660c0526100b1565b6001600160a01b038116811461006157600080fd5b50565b60008060006060848603121561007957600080fd5b83516100848161004c565b60208501519093506100958161004c565b60408501519092506100a68161004c565b809150509250925092565b60805160a05160c051610a186100fb60003960008181606c01526102f001526000818161012c01526101b70152600081816101050152818161021f015261040a0152610a186000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632b7ac3f314610067578063377bbdaf146100a4578063660d0d67146101005780637dc0d1d0146101275780638263c28e1461014e578063eed790c714610161575b600080fd5b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b60405161009b9190610639565b60405180910390f35b6100b76100b23660046106bb565b610168565b60405161009b919081516001600160a01b039081168252602080840151908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b61008e7f000000000000000000000000000000000000000000000000000000000000000081565b60015b604051901515815260200161009b565b6000610151565b6101ac6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461021b576040805163a35b150b60e01b8152336004820152602481019190915260066044820152654f7261636c6560d01b60648201526084015b60405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a6ed563e61025586610573565b6040518263ffffffff1660e01b815260040161027391815260200190565b602060405180830381865afa158015610290573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b49190610772565b9050806102d657836040516318b900b360e21b81526004016102129190610639565b6040516375c5ebb560e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906375c5ebb59061032590879060040161078b565b60a060405180830381865afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036691906107d9565b8051909150821461039057805160405163a4949e2560e01b8152610212918791859060040161084b565b602081015115806103a357506040810151155b156103cf57848160200151826040015160405163e75fc46360e01b81526004016102129392919061084b565b80604001518160200151111561040657848160200151826040015160405163108d10e760e21b81526004016102129392919061084b565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bd02d0f5610440886105f6565b6040518263ffffffff1660e01b815260040161045e91815260200190565b602060405180830381865afa15801561047b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049f9190610772565b90506000826080015160030b82601e6104b89190610882565b6104c291906108a9565b905060008112156104f2576080830151604051638bb5c4bf60e01b815260039190910b6004820152602401610212565b60006104ff82600a6109b8565b846020015161050e91906109cb565b9050600061051d83600a6109b8565b856040015161052c91906109cb565b6040805160a0810182526001600160a01b038c16815260208101949094528301525060609384015163ffffffff169381019390935250503060808201529150505b92915050565b60006040516020016105ac90602080825260139082015272115111d157d110551057d4d51491505357d251606a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b60006040516020016105ac906020808252601f908201527f454447455f444154415f53545245414d5f544f4b454e5f444543494d414c5300604082015260600190565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156106855761068561064d565b60405290565b604051601f8201601f191681016001600160401b03811182821017156106b3576106b361064d565b604052919050565b600080604083850312156106ce57600080fd5b82356001600160a01b03811681146106e557600080fd5b915060208301356001600160401b0381111561070057600080fd5b8301601f8101851361071157600080fd5b80356001600160401b0381111561072a5761072a61064d565b61073d601f8201601f191660200161068b565b81815286602083850101111561075257600080fd5b816020840160208301376000602083830101528093505050509250929050565b60006020828403121561078457600080fd5b5051919050565b602081526000825180602084015260005b818110156107b9576020818601810151604086840101520161079c565b506000604082850101526040601f19601f83011684010191505092915050565b600060a08284031280156107ec57600080fd5b5060006107f7610663565b835181526020808501519082015260408085015190820152606084015163ffffffff81168114610825578283fd5b60608201526080840151600381900b811461083e578283fd5b6080820152949350505050565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810360008312801583831316838312821617156108a2576108a261086c565b5092915050565b80820182811260008312801582168215821617156108c9576108c961086c565b505092915050565b6001815b600184111561090c578085048111156108f0576108f061086c565b60018416156108fe57908102905b60019390931c9280026108d5565b935093915050565b6000826109235750600161056d565b816109305750600061056d565b816001811461094657600281146109505761096c565b600191505061056d565b60ff8411156109615761096161086c565b50506001821b61056d565b5060208310610133831016604e8410600b841016171561098f575081810a61056d565b61099c60001984846108d1565b80600019048211156109b0576109b061086c565b029392505050565b60006109c48383610914565b9392505050565b808202811582820484141761056d5761056d61086c56fea264697066735822122066c8bc297fc58c5114440eb467f4ed6f0c0678cbfa5d2a2ff2f0b4628fff148d64736f6c634300081d0033";

type EdgeDataStreamProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EdgeDataStreamProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EdgeDataStreamProvider__factory extends ContractFactory {
  constructor(...args: EdgeDataStreamProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _dataStore: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<EdgeDataStreamProvider> {
    return super.deploy(
      _dataStore,
      _oracle,
      _verifier,
      overrides || {}
    ) as Promise<EdgeDataStreamProvider>;
  }
  override getDeployTransaction(
    _dataStore: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _dataStore,
      _oracle,
      _verifier,
      overrides || {}
    );
  }
  override attach(address: string): EdgeDataStreamProvider {
    return super.attach(address) as EdgeDataStreamProvider;
  }
  override connect(signer: Signer): EdgeDataStreamProvider__factory {
    return super.connect(signer) as EdgeDataStreamProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EdgeDataStreamProviderInterface {
    return new utils.Interface(_abi) as EdgeDataStreamProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EdgeDataStreamProvider {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EdgeDataStreamProvider;
  }
}
