// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MultichainOrderRouterUtils,
  MultichainOrderRouterUtilsInterface,
} from "../../../contracts/multichain/MultichainOrderRouterUtils";

const _abi = [
  {
    inputs: [],
    name: "UnableToPayOrderFee",
    type: "error",
  },
  {
    inputs: [],
    name: "UnableToPayOrderFeeFromCollateral",
    type: "error",
  },
] as const;

const _bytecode =
  "0x61184161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806355721c4f1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610edc565b61005c565b005b845160009073__$97f16f82bae4ac682deb2ea1417bfd757e$__906305d0f9ba908661008b60608a018a610fc9565b610099906020810190610fe9565b60405160e085901b6001600160e01b03191681526001600160a01b03938416600482015291831660248301529091166044820152606401602060405180830381865af41580156100ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610111919061100d565b90506101206060860186610fc9565b6020013581106101305750610abf565b855160405163fdfc26f360e01b815260009173__$9dcb75ef0bb6c4288f2ccffe7dc492c4eb$__9163fdfc26f39161016c918790600401611026565b600060405180830381865af4158015610189573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101b19190810190611275565b90506101bb610cb5565b826101c96060890189610fc9565b602001356101d791906113d0565b81526101e66060880188610fc9565b6101f4906020810190610fe9565b6001600160a01b0316610209835160c0015190565b6001600160a01b0316148015610248575061022e61022983602001515190565b610ac6565b80610248575061024861024383602001515190565b610b1c565b156104fb57600061025e83602001516060015190565b905080156104f95781516000908211610277578161027a565b82515b9050808360000181815161028e91906113d0565b90525089516040516001600160a01b039091169063e2a4853a9088906102e8906020016020808252601f908201527f494e495449414c5f434f4c4c41544552414c5f44454c54415f414d4f554e5400604082015260600190565b60405160208183030381529060405280519060200120604051602001610318929190918252602082015260400190565b60405160208183030381529060405280519060200120838561033a91906113d0565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016020604051808303816000875af115801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a1919061100d565b5060a08a01516001600160a01b031663078d3b796103c260608c018c610fc9565b6103d0906020810190610fe9565b6040808e015190516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b15801561042457600080fd5b505af1158015610438573d6000803e3d6000fd5b50508b5160208d015160408e015173__$97f16f82bae4ac682deb2ea1417bfd757e$__94506315ff6d2d935061047160608f018f610fc9565b61047f906020810190610fe9565b8d8d6040518763ffffffff1660e01b81526004016104a2969594939291906113f1565b602060405180830381865af41580156104bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e3919061100d565b5082516000036104f7575050505050610abf565b505b505b61050a61024383602001515190565b15610528576040516368fb0fed60e01b815260040160405180910390fd5b600061059561053684515190565b845160a00151855160c00151604087015151604080516001600160a01b039586166020808301919091529486168183015292909416606083015215156080808301919091528351808303909101815260a0909101909252815191012090565b895160405163fdfc26f360e01b815291925060009173__$3d31b232fb363902662fbc281b11ab3357$__9163fdfc26f3916105d591908690600401611026565b6101e060405180830381865af41580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611477565b905061062581516040015190565b6001600160a01b031661063b60608b018b610fc9565b610649906020810190610fe9565b6001600160a01b031614610670576040516368fb0fed60e01b815260040160405180910390fd5b60208101516040015160608401819052835111156106a157604051636f13f31360e11b815260040160405180910390fd5b825160608401516106c0916106b5916113d0565b602083015160400152565b89600001516001600160a01b031663e2a4853a836040516020016107099060208082526011908201527010d3d31310551154905317d05353d55395607a1b604082015260600190565b60405160208183030381529060405280519060200120604051602001610739929190918252602082015260400190565b604051602081830303815290604052805190602001208560000151866060015161076391906113d0565b6040516001600160e01b031960e085901b168152600481019290925260248201526044016020604051808303816000875af11580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca919061100d565b508951845160a0015160405163a8d8fff560e01b815273__$ff439aa65a80c9eec648f15db20b189505$__9263a8d8fff59261080892600401611590565b608060405180830381865af4158015610825573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084991906115aa565b608084015260608a01518a516108e5919073__$ff439aa65a80c9eec648f15db20b189505$__9063a8d8fff590610882895160a0015190565b6040518363ffffffff1660e01b815260040161089f929190611590565b608060405180830381865af41580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e091906115aa565b610b3f565b60a084018190528a516080808d01519086015160405163d7e3321160e01b815273__$91a1a7f12f728c8759f4be979bae55555f$__9463d7e332119461093994909390928892906001908190600401611654565b60006040518083038186803b15801561095157600080fd5b505af4158015610965573d6000803e3d6000fd5b50505050610975845160a0015190565b6001600160a01b0316632fb1260561099060608c018c610fc9565b61099e906020810190610fe9565b60408d8101518751915160e085901b6001600160e01b03191681526001600160a01b03938416600482015292166024830152604482015260006064820152608401600060405180830381600087803b1580156109f957600080fd5b505af1158015610a0d573d6000803e3d6000fd5b50508b5160208d015160408e015173__$97f16f82bae4ac682deb2ea1417bfd757e$__94506315ff6d2d9350610a4660608f018f610fc9565b610a54906020810190610fe9565b8d8d6040518763ffffffff1660e01b8152600401610a77969594939291906113f1565b602060405180830381865af4158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab8919061100d565b5050505050505b5050505050565b60006002826008811115610adc57610adc611793565b1480610af957506003826008811115610af757610af7611793565b145b80610b16575060085b826008811115610b1457610b14611793565b145b92915050565b600080826008811115610b3157610b31611793565b1480610b1657506001610b02565b610b47610d3d565b6040518060600160405280846001600160a01b0316635dcf719485602001516040518263ffffffff1660e01b8152600401610b8291906117a9565b6040805180830381865afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc291906117bd565b8152602001846001600160a01b0316635dcf719485604001516040518263ffffffff1660e01b8152600401610bf791906117a9565b6040805180830381865afa158015610c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3791906117bd565b8152602001846001600160a01b0316635dcf719485606001516040518263ffffffff1660e01b8152600401610c6c91906117a9565b6040805180830381865afa158015610c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cac91906117bd565b90529392505050565b6040518060c0016040528060008152602001600081526020016000815260200160008152602001610d2b604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b8152602001610d38610d3d565b905290565b6040518060600160405280610d50610d66565b8152602001610d5d610d66565b8152602001610d385b604051806040016040528060008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610db857610db8610d80565b60405290565b60405161018081016001600160401b0381118282101715610db857610db8610d80565b604051608081016001600160401b0381118282101715610db857610db8610d80565b60405161010081016001600160401b0381118282101715610db857610db8610d80565b604051606081016001600160401b0381118282101715610db857610db8610d80565b60405161016081016001600160401b0381118282101715610db857610db8610d80565b604051601f8201601f191681016001600160401b0381118282101715610e9357610e93610d80565b604052919050565b6001600160a01b0381168114610eb057600080fd5b50565b60006101008284031215610ec657600080fd5b50919050565b8035610ed781610e9b565b919050565b6000806000806000858703610140811215610ef657600080fd5b60c0811215610f0457600080fd5b50610f0d610d96565b8635610f1881610e9b565b81526020870135610f2881610e9b565b60208201526040870135610f3b81610e9b565b60408201526060870135610f4e81610e9b565b60608201526080870135610f6181610e9b565b608082015260a0870135610f7481610e9b565b60a0820152945060c08601356001600160401b03811115610f9457600080fd5b610fa088828901610eb3565b945050610faf60e08701610ecc565b949793965093946101008101359450610120013592915050565b60008235605e19833603018112610fdf57600080fd5b9190910192915050565b600060208284031215610ffb57600080fd5b813561100681610e9b565b9392505050565b60006020828403121561101f57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b8051610ed781610e9b565b60006001600160401b0382111561106357611063610d80565b5060051b60200190565b600082601f83011261107e57600080fd5b8151602061109361108e8361104a565b610e6b565b82815260059290921b840181019181810190868411156110b257600080fd5b8286015b848110156110d65780516110c981610e9b565b83529183019183016110b6565b509695505050505050565b805160098110610ed757600080fd5b805160038110610ed757600080fd5b6000610180828403121561111257600080fd5b61111a610dbe565b9050611125826110e1565b8152611133602083016110f0565b602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e082015261010080830151818301525061012080830151818301525061014080830151818301525061016080830151818301525092915050565b80518015158114610ed757600080fd5b6000608082840312156111cc57600080fd5b6111d4610de1565b90506111df826111aa565b81526111ed602083016111aa565b60208201526111fe604083016111aa565b604082015261120f606083016111aa565b606082015292915050565b600082601f83011261122b57600080fd5b8151602061123b61108e8361104a565b82815260059290921b8401810191818101908684111561125a57600080fd5b8286015b848110156110d6578051835291830191830161125e565b60006020828403121561128757600080fd5b81516001600160401b038082111561129e57600080fd5b9083019061024082860312156112b357600080fd5b6112bb610de1565b8251828111156112ca57600080fd5b830161010081880312156112dd57600080fd5b6112e5610e03565b6112ee8261103f565b81526112fc6020830161103f565b602082015261130d6040830161103f565b604082015261131e6060830161103f565b606082015261132f6080830161103f565b608082015261134060a0830161103f565b60a082015261135160c0830161103f565b60c082015260e08201518481111561136857600080fd5b6113748982850161106d565b60e08301525082525061138a86602085016110ff565b602082015261139d866101a085016111ba565b6040820152610220830151828111156113b557600080fd5b6113c18782860161121a565b60608301525095945050505050565b81810381811115610b1657634e487b7160e01b600052601160045260246000fd5b6001600160a01b039687168152948616602086015292851660408501529084166060840152909216608082015260a081019190915260c00190565b60006020828403121561143e57600080fd5b604051602081016001600160401b038111828210171561146057611460610d80565b60405290508061146f836111aa565b905292915050565b60008183036101e081121561148b57600080fd5b611493610e26565b60608212156114a157600080fd5b6114a9610e26565b84516114b481610e9b565b815260208501516114c481610e9b565b602082015260408501516114d781610e9b565b60408201528152610160605f1983018113156114f257600080fd5b6114fa610e48565b9250606085015183526080850151602084015260a0850151604084015260c0850151606084015260e085015160808401526101008086015160a08501526101208087015160c08601526101408088015160e08701528388015183870152610180880151828701526101a08801518187015250505050816020820152611583856101c0860161142c565b6040820152949350505050565b6001600160a01b0392831681529116602082015260400190565b6000608082840312156115bc57600080fd5b6115c4610de1565b82516115cf81610e9b565b815260208301516115df81610e9b565b602082015260408301516115f281610e9b565b6040820152606083015161160581610e9b565b60608201529392505050565b61162682825180518252602090810151910152565b602081810151805160408501529081015160608401525060400151805160808301526020015160a090910152565b60006103a08201905060018060a01b03808a1683528089166020840152875181815116604085015281602082015116606085015281604082015116608085015250506020870151805160a0840152602081015160c0840152604081015160e08401526060810151610100818186015260808301519150610120828187015260a08401519250610140838188015260c085015161016088015260e0850151610180880152828501516101a0880152818501516101c0880152808501516101e08801525050505050604087015161172f6102008401825115159052565b5085516001600160a01b0390811661022084015260208701518116610240840152604087015181166102608401526060870151166102808301526117776102a0830186611611565b9215156103608201529015156103809091015295945050505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0391909116815260200190565b6000604082840312156117cf57600080fd5b604080519081016001600160401b03811182821017156117f1576117f1610d80565b60405282518152602092830151928101929092525091905056fea26469706673582212209d2812cb16bfcbc1317a79cc07b0cf16a9c0617ede1a5307ed9b15907435157764736f6c63430008140033";

type MultichainOrderRouterUtilsConstructorParams =
  | [
      linkLibraryAddresses: MultichainOrderRouterUtilsLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultichainOrderRouterUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MultichainOrderRouterUtils__factory extends ContractFactory {
  constructor(...args: MultichainOrderRouterUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MultichainOrderRouterUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MultichainOrderRouterUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$97f16f82bae4ac682deb2ea1417bfd757e\$__", "g"),
      linkLibraryAddresses[
        "contracts/multichain/MultichainUtils.sol:MultichainUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$9dcb75ef0bb6c4288f2ccffe7dc492c4eb\$__", "g"),
      linkLibraryAddresses[
        "contracts/order/OrderStoreUtils.sol:OrderStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$3d31b232fb363902662fbc281b11ab3357\$__", "g"),
      linkLibraryAddresses[
        "contracts/position/PositionStoreUtils.sol:PositionStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$ff439aa65a80c9eec648f15db20b189505\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$91a1a7f12f728c8759f4be979bae55555f\$__", "g"),
      linkLibraryAddresses["contracts/position/PositionUtils.sol:PositionUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultichainOrderRouterUtils> {
    return super.deploy(overrides || {}) as Promise<MultichainOrderRouterUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultichainOrderRouterUtils {
    return super.attach(address) as MultichainOrderRouterUtils;
  }
  override connect(signer: Signer): MultichainOrderRouterUtils__factory {
    return super.connect(signer) as MultichainOrderRouterUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultichainOrderRouterUtilsInterface {
    return new utils.Interface(_abi) as MultichainOrderRouterUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultichainOrderRouterUtils {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultichainOrderRouterUtils;
  }
}

export interface MultichainOrderRouterUtilsLibraryAddresses {
  ["contracts/multichain/MultichainUtils.sol:MultichainUtils"]: string;
  ["contracts/order/OrderStoreUtils.sol:OrderStoreUtils"]: string;
  ["contracts/position/PositionStoreUtils.sol:PositionStoreUtils"]: string;
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
  ["contracts/position/PositionUtils.sol:PositionUtils"]: string;
}
