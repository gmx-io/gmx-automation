/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IMultichainProvider,
  IMultichainProviderInterface,
} from "../../../contracts/multichain/IMultichainProvider";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct IMultichainProvider.BridgeOutParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "bridgeOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMultichainProvider__factory {
  static readonly abi = _abi;
  static createInterface(): IMultichainProviderInterface {
    return new utils.Interface(_abi) as IMultichainProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMultichainProvider {
    return new Contract(address, _abi, signerOrProvider) as IMultichainProvider;
  }
}
