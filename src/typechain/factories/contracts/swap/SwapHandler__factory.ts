// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SwapHandler,
  SwapHandlerInterface,
} from "../../../contracts/swap/SwapHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
      {
        internalType: "string",
        name: "role",
        type: "string",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract DataStore",
            name: "dataStore",
            type: "address",
          },
          {
            internalType: "contract EventEmitter",
            name: "eventEmitter",
            type: "address",
          },
          {
            internalType: "contract IOracle",
            name: "oracle",
            type: "address",
          },
          {
            internalType: "contract Bank",
            name: "bank",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "marketToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "indexToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "longToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "shortToken",
                type: "address",
              },
            ],
            internalType: "struct Market.Props[]",
            name: "swapPathMarkets",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "minOutputAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "uiFeeReceiver",
            type: "address",
          },
          {
            internalType: "bool",
            name: "shouldUnwrapNativeToken",
            type: "bool",
          },
          {
            internalType: "enum ISwapPricingUtils.SwapPricingType",
            name: "swapPricingType",
            type: "uint8",
          },
        ],
        internalType: "struct ISwapUtils.SwapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b506040516108cd3803806108cd833981016040819052602c916041565b60016000556001600160a01b0316608052606f565b600060208284031215605257600080fd5b81516001600160a01b0381168114606857600080fd5b9392505050565b60805161083d61009060003960008181606a015261021d015261083d6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631e5e6a791461003b5780634a4a7b0414610065575b600080fd5b61004e61004936600461047b565b6100a4565b60405161005c9291906105b8565b60405180910390f35b61008c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161005c565b6000806100af6101a8565b61011e6040516020016100e0906020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b604051602081830303815290604052805190602001206040518060400160405280600a81526020016921a7a72a2927a62622a960b11b815250610206565b604051633eade77f60e11b815273__$2ebd8d293950cf319742e0db402ead4961$__90637d5bcefe90610155908690600401610664565b6040805180830381865af4158015610171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101959190610758565b915091506101a36001600055565b915091565b6002600054036101ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b60405163ac4ab3fb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ac4ab3fb9061025490339086906004016105b8565b602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102959190610786565b6102b657338160405163a35b150b60e01b81526004016101f69291906107aa565b5050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156102f2576102f26102ba565b60405290565b6040516101a081016001600160401b03811182821017156102f2576102f26102ba565b604051601f8201601f191681016001600160401b0381118282101715610343576103436102ba565b604052919050565b6001600160a01b038116811461036057600080fd5b50565b803561036e8161034b565b919050565b600082601f83011261038457600080fd5b81356001600160401b0381111561039d5761039d6102ba565b6103ac60208260051b0161031b565b8082825260208201915060208360071b8601019250858311156103ce57600080fd5b602085015b8381101561044957608081880312156103eb57600080fd5b6103f36102d0565b81356103fe8161034b565b8152602082013561040e8161034b565b602082015260408201356104218161034b565b604082015260608201356104348161034b565b606082015283526020909201916080016103d3565b5095945050505050565b801515811461036057600080fd5b803561036e81610453565b80356006811061036e57600080fd5b60006020828403121561048d57600080fd5b81356001600160401b038111156104a357600080fd5b82016101a081850312156104b657600080fd5b6104be6102f8565b6104c782610363565b81526104d560208301610363565b60208201526104e660408301610363565b60408201526104f760608301610363565b60608201526080828101359082015261051260a08301610363565b60a082015260c0828101359082015260e08201356001600160401b0381111561053a57600080fd5b61054686828501610373565b60e08301525061010082810135908201526105646101208301610363565b6101208201526105776101408301610363565b61014082015261058a6101608301610461565b61016082015261059d610180830161046c565b610180820152949350505050565b6001600160a01b03169052565b6001600160a01b03929092168252602082015260400190565b600081518084526020840193506020830160005b8281101561063857815180516001600160a01b0390811688526020808301518216818a01526040808401518316908a015260609283015190911691880191909152608090960195909101906001016105e5565b5093949350505050565b6006811061066057634e487b7160e01b600052602160045260246000fd5b9052565b602081526106766020820183516105ab565b6000602083015161068a60408401826105ab565b50604083015161069d60608401826105ab565b5060608301516106b060808401826105ab565b50608083015160a083015260a08301516106cd60c08401826105ab565b5060c083015160e083015260e08301516101a06101008401526106f46101c08401826105d1565b90506101008401516101208401526101208401516107166101408501826105ab565b5061014084015161072b6101608501826105ab565b50610160840151801515610180850152506101808401516107506101a0850182610642565b509392505050565b6000806040838503121561076b57600080fd5b82516107768161034b565b6020939093015192949293505050565b60006020828403121561079857600080fd5b81516107a381610453565b9392505050565b60018060a01b0383168152604060208201526000825180604084015260005b818110156107e657602081860181015160608684010152016107c9565b506000606082850101526060601f19601f830116840101915050939250505056fea26469706673582212205700a1166a9be6256a13e7713b708d5f133f8db6ed83a8a7b0e163f86883ef4564736f6c634300081d0033";

type SwapHandlerConstructorParams =
  | [linkLibraryAddresses: SwapHandlerLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SwapHandler__factory extends ContractFactory {
  constructor(...args: SwapHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SwapHandler__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SwapHandlerLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$2ebd8d293950cf319742e0db402ead4961\$__", "g"),
      linkLibraryAddresses["contracts/swap/SwapUtils.sol:SwapUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _roleStore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapHandler> {
    return super.deploy(_roleStore, overrides || {}) as Promise<SwapHandler>;
  }
  override getDeployTransaction(
    _roleStore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_roleStore, overrides || {});
  }
  override attach(address: string): SwapHandler {
    return super.attach(address) as SwapHandler;
  }
  override connect(signer: Signer): SwapHandler__factory {
    return super.connect(signer) as SwapHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapHandlerInterface {
    return new utils.Interface(_abi) as SwapHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapHandler {
    return new Contract(address, _abi, signerOrProvider) as SwapHandler;
  }
}

export interface SwapHandlerLibraryAddresses {
  ["contracts/swap/SwapUtils.sol:SwapUtils"]: string;
}
