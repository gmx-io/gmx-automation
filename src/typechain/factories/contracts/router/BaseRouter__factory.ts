// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BaseRouter,
  BaseRouterInterface,
} from "../../../contracts/router/BaseRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Router",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
      {
        internalType: "contract EventEmitter",
        name: "_eventEmitter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EmptyHoldingAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "EmptyTokenTranferGasLimit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "returndata",
        type: "bytes",
      },
    ],
    name: "TokenTransferReverted",
    type: "event",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eventEmitter",
    outputs: [
      {
        internalType: "contract EventEmitter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "contract Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendNativeToken",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendWnt",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516110cd3803806110cd8339810160408190526100309161006f565b60016000556001600160a01b0392831660805292821660a052811660c0521660e0526100ce565b6001600160a01b038116811461006c57600080fd5b50565b6000806000806080858703121561008557600080fd5b845161009081610057565b60208601519094506100a181610057565b60408601519093506100b281610057565b60608601519092506100c381610057565b939692955090935050565b60805160a05160c05160e051610fb361011a600039600061012801526000818160e1015281816101c7015261021101526000818161018f01526103920152600060820152610fb36000f3fe60806040526004361061006b5760003560e01c80634a4a7b041461007057806353ead2d3146100ba578063660d0d67146100cf5780637d39aaf1146101035780639ff78c3014610116578063ac9650d81461014a578063e6d66ac81461016a578063f887ea401461017d575b600080fd5b34801561007c57600080fd5b506100a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516100b19190610bcf565b60405180910390f35b6100cd6100c8366004610bf8565b6101b1565b005b3480156100db57600080fd5b506100a47f000000000000000000000000000000000000000000000000000000000000000081565b6100cd610111366004610bf8565b6101fb565b34801561012257600080fd5b506100a47f000000000000000000000000000000000000000000000000000000000000000081565b61015d610158366004610c24565b610237565b6040516100b19190610ce9565b6100cd610178366004610d4e565b61034a565b34801561018957600080fd5b506100a47f000000000000000000000000000000000000000000000000000000000000000081565b6101b9610400565b6101c28261045e565b6101ed7f00000000000000000000000000000000000000000000000000000000000000008383610488565b6101f76001600055565b5050565b610203610400565b61020c8261045e565b6101ed7f00000000000000000000000000000000000000000000000000000000000000008383610594565b6060816001600160401b0381111561025157610251610d8f565b60405190808252806020026020018201604052801561028457816020015b606081526020019060019003908161026f5790505b50905060005b8281101561034357600080308686858181106102a8576102a8610da5565b90506020028101906102ba9190610dbb565b6040516102c8929190610e08565b600060405180830381855af49150503d8060008114610303576040519150601f19603f3d011682016040523d82523d6000602084013e610308565b606091505b50915091508161031b5761031b8161061d565b8084848151811061032e5761032e610da5565b6020908102919091010152505060010161028a565b5092915050565b610352610400565b61035b8261045e565b6040516303704f0f60e31b81526001600160a01b0384811660048301523360248301819052848216604484015260648301849052917f000000000000000000000000000000000000000000000000000000000000000090911690631b82787890608401600060405180830381600087803b1580156103d857600080fd5b505af11580156103ec573d6000803e3d6000fd5b50505050506103fb6001600055565b505050565b6002600054036104575760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6001600160a01b0381166104855760405163d551823d60e01b815260040160405180910390fd5b50565b8060000361049557505050565b61049e8261045e565b6000836001600160a01b031663bd02d0f56040516020016104f0906020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161052491815260200190565b602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190610e18565b90506000806000806000868887f190508015610582575050505050565b61058d858585610594565b5050505050565b806000036105a157505050565b6105aa8261045e565b60006105b584610656565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105f257600080fd5b505af1158015610606573d6000803e3d6000fd5b505050505061061784828585610709565b50505050565b60008061062983610953565b91509150801561064d578160405162461bcd60e51b815260040161044e9190610e31565b6103fb836109e3565b6000816001600160a01b03166321f8a72160405160200161068e9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016106c291815260200190565b602060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190610e4b565b92915050565b8015610617576107188261045e565b6000846001600160a01b031663bd02d0f5610732866109ec565b6040518263ffffffff1660e01b815260040161075091815260200190565b602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190610e18565b9050806000036107b65783604051634fe14bfd60e11b815260040161044e9190610bcf565b60006107c485858585610a74565b50905080156107d4575050610617565b6000866001600160a01b03166321f8a721604051602001610818906020808252600f908201526e484f4c44494e475f4144445245535360881b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161084c91815260200190565b602060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088d9190610e4b565b90506001600160a01b0381166108b657604051633a6de2f560e21b815260040160405180910390fd5b6000806108c588848888610a74565b9150915081156108d9575050505050610617565b60006108e482610953565b5090507fc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae8183604051610918929190610e68565b60405180910390a160405163012f3b8f60e71b81526001600160a01b03808b166004830152891660248201526044810188905260640161044e565b6060600060448351101561097a575050604080516020810190915260008082529092909150565b6000610987846020015190565b90506307b9e43360e51b6001600160e01b03198216016109c657600484019350838060200190518101906109bb9190610e96565b946001945092505050565b600060405180602001604052806000815250909250925050915091565b80518060208301fd5b6000604051602001610a2a906020808252601890820152771513d2d15397d514905394d1915497d1d054d7d31253525560421b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b604080516001600160a01b038581166024830152604480830186905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000926060929184918291908a16908790610ad9908690610f3f565b60006040518083038160008787f1925050503d8060008114610b17576040519150601f19603f3d011682016040523d82523d6000602084013e610b1c565b606091505b50915091508115610bbd578051600003610b7a576001600160a01b0389163b610b7a5760006040518060400160405280601481526020017310d85b1b081d1bc81b9bdb8b58dbdb9d1c9858dd60621b81525094509450505050610bc6565b60008151118015610b9c575080806020019051810190610b9a9190610f5b565b155b15610baf57600094509250610bc6915050565b600194509250610bc6915050565b60009450925050505b94509492505050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461048557600080fd5b60008060408385031215610c0b57600080fd5b8235610c1681610be3565b946020939093013593505050565b60008060208385031215610c3757600080fd5b82356001600160401b03811115610c4d57600080fd5b8301601f81018513610c5e57600080fd5b80356001600160401b03811115610c7457600080fd5b8560208260051b8401011115610c8957600080fd5b6020919091019590945092505050565b60005b83811015610cb4578181015183820152602001610c9c565b50506000910152565b60008151808452610cd5816020860160208601610c99565b601f01601f19169290920160200192915050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015610d4257603f19878603018452610d2d858351610cbd565b94506020938401939190910190600101610d11565b50929695505050505050565b600080600060608486031215610d6357600080fd5b8335610d6e81610be3565b92506020840135610d7e81610be3565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610dd257600080fd5b8301803591506001600160401b03821115610dec57600080fd5b602001915036819003821315610e0157600080fd5b9250929050565b8183823760009101908152919050565b600060208284031215610e2a57600080fd5b5051919050565b602081526000610e446020830184610cbd565b9392505050565b600060208284031215610e5d57600080fd5b8151610e4481610be3565b604081526000610e7b6040830185610cbd565b8281036020840152610e8d8185610cbd565b95945050505050565b600060208284031215610ea857600080fd5b81516001600160401b03811115610ebe57600080fd5b8201601f81018413610ecf57600080fd5b80516001600160401b03811115610ee857610ee8610d8f565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610f1657610f16610d8f565b604052818152828201602001861015610f2e57600080fd5b610e8d826020830160208601610c99565b60008251610f51818460208701610c99565b9190910192915050565b600060208284031215610f6d57600080fd5b81518015158114610e4457600080fdfea2646970667358221220ad89b4bef839b5591403b6f847f10b2a01bca5912919229e21078d149995983864736f6c634300081d0033";

type BaseRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseRouter__factory extends ContractFactory {
  constructor(...args: BaseRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _router: PromiseOrValue<string>,
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseRouter> {
    return super.deploy(
      _router,
      _roleStore,
      _dataStore,
      _eventEmitter,
      overrides || {}
    ) as Promise<BaseRouter>;
  }
  override getDeployTransaction(
    _router: PromiseOrValue<string>,
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _router,
      _roleStore,
      _dataStore,
      _eventEmitter,
      overrides || {}
    );
  }
  override attach(address: string): BaseRouter {
    return super.attach(address) as BaseRouter;
  }
  override connect(signer: Signer): BaseRouter__factory {
    return super.connect(signer) as BaseRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseRouterInterface {
    return new utils.Interface(_abi) as BaseRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseRouter {
    return new Contract(address, _abi, signerOrProvider) as BaseRouter;
  }
}
