/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  SubaccountRouterUtils,
  SubaccountRouterUtilsInterface,
} from "../../../../contracts/router/relay/SubaccountRouterUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "DisabledFeature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cancellationReceiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "expectedCancellationReceiver",
        type: "address",
      },
    ],
    name: "InvalidCancellationReceiverForSubaccountOrder",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "storedNonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "InvalidSubaccountApprovalNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSubaccountApprovalSubaccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "SubaccountApprovalDeadlinePassed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "receiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "cancellationReceiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "callbackContract",
                type: "address",
              },
              {
                internalType: "address",
                name: "uiFeeReceiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "market",
                type: "address",
              },
              {
                internalType: "address",
                name: "initialCollateralToken",
                type: "address",
              },
              {
                internalType: "address[]",
                name: "swapPath",
                type: "address[]",
              },
            ],
            internalType: "struct IBaseOrderUtils.CreateOrderParamsAddresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "sizeDeltaUsd",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "initialCollateralDeltaAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggerPrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "acceptablePrice",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "executionFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "callbackGasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minOutputAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "validFromTime",
                type: "uint256",
              },
            ],
            internalType: "struct IBaseOrderUtils.CreateOrderParamsNumbers",
            name: "numbers",
            type: "tuple",
          },
          {
            internalType: "enum Order.OrderType",
            name: "orderType",
            type: "Order.OrderType",
          },
          {
            internalType: "enum Order.DecreasePositionSwapType",
            name: "decreasePositionSwapType",
            type: "Order.DecreasePositionSwapType",
          },
          {
            internalType: "bool",
            name: "isLong",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "shouldUnwrapNativeToken",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "autoCancel",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "referralCode",
            type: "bytes32",
          },
          {
            internalType: "bytes32[]",
            name: "dataList",
            type: "bytes32[]",
          },
        ],
        internalType: "struct IBaseOrderUtils.CreateOrderParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "validateCreateOrderParams",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610b0361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80634c3ffd5714610045578063b7ef9ffc14610067575b600080fd5b81801561005157600080fd5b5061006561006036600461070d565b61007a565b005b6100656100753660046107b9565b6101af565b61008c88610087306102d2565b61035d565b60405163f7b4e61960e01b81526001600160a01b03808a16600483015280881660248301528616604482015273__$cd9cbb3e1d35f471855f1a1916300c2072$__9063f7b4e6199060640160006040518083038186803b1580156100ef57600080fd5b505af4158015610103573d6000803e3d6000fd5b505050506101148888888585610388565b604051631bbb493d60e31b81526001600160a01b03808a16600483015280891660248301528088166044830152861660648201526084810185905260a4810184905273__$cd9cbb3e1d35f471855f1a1916300c2072$__9063ddda49e89060c40160006040518083038186803b15801561018d57600080fd5b505af41580156101a1573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b0382166101c38280610810565b6101d1906020810190610830565b6001600160a01b031614610221576101e98180610810565b6101f7906020810190610830565b604051639cfea58360e01b81526001600160a01b0390911660048201526024015b60405180910390fd5b600061022d8280610810565b61023e906040810190602001610830565b6001600160a01b03161415801561028157506001600160a01b0382166102648280610810565b610275906040810190602001610830565b6001600160a01b031614155b156102ce576102908180610810565b6102a1906040810190602001610830565b60405163225cd96160e21b81526001600160a01b0391821660048201529083166024820152604401610218565b5050565b6000604051602001610313906020808252601b908201527a14d5509050d0d3d5539517d191505515549157d11254d050931151602a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b6103678282610680565b156102ce5760405163dd70e0c960e01b815260048101829052602401610218565b610396610100830183610854565b1590506106795760006103ac6020840184610830565b6001600160a01b0316036103d35760405163545e8f2b60e01b815260040160405180910390fd5b8160c00135421115610404576040516313012da760e11b815242600482015260c08301356024820152604401610218565b6001600160a01b03831660009081526020829052604090205460a0830135811461044e57604051633044992f60e01b81526004810182905260a08401356024820152604401610218565b6104598160016108a1565b6001600160a01b038516600090815260208490526040808220929092559051638a3b3d6f60e01b815246600482015273__$e8eac12d00fdb3e93794499b0cb727dd34$__90638a3b3d6f90602401602060405180830381865af41580156104c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e891906108c2565b9050600073__$e8eac12d00fdb3e93794499b0cb727dd34$__63db1ba349866040518263ffffffff1660e01b815260040161052391906109ff565b602060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906108c2565b9050600061058c838360405161190160f01b8152600281019290925260228201526042902090565b905073__$e8eac12d00fdb3e93794499b0cb727dd34$__635f7bdb62826105b76101008a018a610854565b8b6040518563ffffffff1660e01b81526004016105d79493929190610a12565b60006040518083038186803b1580156105ef57600080fd5b505af4158015610603573d6000803e3d6000fd5b5050604051630c62de5b60e11b815273__$cd9cbb3e1d35f471855f1a1916300c2072$__92506318c5bcb69150610644908c908c908c908c90600401610a72565b60006040518083038186803b15801561065c57600080fd5b505af4158015610670573d6000803e3d6000fd5b50505050505050505b5050505050565b604051633d70e7e560e11b8152600481018290526000906001600160a01b03841690637ae1cfca90602401602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190610ab0565b90505b92915050565b6001600160a01b038116811461070a57600080fd5b50565b600080600080600080600080610100898b03121561072a57600080fd5b8835610735816106f5565b97506020890135610745816106f5565b96506040890135610755816106f5565b95506060890135610765816106f5565b94506080890135935060a0890135925060c08901356001600160401b0381111561078e57600080fd5b8901610120818c0312156107a157600080fd5b8092505060e089013590509295985092959890939650565b600080604083850312156107cc57600080fd5b82356107d7816106f5565b915060208301356001600160401b038111156107f257600080fd5b8301610200818603121561080557600080fd5b809150509250929050565b6000823560de1983360301811261082657600080fd5b9190910192915050565b60006020828403121561084257600080fd5b813561084d816106f5565b9392505050565b6000808335601e1984360301811261086b57600080fd5b8301803591506001600160401b0382111561088557600080fd5b60200191503681900382131561089a57600080fd5b9250929050565b808201808211156106ef57634e487b7160e01b600052601160045260246000fd5b6000602082840312156108d457600080fd5b5051919050565b801515811461070a57600080fd5b80356108f4816108db565b919050565b6000808335601e1984360301811261091057600080fd5b83016020810192503590506001600160401b0381111561092f57600080fd5b80360382131561089a57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101208235610977816106f5565b6001600160a01b0316845261098e602084016108e9565b80151560208601525060408301356040850152606083013560608501526080830135608085015260a083013560a085015260c083013560c085015260e083013560e08501526101006109e2818501856108f9565b83838801526109f4848801828461093e565b979650505050505050565b6020815260006106ec6020830184610967565b848152608060208201526000610a2c60808301858761093e565b60018060a01b0384166040840152828103606084015260138152721cdd589858d8dbdd5b9d08185c1c1c9bdd985b606a1b60208201526040810191505095945050505050565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090610aa690830184610967565b9695505050505050565b600060208284031215610ac257600080fd5b815161084d816108db56fea26469706673582212203ab7d620cfd585d3c998918b8b870328b0037c57cd9faa1bb1f275b4e06e6c8f64736f6c63430008140033";

type SubaccountRouterUtilsConstructorParams =
  | [
      linkLibraryAddresses: SubaccountRouterUtilsLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubaccountRouterUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SubaccountRouterUtils__factory extends ContractFactory {
  constructor(...args: SubaccountRouterUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SubaccountRouterUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SubaccountRouterUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$cd9cbb3e1d35f471855f1a1916300c2072\\$__", "g"),
      linkLibraryAddresses[
        "contracts/subaccount/SubaccountUtils.sol:SubaccountUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e8eac12d00fdb3e93794499b0cb727dd34\\$__", "g"),
      linkLibraryAddresses["contracts/router/relay/RelayUtils.sol:RelayUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SubaccountRouterUtils> {
    return super.deploy(overrides || {}) as Promise<SubaccountRouterUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SubaccountRouterUtils {
    return super.attach(address) as SubaccountRouterUtils;
  }
  override connect(signer: Signer): SubaccountRouterUtils__factory {
    return super.connect(signer) as SubaccountRouterUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubaccountRouterUtilsInterface {
    return new utils.Interface(_abi) as SubaccountRouterUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubaccountRouterUtils {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SubaccountRouterUtils;
  }
}

export interface SubaccountRouterUtilsLibraryAddresses {
  ["contracts/subaccount/SubaccountUtils.sol:SubaccountUtils"]: string;
  ["contracts/router/relay/RelayUtils.sol:RelayUtils"]: string;
}
