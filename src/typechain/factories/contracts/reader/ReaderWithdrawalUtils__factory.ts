/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ReaderWithdrawalUtils,
  ReaderWithdrawalUtilsInterface,
} from "../../../contracts/reader/ReaderWithdrawalUtils";

const _abi = [
  {
    inputs: [],
    name: "EmptyMarketTokenSupply",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "poolValue",
        type: "int256",
      },
    ],
    name: "InvalidPoolValueForWithdrawal",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "marketTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "uiFeeReceiver",
        type: "address",
      },
      {
        internalType: "enum ISwapPricingUtils.SwapPricingType",
        name: "swapPricingType",
        type: "ISwapPricingUtils.SwapPricingType",
      },
    ],
    name: "getWithdrawalAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6111cf61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b027d32d1461003a575b600080fd5b61004d610048366004610ee4565b610066565b6040805192835260208301919091520160405180910390f35b6000806100cd6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600073__$e53db83827f4e07ebc418caf7145b8c2d5$__63f2e2a4f58b8b8b600001518c602001518d6040015160405160200161013b906020808252601e908201527f4d41585f504e4c5f464143544f525f464f525f5749544844524157414c530000604082015260600190565b6040516020818303038152906040528051906020012060006040518863ffffffff1660e01b81526004016101759796959493929190610fb1565b61016060405180830381865af4158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b7919061104c565b905060008160000151136101e95780516040516390a6af3b60e01b815260048101919091526024015b60405180910390fd5b80516101f490610366565b82528851610201906103bc565b60208301526040890151610218908b908b90610426565b6040830152606089015161022f908b908b90610426565b60608301526020808901510151604083015161024b91906110f5565b6080830152604088015160200151606083015161026891906110f5565b60a08301819052608083015161027e919061110c565b60c0830152815160208301516102959189916104cf565b60e08301819052608083015160c08401516102b1929190610505565b61010083015260e082015160a083015160c08401516102d1929190610505565b61012083015260208089015101516101008301516102ef9190611135565b61014083015260408801516020015161012083015161030e9190611135565b610160830152885161014083015160009161032e918d9190848b8b610512565b9050600061034a8c8c6000015186610160015160008c8c610512565b604092830151920151919c919b50909950505050505050505050565b6000808212156103b85760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f73697469766560448201526064016101e0565b5090565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611157565b92915050565b60008061043b84604001518560600151610844565b905080856001600160a01b031663bd02d0f561045b876000015187610873565b6040518263ffffffff1660e01b815260040161047991815260200190565b602060405180830381865afa158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190611157565b6104c49190611135565b9150505b9392505050565b6000816000036104f257604051630bb8f5a760e21b815260040160405180910390fd5b6104fd838584610505565b949350505050565b60006104fd8484846108fb565b61051a610d2c565b610522610d2c565b60008084600581111561053757610537611170565b036105bb57886001600160a01b031663bd02d0f56105558a896109e5565b6040518263ffffffff1660e01b815260040161057391815260200190565b602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190611157565b90506106fc565b60018460058111156105cf576105cf611170565b146106fc5760058460058111156105e8576105e8611170565b0361060557886001600160a01b031663bd02d0f56105558a610a54565b600384600581111561061957610619611170565b0361063757886001600160a01b031663bd02d0f56105558a89610ada565b600484600581111561064b5761064b611170565b0361066957886001600160a01b031663bd02d0f56105558a89610b12565b600284600581111561067d5761067d611170565b036106fc57886001600160a01b031663bd02d0f561069a8a610b4d565b6040518263ffffffff1660e01b81526004016106b891815260200190565b602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f99190611157565b90505b6000896001600160a01b031663bd02d0f56040516020016107499060208082526018908201527729aba0a82fa322a2afa922a1a2a4ab22a92fa320a1aa27a960411b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161077d91815260200190565b602060405180830381865afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190611157565b905060006107cc8984610b8f565b90506107d88183610b8f565b8085526107e59082611186565b60208501526001600160a01b03871660608501526108038b88610ba8565b60808501819052610815908a90610b8f565b60a08501819052610826828b611186565b6108309190611186565b604085015250919998505050505050505050565b6000816001600160a01b0316836001600160a01b031614610866576001610869565b60025b60ff169392505050565b60006040516020016108a4906020808252600b908201526a1413d3d317d05353d5539560aa1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0380861691830191909152831660608201526080015b60405160208183030381529060405280519060200120905092915050565b60008080600019858709858702925082811083820303915050806000036109355783828161092b5761092b61111f565b04925050506104c8565b80841161097c5760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b60448201526064016101e0565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000604051602001610a1a906020808252600f908201526e29aba0a82fa322a2afa320a1aa27a960891b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080016108dd565b6000604051602001610a909060208082526016908201527520aa27a6a4a1afa9aba0a82fa322a2afa320a1aa27a960511b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b6000604051602001610a1a906020808252601290820152712222a827a9a4aa2fa322a2afa320a1aa27a960711b604082015260600190565b6000604051602001610a1a906020808252601590820152742ba4aa24222920aba0a62fa322a2afa320a1aa27a960591b604082015260600190565b6000604051602001610a90906020808252601c908201527b20aa27a6a4a1afaba4aa24222920aba0a62fa322a2afa320a1aa27a960211b604082015260600190565b60006104c8838368327cb2734119d3b7a9601e1b610505565b600080836001600160a01b031663bd02d0f5604051602001610bef9060208082526011908201527026a0ac2faaa4afa322a2afa320a1aa27a960791b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c2391815260200190565b602060405180830381865afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c649190611157565b90506000846001600160a01b031663bd02d0f5610c8086610cf9565b6040518263ffffffff1660e01b8152600401610c9e91815260200190565b602060405180830381865afa158015610cbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdf9190611157565b9050818110610cee5781610cf0565b805b95945050505050565b6000604051602001610a90906020808252600d908201526c2aa4afa322a2afa320a1aa27a960991b604082015260600190565b6040518060c0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6001600160a01b0381168114610d8057600080fd5b50565b604051608081016001600160401b0381118282101715610db357634e487b7160e01b600052604160045260246000fd5b60405290565b60405161016081016001600160401b0381118282101715610db357634e487b7160e01b600052604160045260246000fd5b8035610df581610d6b565b919050565b600060408284031215610e0c57600080fd5b604080519081016001600160401b0381118282101715610e3c57634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060c08284031215610e6857600080fd5b604051606081016001600160401b0381118282101715610e9857634e487b7160e01b600052604160045260246000fd5b604052905080610ea88484610dfa565b8152610eb78460408501610dfa565b6020820152610ec98460808501610dfa565b60408201525092915050565b803560068110610df557600080fd5b6000806000806000808688036101c0811215610eff57600080fd5b8735610f0a81610d6b565b96506080601f1982011215610f1e57600080fd5b50610f27610d83565b6020880135610f3581610d6b565b81526040880135610f4581610d6b565b60208201526060880135610f5881610d6b565b60408201526080880135610f6b81610d6b565b60608201529450610f7f8860a08901610e56565b93506101608701359250610f966101808801610dea565b9150610fa56101a08801610ed5565b90509295509295509295565b60006101a08201905060018060a01b03808a1683528089511660208401528060208a01511660408401528060408a01511660608401528060608a01511660808401525061100b60a083018880518252602090810151910152565b855160e08301526020860151610100830152845161012083015260208501516101408301528361016083015282151561018083015298975050505050505050565b6000610160828403121561105f57600080fd5b611067610db9565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152508091505092915050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610420576104206110df565b80820180821115610420576104206110df565b634e487b7160e01b600052601260045260246000fd5b60008261115257634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561116957600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b81810381811115610420576104206110df56fea2646970667358221220bb05d212f7dcb4130d427bf8a93af9d4bb6eb0d124b188c9473b62ffc5a95eb864736f6c63430008120033";

type ReaderWithdrawalUtilsConstructorParams =
  | [
      linkLibraryAddresses: ReaderWithdrawalUtilsLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReaderWithdrawalUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ReaderWithdrawalUtils__factory extends ContractFactory {
  constructor(...args: ReaderWithdrawalUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ReaderWithdrawalUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ReaderWithdrawalUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e53db83827f4e07ebc418caf7145b8c2d5\\$__", "g"),
      linkLibraryAddresses["contracts/market/MarketUtils.sol:MarketUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReaderWithdrawalUtils> {
    return super.deploy(overrides || {}) as Promise<ReaderWithdrawalUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReaderWithdrawalUtils {
    return super.attach(address) as ReaderWithdrawalUtils;
  }
  override connect(signer: Signer): ReaderWithdrawalUtils__factory {
    return super.connect(signer) as ReaderWithdrawalUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReaderWithdrawalUtilsInterface {
    return new utils.Interface(_abi) as ReaderWithdrawalUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReaderWithdrawalUtils {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReaderWithdrawalUtils;
  }
}

export interface ReaderWithdrawalUtilsLibraryAddresses {
  ["contracts/market/MarketUtils.sol:MarketUtils"]: string;
}
