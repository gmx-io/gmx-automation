// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ReaderPricingUtils,
  ReaderPricingUtilsInterface,
} from "../../../contracts/reader/ReaderPricingUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "DisabledMarket",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "InvalidSwapMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "InvalidTokenIn",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "UnableToGetCachedTokenPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "UnableToGetOppositeToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "positionSizeInUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "positionSizeInTokens",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "sizeDeltaUsd",
        type: "int256",
      },
      {
        internalType: "bool",
        name: "isLong",
        type: "bool",
      },
    ],
    name: "getExecutionPrice",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "priceImpactUsd",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "executionPrice",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "balanceWasImproved",
            type: "bool",
          },
        ],
        internalType: "struct ReaderPricingUtils.ExecutionPriceResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "uiFeeReceiver",
        type: "address",
      },
    ],
    name: "getSwapAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "feeReceiverAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeAmountForPool",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountAfterFees",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "uiFeeReceiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "uiFeeReceiverFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "uiFeeAmount",
            type: "uint256",
          },
        ],
        internalType: "struct SwapPricingUtils.SwapFees",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "min",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "max",
            type: "uint256",
          },
        ],
        internalType: "struct Price.Props",
        name: "tokenInPrice",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "min",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "max",
            type: "uint256",
          },
        ],
        internalType: "struct Price.Props",
        name: "tokenOutPrice",
        type: "tuple",
      },
    ],
    name: "getSwapPriceImpact",
    outputs: [
      {
        internalType: "int256",
        name: "priceImpactUsdBeforeCap",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "priceImpactAmount",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "tokenInPriceImpactAmount",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611cd561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806319cc7fdc1461005057806381eba89e1461008c578063dafa66bf146100ba575b600080fd5b61006361005e3660046112cd565b61012c565b604080518251815260208084015190820152918101511515908201526060015b60405180910390f35b61009f61009a36600461134b565b61030a565b60408051938452602084019290925290820152606001610083565b6100cd6100c83660046113d6565b610493565b604080519384526020808501939093528151848201529181015160608085019190915291810151608080850191909152918101516001600160a01b031660a0808501919091529181015160c0840152015160e082015261010001610083565b610134610e61565b61013c610e84565b80516001600160a01b038a1690526020810188905261016b61015d856108ab565b604083810151602001510152565b604081810151015183151590526000808513908161018a57841561018c565b845b90506101b08161019d5760006101a1565b6000195b60408501516020015160a00152565b6080830180516020908101518a9052815181015101889052516040015185151590526101da610e61565b60008713156102725760405163610e3cb960e01b815273__$91a1a7f12f728c8759f4be979bae55555f$__9063610e3cb99061021c9087908e90600401611897565b60a060405180830381865af4158015610239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025d91906118df565b151560408601526020850152505081526102fb565b895160405163103b6c3760e31b815273__$91a1a7f12f728c8759f4be979bae55555f$__916381db61b8916102ab91889160040161192c565b606060405180830381865af41580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec919061194e565b15156040840152602083015281525b9b9a5050505050505050505050565b600080600073__$37ccc826b10054fe27f32c30ea3a599925$__633b89b2366040518061012001604052808d6001600160a01b031681526020018c81526020018b6001600160a01b031681526020018a6001600160a01b03168152602001610371896108c6565b815260200161037f886108c6565b815260200161039f6103908a6108c6565b61039a908c61199d565b6108e8565b81526020016103b06103908a6108c6565b6103b9906119b4565b815260016020909101526040516001600160e01b031960e084901b1681526103e491906004016119d0565b6040805180830381865af4158015610400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104249190611a66565b50925060008313156104715760006104438b8b600001518a8888610952565b9093509050801561046b576104678b8b600001518b89610462866108e8565b610952565b5091505b50610486565b6104828a8a600001518a8887610952565b5091505b9750975097945050505050565b6000806104d86040518060c0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6104e0610f22565b88604001516001600160a01b0316876001600160a01b03161415801561051c575088606001516001600160a01b0316876001600160a01b031614155b156105475788516040516353f8171160e01b815261053e918991600401611a96565b60405180910390fd5b6105518a8a6109db565b61055b878a610a26565b6001600160a01b03168152610571878a8a610a95565b60208201528051610583908a8a610a95565b816040018190525060008073__$37ccc826b10054fe27f32c30ea3a599925$__633b89b2366040518061012001604052808f6001600160a01b031681526020018e81526020018c6001600160a01b0316815260200186600001516001600160a01b031681526020016105f887602001516108c6565b815260200161060a87604001516108c6565b815260200161062961061f88602001516108c6565b61039a908e61199d565b815260200161063e61061f88602001516108c6565b610647906119b4565b815260016020909101526040516001600160e01b031960e084901b16815261067291906004016119d0565b6040805180830381865af415801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b29190611a66565b91509150600073__$37ccc826b10054fe27f32c30ea3a599925$";

type ReaderPricingUtilsConstructorParams =
  | [linkLibraryAddresses: ReaderPricingUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReaderPricingUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ReaderPricingUtils__factory extends ContractFactory {
  constructor(...args: ReaderPricingUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ReaderPricingUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ReaderPricingUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$91a1a7f12f728c8759f4be979bae55555f\$__", "g"),
      linkLibraryAddresses["contracts/position/PositionUtils.sol:PositionUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$37ccc826b10054fe27f32c30ea3a599925\$__", "g"),
      linkLibraryAddresses[
        "contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReaderPricingUtils> {
    return super.deploy(overrides || {}) as Promise<ReaderPricingUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReaderPricingUtils {
    return super.attach(address) as ReaderPricingUtils;
  }
  override connect(signer: Signer): ReaderPricingUtils__factory {
    return super.connect(signer) as ReaderPricingUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReaderPricingUtilsInterface {
    return new utils.Interface(_abi) as ReaderPricingUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReaderPricingUtils {
    return new Contract(address, _abi, signerOrProvider) as ReaderPricingUtils;
  }
}

export interface ReaderPricingUtilsLibraryAddresses {
  ["contracts/position/PositionUtils.sol:PositionUtils"]: string;
  ["contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"]: string;
}
