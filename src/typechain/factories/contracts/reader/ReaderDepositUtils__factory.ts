/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ReaderDepositUtils,
  ReaderDepositUtilsInterface,
} from "../../../contracts/reader/ReaderDepositUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "poolValue",
        type: "int256",
      },
    ],
    name: "InvalidPoolValueForDeposit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "longTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "uiFeeReceiver",
        type: "address",
      },
      {
        internalType: "enum ISwapPricingUtils.SwapPricingType",
        name: "swapPricingType",
        type: "ISwapPricingUtils.SwapPricingType",
      },
      {
        internalType: "bool",
        name: "includeVirtualInventoryImpact",
        type: "bool",
      },
    ],
    name: "getDepositAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract DataStore",
            name: "dataStore",
            type: "DataStore",
          },
          {
            components: [
              {
                internalType: "address",
                name: "marketToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "indexToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "longToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "shortToken",
                type: "address",
              },
            ],
            internalType: "struct Market.Props",
            name: "market",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "indexTokenPrice",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "longTokenPrice",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "shortTokenPrice",
                type: "tuple",
              },
            ],
            internalType: "struct MarketUtils.MarketPrices",
            name: "prices",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "tokenInPrice",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "tokenOutPrice",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "priceImpactUsd",
            type: "int256",
          },
          {
            internalType: "address",
            name: "uiFeeReceiver",
            type: "address",
          },
          {
            internalType: "enum ISwapPricingUtils.SwapPricingType",
            name: "swapPricingType",
            type: "ISwapPricingUtils.SwapPricingType",
          },
        ],
        internalType:
          "struct ReaderDepositUtils.GetDepositAmountOutForSingleTokenParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "getDepositAmountOutForSingleToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6118b761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806357e0a932146100455780638026a1051461006a575b600080fd5b6100586100533660046113f8565b61007d565b60405190815260200160405180910390f35b610058610078366004611495565b61030d565b60008061008d886020015161063a565b6100979088611583565b905060006100a8896040015161063a565b6100b29088611583565b9050600073__$37ccc826b10054fe27f32c30ea3a599925$__633b89b2366040518061012001604052808f6001600160a01b031681526020018e81526020018e604001516001600160a01b031681526020018e606001516001600160a01b031681526020016101248e6020015161063a565b81526020016101368e6040015161063a565b815260200161014487610662565b815260200161015286610662565b81526020018815158152506040518263ffffffff1660e01b815260040161017991906115da565b602060405180830381865af4158015610196573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ba9190611670565b9050600061026b6040518061016001604052808f6001600160a01b031681526020018e81526020018d81526020018e604001516001600160a01b031681526020018d6020015181526020018e606001516001600160a01b031681526020018d6040015181526020018c815260200161023e8588888a6102399190611689565b6106d0565b81526020018a6001600160a01b031681526020018960058111156102645761026461169c565b905261030d565b6102759082611689565b90506102f26040518061016001604052808f6001600160a01b031681526020018e81526020018d81526020018e606001516001600160a01b031681526020018d6040015181526020018e604001516001600160a01b031681526020018d6020015181526020018b815260200161023e8587888a6102399190611689565b6102fc9082611689565b9d9c50505050505050505050505050565b60008061034083600001518460200151600001518560e001516000876101000151138761012001518861014001516106e7565b905060008082604001519050600073__$e53db83827f4e07ebc418caf7145b8c2d5$__63f2e2a4f5876000015188602001518960400151600001518a60400151602001518b60400151604001516040516020016103cc906020808252601b908201527a4d41585f504e4c5f464143544f525f464f525f4445504f5349545360281b604082015260600190565b6040516020818303038152906040528051906020012060016040518863ffffffff1660e01b815260040161040697969594939291906116b2565b61016060405180830381865af4158015610424573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610448919061171f565b905060008160000151121561047b57805160405163adaa688d60e01b815260048101919091526024015b60405180910390fd5b600061048a8260000151610a19565b9050600061049f886020015160000151610a6b565b83519091501580156104b15750600081115b156104d557825160405163adaa688d60e01b81526004810191909152602401610472565b60008861010001511380156104e8575080155b156104f65760006101008901525b600088610100015113156105b15760008061052d8a600001518b60200151600001518c60a001518d60c001518e6101000151610acf565b915091506105578a60c001516020015161054684610a19565b6105509190611583565b8585610b5d565b6105619088611689565b965080156105ae5760006105948b600001518c60200151600001518d606001518e6080015161058f87610662565b610acf565b5090506105a081610a19565b6105aa9088611689565b9650505b50505b600088610100015112156106095760006105e789600001518a60200151600001518b606001518c608001518d6101000151610acf565b5090506105fb6105f6826117b2565b610a19565b61060590866117ce565b9450505b6080880151516106249061061d9086611583565b8383610b5d565b61062e9086611689565b98975050505050505050565b60006002826000015183602001516106529190611689565b61065c91906117f7565b92915050565b60006001600160ff1b038211156106cc5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610472565b5090565b60006106dd838584610bb0565b90505b9392505050565b6106ef6111da565b6106f76111da565b60008084600581111561070c5761070c61169c565b0361079057886001600160a01b031663bd02d0f561072a8a89610bf9565b6040518263ffffffff1660e01b815260040161074891815260200190565b602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611670565b90506108d1565b60018460058111156107a4576107a461169c565b146108d15760058460058111156107bd576107bd61169c565b036107da57886001600160a01b031663bd02d0f561072a8a610c82565b60038460058111156107ee576107ee61169c565b0361080c57886001600160a01b031663bd02d0f561072a8a89610d08565b60048460058111156108205761082061169c565b0361083e57886001600160a01b031663bd02d0f561072a8a89610d40565b60028460058111156108525761085261169c565b036108d157886001600160a01b031663bd02d0f561086f8a610d7b565b6040518263ffffffff1660e01b815260040161088d91815260200190565b602060405180830381865afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611670565b90505b6000896001600160a01b031663bd02d0f560405160200161091e9060208082526018908201527729aba0a82fa322a2afa922a1a2a4ab22a92fa320a1aa27a960411b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161095291815260200190565b602060405180830381865afa15801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190611670565b905060006109a18984610dbd565b90506109ad8183610dbd565b8085526109ba90826117ce565b60208501526001600160a01b03871660608501526109d88b88610dd6565b608085018190526109ea908a90610dbd565b60a085018190526109fb828b6117ce565b610a0591906117ce565b604085015250919998505050505050505050565b6000808212156106cc5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610472565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aab573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065c9190611670565b6000806000806000851315610b3e57610aeb8660200151610662565b610af5908661180b565b91506000610b0c610b078b8b8b610f24565b610662565b905080831315610b38576020870151610b286105f68386611839565b610b329190611583565b91508092505b50610b4f565b610b4c858760000151610f9e565b91505b909890975095505050505050565b600081158015610b6b575082155b15610b8057610b7984611012565b90506106e0565b81158015610b8e5750600083115b15610ba557610b79610ba08585611689565b611012565b6106dd828585611023565b600080610bc685610bc086611030565b85611023565b905060008413610be757610bd981610662565b610be2906117b2565b610bf0565b610bf081610662565b95945050505050565b6000604051602001610c2e906020808252600f908201526e29aba0a82fa322a2afa320a1aa27a960891b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b0385169082015282151560608201526080015b60405160208183030381529060405280519060200120905092915050565b6000604051602001610cbe9060208082526016908201527520aa27a6a4a1afa9aba0a82fa322a2afa320a1aa27a960511b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03841690820152606001604051602081830303815290604052805190602001209050919050565b6000604051602001610c2e906020808252601290820152712222a827a9a4aa2fa322a2afa320a1aa27a960711b604082015260600190565b6000604051602001610c2e906020808252601590820152742ba4aa24222920aba0a62fa322a2afa320a1aa27a960591b604082015260600190565b6000604051602001610cbe906020808252601c908201527b20aa27a6a4a1afaba4aa24222920aba0a62fa322a2afa320a1aa27a960211b604082015260600190565b60006106e0838368327cb2734119d3b7a9601e1b611023565b600080836001600160a01b031663bd02d0f5604051602001610e1d9060208082526011908201527026a0ac2faaa4afa322a2afa320a1aa27a960791b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610e5191815260200190565b602060405180830381865afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190611670565b90506000846001600160a01b031663bd02d0f5610eae86611043565b6040518263ffffffff1660e01b8152600401610ecc91815260200190565b602060405180830381865afa158015610ee9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0d9190611670565b9050818110610f1c5781610bf0565b949350505050565b6000836001600160a01b031663bd02d0f5610f3f8585611076565b6040518263ffffffff1660e01b8152600401610f5d91815260200190565b602060405180830381865afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dd9190611670565b600080831215610fe057610fb182610662565b610fba83610662565b610fc49085611839565b610fcf906001611859565b610fd9919061180b565b905061065c565b610fe982610662565b6001610ff484610662565b610ffe9086611859565b6110089190611839565b6106e0919061180b565b600061065c64e8d4a51000836117f7565b60006106dd8484846110f0565b6000808212156106cc578160000361065c565b6000604051602001610cbe906020808252600d908201526c2aa4afa322a2afa320a1aa27a960991b604082015260600190565b60006040516020016110b39060208082526017908201527614d5d05417d253541050d517d413d3d317d05353d55395604a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b038086169183019190915283166060820152608001610c64565b600080806000198587098587029250828110838203039150508060000361112a57838281611120576111206117e1565b04925050506106e0565b8084116111715760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610472565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6040518060c0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b6001600160a01b038116811461122e57600080fd5b50565b803561123c81611219565b919050565b60405161016081016001600160401b038111828210171561127257634e487b7160e01b600052604160045260246000fd5b60405290565b60006080828403121561128a57600080fd5b604051608081016001600160401b03811182821017156112ba57634e487b7160e01b600052604160045260246000fd5b60405290508082356112cb81611219565b815260208301356112db81611219565b602082015260408301356112ee81611219565b6040820152606083013561130181611219565b6060919091015292915050565b60006040828403121561132057600080fd5b604080519081016001600160401b038111828210171561135057634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060c0828403121561137c57600080fd5b604051606081016001600160401b03811182821017156113ac57634e487b7160e01b600052604160045260246000fd5b6040529050806113bc848461130e565b81526113cb846040850161130e565b60208201526113dd846080850161130e565b60408201525092915050565b80356006811061123c57600080fd5b600080600080600080600080610200898b03121561141557600080fd5b883561142081611219565b975061142f8a60208b01611278565b965061143e8a60a08b0161136a565b9550610160890135945061018089013593506101a089013561145f81611219565b925061146e6101c08a016113e9565b91506101e0890135801515811461148457600080fd5b809150509295985092959890939650565b60006102a082840312156114a857600080fd5b6114b0611241565b6114b983611231565b81526114c88460208501611278565b60208201526114da8460a0850161136a565b60408201526114ec6101608401611231565b60608201526114ff84610180850161130e565b60808201526115116101c08401611231565b60a0820152611524846101e0850161130e565b60c082015261022083013560e082015261024083013561010082015261154d6102608401611231565b61012082015261156061028084016113e9565b6101408201529392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761065c5761065c61156d565b6001600160a01b03169052565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b81516001600160a01b031681526020808301516101808301916115ff908401826115a7565b50604083015161161260a084018261159a565b50606083015161162560c084018261159a565b50608083015160e083015260a0830151610100818185015260c085015161012085015260e08501516101408501528085015191505061166961016084018215159052565b5092915050565b60006020828403121561168257600080fd5b5051919050565b8082018082111561065c5761065c61156d565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03881681526101a081016116d060208301896115a7565b865160a083015260209687015160c0830152855160e083015294860151610100820152835161012082015292909401516101408301526101608201529115156101809092019190915292915050565b6000610160828403121561173257600080fd5b61173a611241565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152508091505092915050565b6000600160ff1b82016117c7576117c761156d565b5060000390565b8181038181111561065c5761065c61156d565b634e487b7160e01b600052601260045260246000fd5b600082611806576118066117e1565b500490565b60008261181a5761181a6117e1565b600160ff1b8214600019841416156118345761183461156d565b500590565b81810360008312801583831316838312821617156116695761166961156d565b80820182811260008312801582168215821617156118795761187961156d565b50509291505056fea2646970667358221220df487a07d9934191a36b74e9ae27484d4d16072ce8c99735f3c60c052091de9064736f6c63430008120033";

type ReaderDepositUtilsConstructorParams =
  | [linkLibraryAddresses: ReaderDepositUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReaderDepositUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ReaderDepositUtils__factory extends ContractFactory {
  constructor(...args: ReaderDepositUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ReaderDepositUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ReaderDepositUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$37ccc826b10054fe27f32c30ea3a599925\\$__", "g"),
      linkLibraryAddresses[
        "contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$e53db83827f4e07ebc418caf7145b8c2d5\\$__", "g"),
      linkLibraryAddresses["contracts/market/MarketUtils.sol:MarketUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReaderDepositUtils> {
    return super.deploy(overrides || {}) as Promise<ReaderDepositUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReaderDepositUtils {
    return super.attach(address) as ReaderDepositUtils;
  }
  override connect(signer: Signer): ReaderDepositUtils__factory {
    return super.connect(signer) as ReaderDepositUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReaderDepositUtilsInterface {
    return new utils.Interface(_abi) as ReaderDepositUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReaderDepositUtils {
    return new Contract(address, _abi, signerOrProvider) as ReaderDepositUtils;
  }
}

export interface ReaderDepositUtilsLibraryAddresses {
  ["contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"]: string;
  ["contracts/market/MarketUtils.sol:MarketUtils"]: string;
}
