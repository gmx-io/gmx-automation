// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ReaderDepositUtils,
  ReaderDepositUtilsInterface,
} from "../../../contracts/reader/ReaderDepositUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "poolValue",
        type: "int256",
      },
    ],
    name: "InvalidPoolValueForDeposit",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "indexTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "longTokenPrice",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "shortTokenPrice",
            type: "tuple",
          },
        ],
        internalType: "struct MarketUtils.MarketPrices",
        name: "prices",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "longTokenAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shortTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "uiFeeReceiver",
        type: "address",
      },
      {
        internalType: "enum ISwapPricingUtils.SwapPricingType",
        name: "swapPricingType",
        type: "ISwapPricingUtils.SwapPricingType",
      },
      {
        internalType: "bool",
        name: "includeVirtualInventoryImpact",
        type: "bool",
      },
    ],
    name: "getDepositAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract DataStore",
            name: "dataStore",
            type: "DataStore",
          },
          {
            components: [
              {
                internalType: "address",
                name: "marketToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "indexToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "longToken",
                type: "address",
              },
              {
                internalType: "address",
                name: "shortToken",
                type: "address",
              },
            ],
            internalType: "struct Market.Props",
            name: "market",
            type: "tuple",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "indexTokenPrice",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "longTokenPrice",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "min",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "max",
                    type: "uint256",
                  },
                ],
                internalType: "struct Price.Props",
                name: "shortTokenPrice",
                type: "tuple",
              },
            ],
            internalType: "struct MarketUtils.MarketPrices",
            name: "prices",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "tokenInPrice",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "min",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "max",
                type: "uint256",
              },
            ],
            internalType: "struct Price.Props",
            name: "tokenOutPrice",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "priceImpactUsd",
            type: "int256",
          },
          {
            internalType: "address",
            name: "uiFeeReceiver",
            type: "address",
          },
          {
            internalType: "enum ISwapPricingUtils.SwapPricingType",
            name: "swapPricingType",
            type: "ISwapPricingUtils.SwapPricingType",
          },
        ],
        internalType:
          "struct ReaderDepositUtils.GetDepositAmountOutForSingleTokenParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "balanceWasImproved",
        type: "bool",
      },
    ],
    name: "getDepositAmountOutForSingleToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61143f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806357e0a93214610045578063eb426b271461006a575b600080fd5b610058610053366004610e36565b61007d565b60405190815260200160405180910390f35b610058610078366004610ece565b610340565b60008061008d886020015161074e565b6100979088610fe2565b905060006100a8896040015161074e565b6100b29088610fe2565b604080518082019091526000808252602082015290915073__$37ccc826b10054fe27f32c30ea3a599925$__633b89b2366040518061012001604052808f6001600160a01b031681526020018e81526020018e604001516001600160a01b031681526020018e606001516001600160a01b031681526020016101378e6020015161074e565b81526020016101498e6040015161074e565b815260200161015787610770565b815260200161016586610770565b81526020018815158152506040518263ffffffff1660e01b815260040161018c9190611039565b6040805180830381865af41580156101a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cc91906110cf565b82600001836020018215151515815250828152505050600061029a6040518061016001604052808f6001600160a01b031681526020018e81526020018d81526020018e604001516001600160a01b031681526020018d6020015181526020018e606001516001600160a01b031681526020018d6040015181526020018c8152602001610268856000015188888a61026391906110ff565b6107de565b81526020018a6001600160a01b0316815260200189600581111561028e5761028e611112565b90526020840151610340565b6102a490826110ff565b90506103256040518061016001604052808f6001600160a01b031681526020018e81526020018d81526020018e606001516001600160a01b031681526020018d6040015181526020018e604001516001600160a01b031681526020018d6020015181526020018b8152602001610268856000015187888a61026391906110ff565b61032f90826110ff565b9d9c50505050505050505050505050565b815160208301515160e084015161012085015161014086015160405163b5f97bcd60e01b8152600095869573__$37ccc826b10054fe27f32c30ea3a599925$__9563b5f97bcd9561039c959394929391928b9290600401611128565b60c060405180830381865af41580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190611186565b905060008082604001519050600073__$e53db83827f4e07ebc418caf7145b8c2d5$__63f2e2a4f5886000015189602001518a60400151600001518b60400151602001518c6040015160400151604051602001610469906020808252601b908201527a4d41585f504e4c5f464143544f525f464f525f4445504f5349545360281b604082015260600190565b6040516020818303038152906040528051906020012060016040518863ffffffff1660e01b81526004016104a39796959493929190611215565b61018060405180830381865af41580156104c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e59190611282565b905060008160000151121561051857805160405163adaa688d60e01b815260048101919091526024015b60405180910390fd5b600061052782600001516107f5565b6020890151516040516316ba208960e01b81526001600160a01b03909116600482015290915060009073__$e53db83827f4e07ebc418caf7145b8c2d5$__906316ba208990602401602060405180830381865af415801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611321565b83519091501580156105c25750600081115b156105e657825160405163adaa688d60e01b8152600481019190915260240161050f565b60008961010001511380156105f9575080155b156106075760006101008a01525b600089610100015113156106c25760008061063e8b600001518c60200151600001518d60a001518e60c001518f6101000151610847565b915091506106688b60c0015160200151610657846107f5565b6106619190610fe2565b85856108d5565b61067290886110ff565b965080156106bf5760006106a58c600001518d60200151600001518e606001518f608001516106a087610770565b610847565b5090506106b1816107f5565b6106bb90886110ff565b9650505b50505b6000896101000151121561071a5760006106f88a600001518b60200151600001518c606001518d608001518e6101000151610847565b50905061070c6107078261133a565b6107f5565b6107169086611356565b9450505b6080890151516107359061072e9086610fe2565b83836108d5565b61073f90866110ff565b96505050505050505b92915050565b600060028260000151836020015161076691906110ff565b610748919061137f565b60006001600160ff1b038211156107da5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840161050f565b5090565b60006107eb838584610928565b90505b9392505050565b6000808212156107da5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f736974697665604482015260640161050f565b60008060008060008513156108b6576108638660200151610770565b61086d9086611393565b9150600061088461087f8b8b8b610971565b610770565b9050808313156108b05760208701516108a061070783866113c1565b6108aa9190610fe2565b91508092505b506108c7565b6108c48587600001516109eb565b91505b909890975095505050505050565b6000811580156108e3575082155b156108f8576108f184610a5f565b90506107ee565b811580156109065750600083115b1561091d576108f161091885856110ff565b610a5f565b6107eb828585610a70565b60008061093e8561093886610a7d565b85610a70565b90506000841361095f5761095181610770565b61095a9061133a565b610968565b61096881610770565b95945050505050565b6000836001600160a01b031663bd02d0f561098c8585610a90565b6040518263ffffffff1660e01b81526004016109aa91815260200190565b602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611321565b600080831215610a2d576109fe82610770565b610a0783610770565b610a1190856113c1565b610a1c9060016113e1565b610a269190611393565b9050610748565b610a3682610770565b6001610a4184610770565b610a4b90866113e1565b610a5591906113c1565b6107ee9190611393565b600061074864e8d4a510008361137f565b60006107eb848484610b23565b6000808212156107da5781600003610748565b6000604051602001610acd9060208082526017908201527614d5d05417d253541050d517d413d3d317d05353d55395604a1b604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03808616918301919091528316606082015260800160405160208183030381529060405280519060200120905092915050565b6000808060001985870985870292508281108382030391505080600003610b5d57838281610b5357610b53611369565b04925050506107ee565b808411610ba45760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b604482015260640161050f565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b0381168114610c2257600080fd5b50565b8035610c3081610c0d565b919050565b60405161016081016001600160401b0381118282101715610c6657634e487b7160e01b600052604160045260246000fd5b60405290565b60405161018081016001600160401b0381118282101715610c6657634e487b7160e01b600052604160045260246000fd5b600060808284031215610caf57600080fd5b604051608081016001600160401b0381118282101715610cdf57634e487b7160e01b600052604160045260246000fd5b6040529050808235610cf081610c0d565b81526020830135610d0081610c0d565b60208201526040830135610d1381610c0d565b60408201526060830135610d2681610c0d565b6060919091015292915050565b600060408284031215610d4557600080fd5b604080519081016001600160401b0381118282101715610d7557634e487b7160e01b600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600060c08284031215610da157600080fd5b604051606081016001600160401b0381118282101715610dd157634e487b7160e01b600052604160045260246000fd5b604052905080610de18484610d33565b8152610df08460408501610d33565b6020820152610e028460808501610d33565b60408201525092915050565b803560068110610c3057600080fd5b8015158114610c2257600080fd5b8035610c3081610e1d565b600080600080600080600080610200898b031215610e5357600080fd5b8835610e5e81610c0d565b9750610e6d8a60208b01610c9d565b9650610e7c8a60a08b01610d8f565b9550610160890135945061018089013593506101a0890135610e9d81610c0d565b9250610eac6101c08a01610e0e565b91506101e0890135610ebd81610e1d565b809150509295985092959890939650565b6000808284036102c0811215610ee357600080fd5b6102a080821215610ef357600080fd5b610efb610c35565b9150610f0685610c25565b8252610f158660208701610c9d565b6020830152610f278660a08701610d8f565b6040830152610f396101608601610c25565b6060830152610f4c866101808701610d33565b6080830152610f5e6101c08601610c25565b60a0830152610f71866101e08701610d33565b60c083015261022085013560e0830152610240850135610100830152610f9a6102608601610c25565b610120830152610fad6102808601610e0e565b610140830152819350610fc1818601610e2b565b925050509250929050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761074857610748610fcc565b6001600160a01b03169052565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b81516001600160a01b0316815260208083015161018083019161105e90840182611006565b50604083015161107160a0840182610ff9565b50606083015161108460c0840182610ff9565b50608083015160e083015260a0830151610100818185015260c085015161012085015260e0850151610140850152808501519150506110c861016084018215159052565b5092915050565b600080604083850312156110e257600080fd5b8251915060208301516110f481610e1d565b809150509250929050565b8082018082111561074857610748610fcc565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03878116825286811660208301526040820186905284151560608301528316608082015260c081016006831061117557634e487b7160e01b600052602160045260246000fd5b8260a0830152979650505050505050565b600060c0828403121561119857600080fd5b60405160c081016001600160401b03811182821017156111c857634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301516111f381610c0d565b60608201526080838101519082015260a0928301519281019290925250919050565b6001600160a01b03881681526101a081016112336020830189611006565b865160a083015260209687015160c0830152855160e083015294860151610100820152835161012082015292909401516101408301526101608201529115156101809092019190915292915050565b6000610180828403121561129557600080fd5b61129d610c6c565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101608084015181830152508091505092915050565b60006020828403121561133357600080fd5b5051919050565b6000600160ff1b820161134f5761134f610fcc565b5060000390565b8181038181111561074857610748610fcc565b634e487b7160e01b600052601260045260246000fd5b60008261138e5761138e611369565b500490565b6000826113a2576113a2611369565b600160ff1b8214600019841416156113bc576113bc610fcc565b500590565b81810360008312801583831316838312821617156110c8576110c8610fcc565b808201828112600083128015821682158216171561140157611401610fcc565b50509291505056fea2646970667358221220fef2355197a09b060b0c5e71e6ef734340038d22bc09cc137dc631388b5e333d64736f6c63430008140033";

type ReaderDepositUtilsConstructorParams =
  | [linkLibraryAddresses: ReaderDepositUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReaderDepositUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ReaderDepositUtils__factory extends ContractFactory {
  constructor(...args: ReaderDepositUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ReaderDepositUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ReaderDepositUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$37ccc826b10054fe27f32c30ea3a599925\$__", "g"),
      linkLibraryAddresses[
        "contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$e53db83827f4e07ebc418caf7145b8c2d5\$__", "g"),
      linkLibraryAddresses["contracts/market/MarketUtils.sol:MarketUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReaderDepositUtils> {
    return super.deploy(overrides || {}) as Promise<ReaderDepositUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReaderDepositUtils {
    return super.attach(address) as ReaderDepositUtils;
  }
  override connect(signer: Signer): ReaderDepositUtils__factory {
    return super.connect(signer) as ReaderDepositUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReaderDepositUtilsInterface {
    return new utils.Interface(_abi) as ReaderDepositUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReaderDepositUtils {
    return new Contract(address, _abi, signerOrProvider) as ReaderDepositUtils;
  }
}

export interface ReaderDepositUtilsLibraryAddresses {
  ["contracts/pricing/SwapPricingUtils.sol:SwapPricingUtils"]: string;
  ["contracts/market/MarketUtils.sol:MarketUtils"]: string;
}
