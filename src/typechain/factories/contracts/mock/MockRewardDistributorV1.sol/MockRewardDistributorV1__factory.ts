// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockRewardDistributorV1,
  MockRewardDistributorV1Interface,
} from "../../../../contracts/mock/MockRewardDistributorV1.sol/MockRewardDistributorV1";

const _abi = [
  {
    inputs: [],
    name: "lastDistributionTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "setTokensPerInterval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokensPerInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "updateLastDistributionTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610155806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806318e20a03146100515780633ae6d6eb1461006657806375b173501461006f578063a8d936271461008a575b600080fd5b61006461005f366004610106565b610093565b005b61006442600155565b61007860015481565b60405190815260200160405180910390f35b61007860005481565b6001546000036101015760405162461bcd60e51b815260206004820152602f60248201527f5265776172644469737472696275746f723a20696e76616c6964206c6173744460448201526e6973747269627574696f6e54696d6560881b606482015260840160405180910390fd5b600055565b60006020828403121561011857600080fd5b503591905056fea2646970667358221220ef7d2697ec5e624aae1d2e219fc6f5ecebf137d1028b5ee8ba45803346ee6c7a64736f6c63430008140033";

type MockRewardDistributorV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRewardDistributorV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRewardDistributorV1__factory extends ContractFactory {
  constructor(...args: MockRewardDistributorV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRewardDistributorV1> {
    return super.deploy(overrides || {}) as Promise<MockRewardDistributorV1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockRewardDistributorV1 {
    return super.attach(address) as MockRewardDistributorV1;
  }
  override connect(signer: Signer): MockRewardDistributorV1__factory {
    return super.connect(signer) as MockRewardDistributorV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRewardDistributorV1Interface {
    return new utils.Interface(_abi) as MockRewardDistributorV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRewardDistributorV1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockRewardDistributorV1;
  }
}
