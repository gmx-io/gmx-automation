// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockRiskOracle,
  MockRiskOracleInterface,
} from "../../../contracts/mock/MockRiskOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "initialSenders",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "initialUpdateTypes",
        type: "string[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "AuthorizedSenderAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "AuthorizedSenderRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "referenceId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "newValue",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "previousValue",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "string",
        name: "updateType",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "updateId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "additionalData",
        type: "bytes",
      },
    ],
    name: "ParameterUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "updateType",
        type: "string",
      },
    ],
    name: "UpdateTypeAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "addAuthorizedSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newUpdateType",
        type: "string",
      },
    ],
    name: "addUpdateType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllUpdateTypes",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "updateType",
        type: "string",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
    ],
    name: "getLatestUpdateByParameterAndMarket",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "newValue",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "referenceId",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "previousValue",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "updateType",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "updateId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "additionalData",
            type: "bytes",
          },
        ],
        internalType: "struct MockRiskOracle.RiskParameterUpdate",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "updateId",
        type: "uint256",
      },
    ],
    name: "getUpdateById",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "newValue",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "referenceId",
            type: "string",
          },
          {
            internalType: "bytes",
            name: "previousValue",
            type: "bytes",
          },
          {
            internalType: "string",
            name: "updateType",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "updateId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "market",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "additionalData",
            type: "bytes",
          },
        ],
        internalType: "struct MockRiskOracle.RiskParameterUpdate",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAuthorized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "latestUpdateIdByMarketAndType",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "referenceIds",
        type: "string[]",
      },
      {
        internalType: "bytes[]",
        name: "newValues",
        type: "bytes[]",
      },
      {
        internalType: "string[]",
        name: "updateTypes",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "markets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "additionalData",
        type: "bytes[]",
      },
    ],
    name: "publishBulkRiskParameterUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "referenceId",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "newValue",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "updateType",
        type: "string",
      },
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "additionalData",
        type: "bytes",
      },
    ],
    name: "publishRiskParameterUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "removeAuthorizedSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161239738038061239783398101604081905261002f91610348565b61003833610182565b60005b82518110156100965760016005600085848151811061005c5761005c61041f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161003b565b5060005b815181101561017a5760038282815181106100b7576100b761041f565b60200260200101516040516100cc9190610435565b9081526040519081900360200190205460ff1661017257600160038383815181106100f9576100f961041f565b602002602001015160405161010e9190610435565b908152602001604051809103902060006101000a81548160ff02191690831515021790555060028282815181106101475761014761041f565b6020908102919091018101518254600181018455600093845291909220019061017090826104da565b505b60010161009a565b505050610598565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610210576102106101d2565b604052919050565b60006001600160401b03821115610231576102316101d2565b5060051b60200190565b60005b8381101561025657818101518382015260200161023e565b50506000910152565b600082601f83011261027057600080fd5b815161028361027e82610218565b6101e8565b8082825260208201915060208360051b8601019250858311156102a557600080fd5b602085015b8381101561033e5780516001600160401b038111156102c857600080fd5b8601603f810188136102d957600080fd5b60208101516001600160401b038111156102f5576102f56101d2565b610308601f8201601f19166020016101e8565b8181526040838301018a101561031d57600080fd5b61032e82602083016040860161023b565b85525050602092830192016102aa565b5095945050505050565b6000806040838503121561035b57600080fd5b82516001600160401b0381111561037157600080fd5b8301601f8101851361038257600080fd5b805161039061027e82610218565b8082825260208201915060208360051b8501019250878311156103b257600080fd5b6020840193505b828410156103e95783516001600160a01b03811681146103d857600080fd5b8252602093840193909101906103b9565b6020870151909550925050506001600160401b0381111561040957600080fd5b6104158582860161025f565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6000825161044781846020870161023b565b9190910192915050565b600181811c9082168061046557607f821691505b60208210810361048557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104d557806000526020600020601f840160051c810160208510156104b25750805b601f840160051c820191505b818110156104d257600081556001016104be565b50505b505050565b81516001600160401b038111156104f3576104f36101d2565b610507816105018454610451565b8461048b565b6020601f82116001811461053b57600083156105235750848201515b600019600385901b1c1916600184901b1784556104d2565b600084815260208120601f198516915b8281101561056b578785015182556020948501946001909201910161054b565b50848210156105895786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b611df0806105a76000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c8063031ed79c146100bf5780631687fe8e146100d457806337759b9a146100f05780635decfee4146101105780636a309fe914610123578063715018a61461015f57806377abc9bd146101675780638da5cb5b1461017a578063b0be25051461019a578063c030ce7b146101ad578063cbd57967146101c2578063f2fde38b146101d5578063fa7229ee146101e8578063fe9fbb80146101fb575b600080fd5b6100d26100cd36600461173f565b610237565b005b6100dd60075481565b6040519081526020015b60405180910390f35b6101036100fe366004611826565b610430565b6040516100e7919061188f565b61010361011e36600461195d565b6107b6565b6100dd6101313660046119aa565b6006602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b6100d2610b92565b6100d26101753660046119f7565b610ba6565b610182610d2a565b6040516001600160a01b0390911681526020016100e7565b6100d26101a8366004611a33565b610d39565b6101b5610de7565b6040516100e79190611af3565b6100d26101d0366004611b58565b610ec0565b6100d26101e3366004611b58565b610f72565b6100d26101f6366004611b58565b610feb565b610227610209366004611b58565b6001600160a01b031660009081526005602052604090205460ff1690565b60405190151581526020016100e7565b3360009081526005602052604090205460ff1661026f5760405162461bcd60e51b815260040161026690611b7a565b60405180910390fd5b83518551148015610281575082518451145b801561028e575081518351145b801561029b575080518251145b6102f85760405162461bcd60e51b815260206004820152602860248201527f4d69736d61746368206265747765656e20617267756d656e74206172726179206044820152673632b733ba34399760c11b6064820152608401610266565b60005b855181101561042857600384828151811061031857610318611bbe565b602002602001015160405161032d9190611bd4565b9081526040519081900360200190205460ff166103965760405162461bcd60e51b815260206004820152602160248201527f556e617574686f72697a656420757064617465207479706520617420696e64656044820152600f60fb1b6064820152608401610266565b6104208682815181106103ab576103ab611bbe565b60200260200101518683815181106103c5576103c5611bbe565b60200260200101518684815181106103df576103df611bbe565b60200260200101518685815181106103f9576103f9611bbe565b602002602001015186868151811061041357610413611bbe565b60200260200101516110a5565b6001016102fb565b505050505050565b610438611500565b60008211801561044a57506007548211155b61048b5760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b2103ab83230ba329024a21760711b6044820152606401610266565b6004600083815260200190815260200160002060405180610100016040529081600082015481526020016001820180546104c490611bf0565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090611bf0565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050815260200160028201805461055690611bf0565b80601f016020809104026020016040519081016040528092919081815260200182805461058290611bf0565b80156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b505050505081526020016003820180546105e890611bf0565b80601f016020809104026020016040519081016040528092919081815260200182805461061490611bf0565b80156106615780601f1061063657610100808354040283529160200191610661565b820191906000526020600020905b81548152906001019060200180831161064457829003601f168201915b5050505050815260200160048201805461067a90611bf0565b80601f01602080910402602001604051908101604052809291908181526020018280546106a690611bf0565b80156106f35780601f106106c8576101008083540402835291602001916106f3565b820191906000526020600020905b8154815290600101906020018083116106d657829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b0316604082015260078201805460609092019161072d90611bf0565b80601f016020809104026020016040519081016040528092919081815260200182805461075990611bf0565b80156107a65780601f1061077b576101008083540402835291602001916107a6565b820191906000526020600020905b81548152906001019060200180831161078957829003601f168201915b5050505050815250509050919050565b6107be611500565b6001600160a01b03821660009081526006602052604080822090516107e4908690611bd4565b9081526020016040518091039020549050600081116108655760405162461bcd60e51b815260206004820152603760248201527f4e6f2075706461746520666f756e6420666f722074686520737065636966696560448201527632103830b930b6b2ba32b91030b7321036b0b935b2ba1760491b6064820152608401610266565b60046000828152602001908152602001600020604051806101000160405290816000820154815260200160018201805461089e90611bf0565b80601f01602080910402602001604051908101604052809291908181526020018280546108ca90611bf0565b80156109175780601f106108ec57610100808354040283529160200191610917565b820191906000526020600020905b8154815290600101906020018083116108fa57829003601f168201915b5050505050815260200160028201805461093090611bf0565b80601f016020809104026020016040519081016040528092919081815260200182805461095c90611bf0565b80156109a95780601f1061097e576101008083540402835291602001916109a9565b820191906000526020600020905b81548152906001019060200180831161098c57829003601f168201915b505050505081526020016003820180546109c290611bf0565b80601f01602080910402602001604051908101604052809291908181526020018280546109ee90611bf0565b8015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b50505050508152602001600482018054610a5490611bf0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8090611bf0565b8015610acd5780601f10610aa257610100808354040283529160200191610acd565b820191906000526020600020905b815481529060010190602001808311610ab057829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b03166040820152600782018054606090920191610b0790611bf0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3390611bf0565b8015610b805780601f10610b5557610100808354040283529160200191610b80565b820191906000526020600020905b815481529060010190602001808311610b6357829003601f168201915b50505050508152505091505092915050565b610b9a611451565b610ba460006114b0565b565b610bae611451565b8060008151118015610bc257506040815111155b610c0b5760405162461bcd60e51b815260206004820152601a602482015279496e76616c696420757064617465207479706520737472696e6760301b6044820152606401610266565b600382604051610c1b9190611bd4565b9081526040519081900360200190205460ff1615610c795760405162461bcd60e51b815260206004820152601b60248201527a2ab83230ba32903a3cb8329030b63932b0b23c9032bc34b9ba399760291b6044820152606401610266565b6001600383604051610c8b9190611bd4565b908152604051908190036020019020805491151560ff19909216919091179055600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01610ce78382611c76565b5081604051610cf69190611bd4565b604051908190038120907f07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf90600090a25050565b6000546001600160a01b031690565b3360009081526005602052604090205460ff16610d685760405162461bcd60e51b815260040161026690611b7a565b600383604051610d789190611bd4565b9081526040519081900360200190205460ff16610dd35760405162461bcd60e51b81526020600482015260196024820152782ab730baba3437b934bd32b2103ab83230ba32903a3cb8329760391b6044820152606401610266565b610de085858585856110a5565b5050505050565b60606002805480602002602001604051908101604052809291908181526020016000905b82821015610eb7578382906000526020600020018054610e2a90611bf0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5690611bf0565b8015610ea35780601f10610e7857610100808354040283529160200191610ea3565b820191906000526020600020905b815481529060010190602001808311610e8657829003601f168201915b505050505081526020019060010190610e0b565b50505050905090565b610ec8611451565b6001600160a01b03811660009081526005602052604090205460ff16610f295760405162461bcd60e51b815260206004820152601660248201527529b2b73232b9103737ba1030baba3437b934bd32b21760511b6044820152606401610266565b6001600160a01b038116600081815260056020526040808220805460ff19169055517f98f9958a855d78eae670154a7d047d26968849962c3204c2b12c2228634f4ff89190a250565b610f7a611451565b6001600160a01b038116610fdf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610266565b610fe8816114b0565b50565b610ff3611451565b6001600160a01b03811660009081526005602052604090205460ff16156110595760405162461bcd60e51b815260206004820152601a60248201527929b2b73232b91030b63932b0b23c9030baba3437b934bd32b21760311b6044820152606401610266565b6001600160a01b038116600081815260056020526040808220805460ff19166001179055517fd06d2241a59677d082959f22e5a5212c57a9e890949a9d0f2426efd49f8c5d7f9190a250565b600780549060006110b583611d34565b90915550506001600160a01b03821660009081526006602052604080822090516110e0908690611bd4565b9081526020016040518091039020549050600080821161110f57604051806020016040528060008152506111aa565b6000828152600460205260409020600101805461112b90611bf0565b80601f016020809104026020016040519081016040528092919081815260200182805461115790611bf0565b80156111a45780601f10611179576101008083540402835291602001916111a4565b820191906000526020600020905b81548152906001019060200180831161118757829003601f168201915b50505050505b604080516101008101825242815260208082018a81528284018c905260608301859052608083018a905260075460a084018190526001600160a01b038a1660c085015260e084018990526000908152600490925292902081518155915192935091829190600182019061121d9082611c76565b50604082015160028201906112329082611c76565b50606082015160038201906112479082611c76565b506080820151600482019061125c9082611c76565b5060a0820151600582015560c08201516006820180546001600160a01b0319166001600160a01b0390921691909117905560e082015160078201906112a19082611c76565b5050600180548082018255600091909152825160089091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810191825560208401518493507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7909101906113169082611c76565b506040820151600282019061132b9082611c76565b50606082015160038201906113409082611c76565b50608082015160048201906113559082611c76565b5060a0820151600582015560c08201516006820180546001600160a01b0319166001600160a01b0390921691909117905560e0820151600782019061139a9082611c76565b50505060075460066000876001600160a01b03166001600160a01b03168152602001908152602001600020876040516113d39190611bd4565b908152602001604051809103902081905550846001600160a01b0316600754876040516114009190611bd4565b60405180910390207ff4ffa2dade992ad974b9415d5dc108fa2a4a6de3822a3a0bb50d5e6991bdb8ae8b8b87428b60405161143f959493929190611d5b565b60405180910390a45050505050505050565b3361145a610d2a565b6001600160a01b031614610ba45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610266565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180610100016040528060008152602001606081526020016060815260200160608152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561158c5761158c61154e565b604052919050565b60006001600160401b038211156115ad576115ad61154e565b5060051b60200190565b600082601f8301126115c857600080fd5b8135602083016000806001600160401b038411156115e8576115e861154e565b50601f8301601f19166020016115fd81611564565b91505082815285838301111561161257600080fd5b82826020830137600092810160200192909252509392505050565b600082601f83011261163e57600080fd5b813561165161164c82611594565b611564565b8082825260208201915060208360051b86010192508583111561167357600080fd5b602085015b838110156116b45780356001600160401b0381111561169657600080fd5b6116a5886020838a01016115b7565b84525060209283019201611678565b5095945050505050565b80356001600160a01b03811681146116d557600080fd5b919050565b600082601f8301126116eb57600080fd5b81356116f961164c82611594565b8082825260208201915060208360051b86010192508583111561171b57600080fd5b602085015b838110156116b457611731816116be565b835260209283019201611720565b600080600080600060a0868803121561175757600080fd5b85356001600160401b0381111561176d57600080fd5b6117798882890161162d565b95505060208601356001600160401b0381111561179557600080fd5b6117a18882890161162d565b94505060408601356001600160401b038111156117bd57600080fd5b6117c98882890161162d565b93505060608601356001600160401b038111156117e557600080fd5b6117f1888289016116da565b92505060808601356001600160401b0381111561180d57600080fd5b6118198882890161162d565b9150509295509295909350565b60006020828403121561183857600080fd5b5035919050565b60005b8381101561185a578181015183820152602001611842565b50506000910152565b6000815180845261187b81602086016020860161183f565b601f01601f19169290920160200192915050565b60208152815160208201526000602083015161010060408401526118b7610120840182611863565b90506040840151601f198483030160608501526118d48282611863565b9150506060840151601f198483030160808501526118f28282611863565b9150506080840151601f198483030160a08501526119108282611863565b91505060a084015160c084015260c084015161193760e08501826001600160a01b03169052565b5060e0840151838203601f19016101008501526119548282611863565b95945050505050565b6000806040838503121561197057600080fd5b82356001600160401b0381111561198657600080fd5b611992858286016115b7565b9250506119a1602084016116be565b90509250929050565b600080604083850312156119bd57600080fd5b6119c6836116be565b915060208301356001600160401b038111156119e157600080fd5b6119ed858286016115b7565b9150509250929050565b600060208284031215611a0957600080fd5b81356001600160401b03811115611a1f57600080fd5b611a2b848285016115b7565b949350505050565b600080600080600060a08688031215611a4b57600080fd5b85356001600160401b03811115611a6157600080fd5b611a6d888289016115b7565b95505060208601356001600160401b03811115611a8957600080fd5b611a95888289016115b7565b94505060408601356001600160401b03811115611ab157600080fd5b611abd888289016115b7565b935050611acc606087016116be565b915060808601356001600160401b03811115611ae757600080fd5b611819888289016115b7565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015611b4c57603f19878603018452611b37858351611863565b94506020938401939190910190600101611b1b565b50929695505050505050565b600060208284031215611b6a57600080fd5b611b73826116be565b9392505050565b60208082526024908201527f556e617574686f72697a65643a2053656e646572206e6f7420617574686f72696040820152633d32b21760e11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008251611be681846020870161183f565b9190910192915050565b600181811c90821680611c0457607f821691505b602082108103611c2457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611c7157806000526020600020601f840160051c81016020851015611c515750805b601f840160051c820191505b81811015610de05760008155600101611c5d565b505050565b81516001600160401b03811115611c8f57611c8f61154e565b611ca381611c9d8454611bf0565b84611c2a565b6020601f821160018114611cd75760008315611cbf5750848201515b600019600385901b1c1916600184901b178455610de0565b600084815260208120601f198516915b82811015611d075787850151825560209485019460019092019101611ce7565b5084821015611d255786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b600060018201611d5457634e487b7160e01b600052601160045260246000fd5b5060010190565b60a081526000611d6e60a0830188611863565b8281036020840152611d808188611863565b90508281036040840152611d948187611863565b90508460608401528281036080840152611dae8185611863565b9897505050505050505056fea26469706673582212201b7793479c0b1ef288025392c32a44e9b6e00f09533efbe910b94d53825eaa8964736f6c634300081d0033";

type MockRiskOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRiskOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRiskOracle__factory extends ContractFactory {
  constructor(...args: MockRiskOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    initialSenders: PromiseOrValue<string>[],
    initialUpdateTypes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRiskOracle> {
    return super.deploy(
      initialSenders,
      initialUpdateTypes,
      overrides || {}
    ) as Promise<MockRiskOracle>;
  }
  override getDeployTransaction(
    initialSenders: PromiseOrValue<string>[],
    initialUpdateTypes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      initialSenders,
      initialUpdateTypes,
      overrides || {}
    );
  }
  override attach(address: string): MockRiskOracle {
    return super.attach(address) as MockRiskOracle;
  }
  override connect(signer: Signer): MockRiskOracle__factory {
    return super.connect(signer) as MockRiskOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRiskOracleInterface {
    return new utils.Interface(_abi) as MockRiskOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRiskOracle {
    return new Contract(address, _abi, signerOrProvider) as MockRiskOracle;
  }
}
