// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockVaultV1,
  MockVaultV1Interface,
} from "../../../contracts/mock/MockVaultV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_gov",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
    ],
    name: "feeReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "withdrawFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161065c38038061065c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516105d261008a6000396000604b01526105d26000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806312d43a51146100465780631ce9cb8f14610083578063f2555278146100a4575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405161007a9190610470565b60405180910390f35b6100966100913660046104a0565b6100b7565b60405190815260200161007a565b6100966100b23660046104bb565b61012e565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016100e69190610470565b602060405180830381865afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012791906104ee565b9392505050565b600080836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161015d9190610470565b602060405180830381865afa15801561017a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019e91906104ee565b90506101276001600160a01b0385168483604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610201908490610206565b505050565b600061025b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102e09092919063ffffffff16565b905080516000148061027c57508080602001905181019061027c9190610507565b6102015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606102ef84846000856102f7565b949350505050565b6060824710156103585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102d7565b600080866001600160a01b03168587604051610374919061054d565b60006040518083038185875af1925050503d80600081146103b1576040519150601f19603f3d011682016040523d82523d6000602084013e6103b6565b606091505b50915091506103c7878383876103d2565b979650505050505050565b6060831561044157825160000361043a576001600160a01b0385163b61043a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d7565b50816102ef565b6102ef83838151156104565781518083602001fd5b8060405162461bcd60e51b81526004016102d79190610569565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811461049b57600080fd5b919050565b6000602082840312156104b257600080fd5b61012782610484565b600080604083850312156104ce57600080fd5b6104d783610484565b91506104e560208401610484565b90509250929050565b60006020828403121561050057600080fd5b5051919050565b60006020828403121561051957600080fd5b8151801515811461012757600080fd5b60005b8381101561054457818101518382015260200161052c565b50506000910152565b6000825161055f818460208701610529565b9190910192915050565b6020815260008251806020840152610588816040850160208701610529565b601f01601f1916919091016040019291505056fea26469706673582212209e470f7453ca61c5105225902c4f3021cd386f3720d7a5f3fac3be045166637664736f6c63430008140033";

type MockVaultV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVaultV1__factory extends ContractFactory {
  constructor(...args: MockVaultV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockVaultV1> {
    return super.deploy(_gov, overrides || {}) as Promise<MockVaultV1>;
  }
  override getDeployTransaction(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gov, overrides || {});
  }
  override attach(address: string): MockVaultV1 {
    return super.attach(address) as MockVaultV1;
  }
  override connect(signer: Signer): MockVaultV1__factory {
    return super.connect(signer) as MockVaultV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultV1Interface {
    return new utils.Interface(_abi) as MockVaultV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVaultV1 {
    return new Contract(address, _abi, signerOrProvider) as MockVaultV1;
  }
}
