// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockExternalExchange,
  MockExternalExchangeInterface,
} from "../../../contracts/mock/MockExternalExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506101758061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063beabacc814610030575b600080fd5b61004361003e3660046100da565b610045565b005b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100b89190610116565b50505050565b80356001600160a01b03811681146100d557600080fd5b919050565b6000806000606084860312156100ef57600080fd5b6100f8846100be565b9250610106602085016100be565b9150604084013590509250925092565b60006020828403121561012857600080fd5b8151801515811461013857600080fd5b939250505056fea26469706673582212200942f0d800b1f262fd811c7150430224926340d5569af50da0f78bc18627cc6c64736f6c634300081d0033";

type MockExternalExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockExternalExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockExternalExchange__factory extends ContractFactory {
  constructor(...args: MockExternalExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockExternalExchange> {
    return super.deploy(overrides || {}) as Promise<MockExternalExchange>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockExternalExchange {
    return super.attach(address) as MockExternalExchange;
  }
  override connect(signer: Signer): MockExternalExchange__factory {
    return super.connect(signer) as MockExternalExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockExternalExchangeInterface {
    return new utils.Interface(_abi) as MockExternalExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockExternalExchange {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockExternalExchange;
  }
}
