// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockOracleProvider,
  MockOracleProviderInterface,
} from "../../../contracts/mock/MockOracleProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "getOraclePrice",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "min",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "max",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "provider",
            type: "address",
          },
        ],
        internalType: "struct OracleUtils.ValidatedPrice",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isChainlinkOnChainProvider",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldAdjustTimestamp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506102608061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063377bbdaf146100465780638263c28e146100ab578063eed790c7146100be575b600080fd5b610059610054366004610155565b6100c5565b6040516100a2919081516001600160a01b039081168252602080840151908301526040808401519083015260608084015190830152608092830151169181019190915260a00190565b60405180910390f35b60015b60405190151581526020016100a2565b60006100ae565b6101096040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b50506040805160a0810182526001600160a01b0390921682526103e8602083018190529082015242606082015230608082015290565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561016857600080fd5b82356001600160a01b038116811461017f57600080fd5b915060208301356001600160401b0381111561019a57600080fd5b8301601f810185136101ab57600080fd5b80356001600160401b038111156101c4576101c461013f565b604051601f8201601f19908116603f011681016001600160401b03811182821017156101f2576101f261013f565b60405281815282820160200187101561020a57600080fd5b81602084016020830137600060208383010152809350505050925092905056fea2646970667358221220a70c5fcc717dfbe3f13f7e319c7a7f0d3b1c6778293c3b887e501b9956b1a43564736f6c634300081d0033";

type MockOracleProviderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOracleProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOracleProvider__factory extends ContractFactory {
  constructor(...args: MockOracleProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockOracleProvider> {
    return super.deploy(overrides || {}) as Promise<MockOracleProvider>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockOracleProvider {
    return super.attach(address) as MockOracleProvider;
  }
  override connect(signer: Signer): MockOracleProvider__factory {
    return super.connect(signer) as MockOracleProvider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOracleProviderInterface {
    return new utils.Interface(_abi) as MockOracleProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockOracleProvider {
    return new Contract(address, _abi, signerOrProvider) as MockOracleProvider;
  }
}
