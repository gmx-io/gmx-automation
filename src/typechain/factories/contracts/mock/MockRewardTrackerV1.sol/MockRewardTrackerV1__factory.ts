// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockRewardTrackerV1,
  MockRewardTrackerV1Interface,
} from "../../../../contracts/mock/MockRewardTrackerV1.sol/MockRewardTrackerV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_distributor",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "distributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "setTotalSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161017738038061017783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60e5806100926000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806318160ddd146041578063bfe1092814605c578063f7ea7a3d146085575b600080fd5b604960015481565b6040519081526020015b60405180910390f35b600054606e906001600160a01b031681565b6040516001600160a01b0390911681526020016053565b609560903660046097565b600155565b005b60006020828403121560a857600080fd5b503591905056fea2646970667358221220e769b946f6cdab026b9169c053aac4fdcd15b013415c525ef030ee4deee1c83964736f6c63430008140033";

type MockRewardTrackerV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRewardTrackerV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRewardTrackerV1__factory extends ContractFactory {
  constructor(...args: MockRewardTrackerV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockRewardTrackerV1> {
    return super.deploy(
      _distributor,
      overrides || {}
    ) as Promise<MockRewardTrackerV1>;
  }
  override getDeployTransaction(
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_distributor, overrides || {});
  }
  override attach(address: string): MockRewardTrackerV1 {
    return super.attach(address) as MockRewardTrackerV1;
  }
  override connect(signer: Signer): MockRewardTrackerV1__factory {
    return super.connect(signer) as MockRewardTrackerV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRewardTrackerV1Interface {
    return new utils.Interface(_abi) as MockRewardTrackerV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockRewardTrackerV1 {
    return new Contract(address, _abi, signerOrProvider) as MockRewardTrackerV1;
  }
}
