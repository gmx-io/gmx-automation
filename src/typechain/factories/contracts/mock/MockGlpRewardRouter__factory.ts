/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockGlpRewardRouter,
  MockGlpRewardRouterInterface,
} from "../../../contracts/mock/MockGlpRewardRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minOut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "unstakeAndRedeemGlp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610197806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630f3aa55414610030575b600080fd5b61004361003e3660046100f2565b610055565b60405190815260200160405180910390f35b60405163a9059cbb60e01b81526001600160a01b038281166004830152602482018490526000919086169063a9059cbb906044016020604051808303816000875af11580156100a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cc9190610138565b5091949350505050565b80356001600160a01b03811681146100ed57600080fd5b919050565b6000806000806080858703121561010857600080fd5b610111856100d6565b9350602085013592506040850135915061012d606086016100d6565b905092959194509250565b60006020828403121561014a57600080fd5b8151801515811461015a57600080fd5b939250505056fea264697066735822122046b460fde5ee40e62e406c9962ab73f746427ce74358d6ee914ead21afb9720a64736f6c63430008120033";

type MockGlpRewardRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGlpRewardRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGlpRewardRouter__factory extends ContractFactory {
  constructor(...args: MockGlpRewardRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockGlpRewardRouter> {
    return super.deploy(overrides || {}) as Promise<MockGlpRewardRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockGlpRewardRouter {
    return super.attach(address) as MockGlpRewardRouter;
  }
  override connect(signer: Signer): MockGlpRewardRouter__factory {
    return super.connect(signer) as MockGlpRewardRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGlpRewardRouterInterface {
    return new utils.Interface(_abi) as MockGlpRewardRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGlpRewardRouter {
    return new Contract(address, _abi, signerOrProvider) as MockGlpRewardRouter;
  }
}
