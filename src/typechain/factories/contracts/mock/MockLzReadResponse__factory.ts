// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockLzReadResponse,
  MockLzReadResponseInterface,
} from "../../../contracts/mock/MockLzReadResponse";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    name: "setTotalSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setUint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "uintValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5061015d8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806318160ddd1461005c578063bd02d0f514610077578063d38eebc714610097578063e2a4853a146100b7578063f7ea7a3d146100d9575b600080fd5b61006560015481565b60405190815260200160405180910390f35b6100656100853660046100ec565b60009081526020819052604090205490565b6100656100a53660046100ec565b60006020819052908152604090205481565b6100d76100c5366004610105565b60009182526020829052604090912055565b005b6100d76100e73660046100ec565b600155565b6000602082840312156100fe57600080fd5b5035919050565b6000806040838503121561011857600080fd5b5050803592602090910135915056fea26469706673582212204d28de7f3c8eb4f5e2f56ca5aabcbb0cc87c3e306af28622bb76cd10a95a953664736f6c634300081d0033";

type MockLzReadResponseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLzReadResponseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLzReadResponse__factory extends ContractFactory {
  constructor(...args: MockLzReadResponseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockLzReadResponse> {
    return super.deploy(overrides || {}) as Promise<MockLzReadResponse>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockLzReadResponse {
    return super.attach(address) as MockLzReadResponse;
  }
  override connect(signer: Signer): MockLzReadResponse__factory {
    return super.connect(signer) as MockLzReadResponse__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLzReadResponseInterface {
    return new utils.Interface(_abi) as MockLzReadResponseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLzReadResponse {
    return new Contract(address, _abi, signerOrProvider) as MockLzReadResponse;
  }
}
