// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockSynapseRouter,
  MockSynapseRouterInterface,
} from "../../../contracts/mock/MockSynapseRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "swapAdapter",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "rawParams",
            type: "bytes",
          },
        ],
        internalType: "struct MockSynapseRouter.SwapQuery",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "swapAdapter",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "rawParams",
            type: "bytes",
          },
        ],
        internalType: "struct MockSynapseRouter.SwapQuery",
        name: "destQuery",
        type: "tuple",
      },
    ],
    name: "bridge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setBridgeSlippageFactor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061070a806100206000396000f3fe6080604052600436106100295760003560e01c806315d56c721461002e578063c228814714610050575b600080fd5b34801561003a57600080fd5b5061004e610049366004610476565b600055565b005b61004e61005e3660046105ed565b4685036100b25760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f742062726964676520746f2043757272656e7420436861696e000060448201526064015b60405180910390fd5b60006100c084600054610357565b905081604001518110156101145760405162461bcd60e51b815260206004820152601b60248201527a125b9cdd59999a58da595b9d08109c9a5919d95908105b5bdd5b9d602a1b60448201526064016100a9565b6040516370a0823160e01b81523360048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190610683565b604051636eb1769f60e11b81523360048201523060248201529091506000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa1580156101cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f39190610683565b90508282101561023a5760405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b60448201526064016100a9565b828110156102815760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b60448201526064016100a9565b6040516323b872dd60e01b81523360048201526001600160a01b038a8116602483015260448201859052600091908916906323b872dd906064016020604051808303816000875af11580156102da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fe919061069c565b90508061034b5760405162461bcd60e51b815260206004820152601b60248201527a7472616e7366657246726f6d2072657475726e65642066616c736560281b60448201526064016100a9565b50505050505050505050565b6000610370838368327cb2734119d3b7a9601e1b610377565b9392505050565b600061038484848461038c565b949350505050565b60008080600019858709858702925082811083820303915050806000036103c6578382816103bc576103bc6106be565b0492505050610370565b80841161040d5760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b60448201526064016100a9565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006020828403121561048857600080fd5b5035919050565b80356001600160a01b03811681146104a657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156104e3576104e36104ab565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610511576105116104ab565b604052919050565b600060a0828403121561052b57600080fd5b6105336104c1565b905061053e8261048f565b8152602061054d81840161048f565b82820152604083810135908301526060808401359083015260808301356001600160401b038082111561057f57600080fd5b818501915085601f83011261059357600080fd5b8135818111156105a5576105a56104ab565b6105b7601f8201601f191685016104e9565b915080825286848285010111156105cd57600080fd5b808484018584013760008482840101525080608085015250505092915050565b60008060008060008060c0878903121561060657600080fd5b61060f8761048f565b9550602087013594506106246040880161048f565b93506060870135925060808701356001600160401b038082111561064757600080fd5b6106538a838b01610519565b935060a089013591508082111561066957600080fd5b5061067689828a01610519565b9150509295509295509295565b60006020828403121561069557600080fd5b5051919050565b6000602082840312156106ae57600080fd5b8151801515811461037057600080fd5b634e487b7160e01b600052601260045260246000fdfea2646970667358221220c3b048060be12c4c9f9380057125fe6dfd87b8645773e89244d0dc46acab8a1f64736f6c63430008140033";

type MockSynapseRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSynapseRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSynapseRouter__factory extends ContractFactory {
  constructor(...args: MockSynapseRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSynapseRouter> {
    return super.deploy(overrides || {}) as Promise<MockSynapseRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSynapseRouter {
    return super.attach(address) as MockSynapseRouter;
  }
  override connect(signer: Signer): MockSynapseRouter__factory {
    return super.connect(signer) as MockSynapseRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSynapseRouterInterface {
    return new utils.Interface(_abi) as MockSynapseRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSynapseRouter {
    return new Contract(address, _abi, signerOrProvider) as MockSynapseRouter;
  }
}
