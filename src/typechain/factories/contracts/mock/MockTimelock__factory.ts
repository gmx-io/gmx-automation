// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockTimelock,
  MockTimelockInterface,
} from "../../../contracts/mock/MockTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "setHandler",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "signalSetHandler",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060e08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80631154e80814603757806324ccbe30146037575b600080fd5b604760423660046064565b505050565b005b80356001600160a01b0381168114605f57600080fd5b919050565b600080600060608486031215607857600080fd5b607f846049565b9250608b602085016049565b915060408401358015158114609f57600080fd5b80915050925092509256fea26469706673582212209d549bbc0db85df9e26bac1e4ecfa6c1ec63bf0b0c265b483bcf2f6e4fee8b6f64736f6c634300081d0033";

type MockTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTimelock__factory extends ContractFactory {
  constructor(...args: MockTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockTimelock> {
    return super.deploy(overrides || {}) as Promise<MockTimelock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockTimelock {
    return super.attach(address) as MockTimelock;
  }
  override connect(signer: Signer): MockTimelock__factory {
    return super.connect(signer) as MockTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTimelockInterface {
    return new utils.Interface(_abi) as MockTimelockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTimelock {
    return new Contract(address, _abi, signerOrProvider) as MockTimelock;
  }
}
