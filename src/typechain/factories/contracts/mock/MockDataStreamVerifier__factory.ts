// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockDataStreamVerifier,
  MockDataStreamVerifierInterface,
} from "../../../contracts/mock/MockDataStreamVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "parameterPayload",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061026a806100206000396000f3fe60806040526004361061001e5760003560e01c8063f7e83aee14610023575b600080fd5b61003661003136600461014b565b61004c565b60405161004391906101b6565b60405180910390f35b6060600061005c83850185610204565b90507399bba657f2bbc93c02d617f8ba121cb8fc104acf6001600160a01b038216146100c25760405162461bcd60e51b815260206004820152601160248201527034b73b30b634b2103332b2903a37b5b2b760791b604482015260640160405180910390fd5b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929998505050505050505050565b60008083601f84011261011557600080fd5b5081356001600160401b0381111561012c57600080fd5b60208301915083602082850101111561014457600080fd5b9250929050565b6000806000806040858703121561016157600080fd5b84356001600160401b038082111561017857600080fd5b61018488838901610103565b9096509450602087013591508082111561019d57600080fd5b506101aa87828801610103565b95989497509550505050565b600060208083528351808285015260005b818110156101e3578581018301518582016040015282016101c7565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561021657600080fd5b81356001600160a01b038116811461022d57600080fd5b939250505056fea2646970667358221220c411fe860cb835d3e6723c2816f34337654e12f018f91805cad0f53956b6e3ef64736f6c63430008140033";

type MockDataStreamVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDataStreamVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDataStreamVerifier__factory extends ContractFactory {
  constructor(...args: MockDataStreamVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockDataStreamVerifier> {
    return super.deploy(overrides || {}) as Promise<MockDataStreamVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockDataStreamVerifier {
    return super.attach(address) as MockDataStreamVerifier;
  }
  override connect(signer: Signer): MockDataStreamVerifier__factory {
    return super.connect(signer) as MockDataStreamVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDataStreamVerifierInterface {
    return new utils.Interface(_abi) as MockDataStreamVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockDataStreamVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockDataStreamVerifier;
  }
}
