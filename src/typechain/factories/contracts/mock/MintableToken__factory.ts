// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MintableToken,
  MintableTokenInterface,
} from "../../../contracts/mock/MintableToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101606040523480156200001257600080fd5b50604051620018103803806200181083398101604081905262000035916200029a565b6040805180820190915260018152603160f81b60208201528390819081856003620000618382620003ae565b506004620000708282620003ae565b50620000829150839050600562000148565b610120526200009381600662000148565b61014052815160208084019190912060e052815190820120610100524660a0526200012160e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506009805460ff191660ff9290921691909117905550620004d49050565b60006020835110156200016857620001608362000181565b90506200017b565b81620001758482620003ae565b5060ff90505b92915050565b600080829050601f81511115620001b8578260405163305a27a960e01b8152600401620001af91906200047a565b60405180910390fd5b8051620001c582620004af565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101562000200578181015183820152602001620001e6565b50506000910152565b600082601f8301126200021b57600080fd5b81516001600160401b0380821115620002385762000238620001cd565b604051601f8301601f19908116603f01168101908282118183101715620002635762000263620001cd565b816040528381528660208588010111156200027d57600080fd5b62000290846020830160208901620001e3565b9695505050505050565b600080600060608486031215620002b057600080fd5b83516001600160401b0380821115620002c857600080fd5b620002d68783880162000209565b94506020860151915080821115620002ed57600080fd5b50620002fc8682870162000209565b925050604084015160ff811681146200031457600080fd5b809150509250925092565b600181811c908216806200033457607f821691505b6020821081036200035557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a957600081815260208120601f850160051c81016020861015620003845750805b601f850160051c820191505b81811015620003a55782815560010162000390565b5050505b505050565b81516001600160401b03811115620003ca57620003ca620001cd565b620003e281620003db84546200031f565b846200035b565b602080601f8311600181146200041a5760008415620004015750858301515b600019600386901b1c1916600185901b178555620003a5565b600085815260208120601f198616915b828110156200044b578886015182559484019460019091019084016200042a565b50858210156200046a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200049b816040850160208701620001e3565b601f01601f19169190910160400192915050565b80516020808301519190811015620003555760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516112e16200052f60003960006103af0152600061038401526000610a4001526000610a18015260006109730152600061099d015260006109c701526112e16000f3fe608060405234801561001057600080fd5b50600436106100db5760003560e01c806306fdde03146100e0578063095ea7b3146100fe57806318160ddd1461012157806323b872dd14610133578063313ce567146101465780633644e5151461015b578063395093511461016357806340c10f191461017657806370a082311461018b5780637ecebe00146101b457806384b0196e146101c757806395d89b41146101e25780639dc29fac146101ea578063a457c2d7146101fd578063a9059cbb14610210578063d505accf14610223578063dd62ed3e14610236575b600080fd5b6100e8610249565b6040516100f5919061102d565b60405180910390f35b61011161010c366004611063565b6102db565b60405190151581526020016100f5565b6002545b6040519081526020016100f5565b61011161014136600461108d565b6102f5565b60095460405160ff90911681526020016100f5565b610125610319565b610111610171366004611063565b610328565b610189610184366004611063565b61034a565b005b6101256101993660046110c9565b6001600160a01b031660009081526020819052604090205490565b6101256101c23660046110c9565b610358565b6101cf610376565b6040516100f597969594939291906110e4565b6100e86103ff565b6101896101f8366004611063565b61040e565b61011161020b366004611063565b610418565b61011161021e366004611063565b610498565b61018961023136600461117a565b6104a6565b6101256102443660046111ed565b61060a565b60606003805461025890611220565b80601f016020809104026020016040519081016040528092919081815260200182805461028490611220565b80156102d15780601f106102a6576101008083540402835291602001916102d1565b820191906000526020600020905b8154815290600101906020018083116102b457829003601f168201915b5050505050905090565b6000336102e9818585610635565b60019150505b92915050565b60003361030385828561075a565b61030e8585856107d4565b506001949350505050565b6000610323610966565b905090565b6000336102e981858561033b838361060a565b6103459190611254565b610635565b6103548282610a91565b5050565b6001600160a01b0381166000908152600760205260408120546102ef565b6000606080828080836103aa7f00000000000000000000000000000000000000000000000000000000000000006005610b3e565b6103d57f00000000000000000000000000000000000000000000000000000000000000006006610b3e565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461025890611220565b6103548282610be9565b60003381610426828661060a565b90508381101561048b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61030e8286868403610635565b6000336102e98185856107d4565b834211156104f65760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610482565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105258c610d01565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061058082610d29565b9050600061059082878787610d56565b9050896001600160a01b0316816001600160a01b0316146105f35760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610482565b6105fe8a8a8a610635565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166106975760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610482565b6001600160a01b0382166106f85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610482565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610766848461060a565b905060001981146107ce57818110156107c15760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610482565b6107ce8484848403610635565b50505050565b6001600160a01b0383166108385760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610482565b6001600160a01b03821661089a5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610482565b6001600160a01b038316600090815260208190526040902054818110156109125760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610482565b6001600160a01b038481166000818152602081815260408083208787039055938716808352918490208054870190559251858152909260008051602061128c833981519152910160405180910390a36107ce565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156109bf57507f000000000000000000000000000000000000000000000000000000000000000046145b156109e957507f000000000000000000000000000000000000000000000000000000000000000090565b610323604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6001600160a01b038216610ae75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610482565b8060026000828254610af99190611254565b90915550506001600160a01b0382166000818152602081815260408083208054860190555184815260008051602061128c833981519152910160405180910390a35050565b606060ff8314610b5857610b5183610d7e565b90506102ef565b818054610b6490611220565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9090611220565b8015610bdd5780601f10610bb257610100808354040283529160200191610bdd565b820191906000526020600020905b815481529060010190602001808311610bc057829003601f168201915b505050505090506102ef565b6001600160a01b038216610c495760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610482565b6001600160a01b03821660009081526020819052604090205481811015610cbd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610482565b6001600160a01b03831660008181526020818152604080832086860390556002805487900390555185815291929160008051602061128c833981519152910161074d565b6001600160a01b03811660009081526007602052604090208054600181018255905b50919050565b60006102ef610d36610966565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000610d6787878787610dbd565b91509150610d7481610e77565b5095945050505050565b60606000610d8b83610fbf565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b03831115610dea5750600090506003610e6e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e3e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e6757600060019250925050610e6e565b9150600090505b94509492505050565b6000816004811115610e8b57610e8b611275565b03610e935750565b6001816004811115610ea757610ea7611275565b03610eef5760405162461bcd60e51b815260206004820152601860248201527745434453413a20696e76616c6964207369676e617475726560401b6044820152606401610482565b6002816004811115610f0357610f03611275565b03610f505760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610482565b6003816004811115610f6457610f64611275565b03610fbc5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610482565b50565b600060ff8216601f8111156102ef57604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b8181101561100d57602081850181015186830182015201610ff1565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110406020830184610fe7565b9392505050565b80356001600160a01b038116811461105e57600080fd5b919050565b6000806040838503121561107657600080fd5b61107f83611047565b946020939093013593505050565b6000806000606084860312156110a257600080fd5b6110ab84611047565b92506110b960208501611047565b9150604084013590509250925092565b6000602082840312156110db57600080fd5b61104082611047565b60ff60f81b881681526000602060e08184015261110460e084018a610fe7565b8381036040850152611116818a610fe7565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156111685783518352928401929184019160010161114c565b50909c9b505050505050505050505050565b600080600080600080600060e0888a03121561119557600080fd5b61119e88611047565b96506111ac60208901611047565b95506040880135945060608801359350608088013560ff811681146111d057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561120057600080fd5b61120983611047565b915061121760208401611047565b90509250929050565b600181811c9082168061123457607f821691505b602082108103610d2357634e487b7160e01b600052602260045260246000fd5b808201808211156102ef57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220fc39533e47b2fc39271daf282db573ed1f91ffeb925044c86f64c09e87a7456164736f6c63430008140033";

type MintableTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MintableTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MintableToken__factory extends ContractFactory {
  constructor(...args: MintableTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MintableToken> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    ) as Promise<MintableToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      overrides || {}
    );
  }
  override attach(address: string): MintableToken {
    return super.attach(address) as MintableToken;
  }
  override connect(signer: Signer): MintableToken__factory {
    return super.connect(signer) as MintableToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MintableTokenInterface {
    return new utils.Interface(_abi) as MintableTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MintableToken {
    return new Contract(address, _abi, signerOrProvider) as MintableToken;
  }
}
