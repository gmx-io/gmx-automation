// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockPriceFeed,
  MockPriceFeedInterface,
} from "../../../contracts/mock/MockPriceFeed";

const _abi = [
  {
    inputs: [],
    name: "answer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "setAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506102058061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063313ce5671461006757806350d25bcd1461007b5780637284e4161461008d57806385bb7d69146100ba57806399213cd8146100c3578063feaf968c146100d8575b600080fd5b604051600881526020015b60405180910390f35b6000545b604051908152602001610072565b604080518082018252600b81526a3232b9b1b934b83a34b7b760a91b602082015290516100729190610141565b61007f60005481565b6100d66100d136600461018f565b600055565b005b6100e0610114565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a001610072565b6000806000806000806000546000603c4261012f91906101a8565b92989197509550909350600092509050565b602081526000825180602084015260005b8181101561016f5760208186018101516040868401015201610152565b506000604082850101526040601f19601f83011684010191505092915050565b6000602082840312156101a157600080fd5b5035919050565b818103818111156101c957634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220917016078dbc9039762520eb7390d4e5e586fbb149898bce8f6f8d705ed1bc5564736f6c634300081d0033";

type MockPriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPriceFeed__factory extends ContractFactory {
  constructor(...args: MockPriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPriceFeed> {
    return super.deploy(overrides || {}) as Promise<MockPriceFeed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPriceFeed {
    return super.attach(address) as MockPriceFeed;
  }
  override connect(signer: Signer): MockPriceFeed__factory {
    return super.connect(signer) as MockPriceFeed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPriceFeedInterface {
    return new utils.Interface(_abi) as MockPriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPriceFeed {
    return new Contract(address, _abi, signerOrProvider) as MockPriceFeed;
  }
}
