// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockGlpTimelock,
  MockGlpTimelockInterface,
} from "../../../contracts/mock/MockGlpTimelock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "setSwapFees",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ce8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063da76231614602d575b600080fd5b604060383660046042565b505050505050565b005b60008060008060008060c08789031215605a57600080fd5b86356001600160a01b0381168114607057600080fd5b9860208801359850604088013597606081013597506080810135965060a0013594509250505056fea26469706673582212208085755aebe0ca5e2aa90869c613e39f36622da9fa5fb7d63a07955c2ee2906e64736f6c63430008140033";

type MockGlpTimelockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockGlpTimelockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockGlpTimelock__factory extends ContractFactory {
  constructor(...args: MockGlpTimelockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockGlpTimelock> {
    return super.deploy(overrides || {}) as Promise<MockGlpTimelock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockGlpTimelock {
    return super.attach(address) as MockGlpTimelock;
  }
  override connect(signer: Signer): MockGlpTimelock__factory {
    return super.connect(signer) as MockGlpTimelock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockGlpTimelockInterface {
    return new utils.Interface(_abi) as MockGlpTimelockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockGlpTimelock {
    return new Contract(address, _abi, signerOrProvider) as MockGlpTimelock;
  }
}
