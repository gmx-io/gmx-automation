/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockVaultGovV1,
  MockVaultGovV1Interface,
} from "../../../contracts/mock/MockVaultGovV1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_vault",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "withdrawFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610185806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630e9587f314610030575b600080fd5b61004361003e3660046100f3565b610055565b60405190815260200160405180910390f35b604051631e4aaa4f60e31b81526001600160a01b0383811660048301528281166024830152600091829186169063f2555278906044016020604051808303816000875af11580156100aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ce9190610136565b95945050505050565b80356001600160a01b03811681146100ee57600080fd5b919050565b60008060006060848603121561010857600080fd5b610111846100d7565b925061011f602085016100d7565b915061012d604085016100d7565b90509250925092565b60006020828403121561014857600080fd5b505191905056fea2646970667358221220b0b8cd5e5c295e1c48f870ccaee47e199d85f1a4c0546394d88651fe28e32d5d64736f6c63430008120033";

type MockVaultGovV1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultGovV1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVaultGovV1__factory extends ContractFactory {
  constructor(...args: MockVaultGovV1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockVaultGovV1> {
    return super.deploy(overrides || {}) as Promise<MockVaultGovV1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockVaultGovV1 {
    return super.attach(address) as MockVaultGovV1;
  }
  override connect(signer: Signer): MockVaultGovV1__factory {
    return super.connect(signer) as MockVaultGovV1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultGovV1Interface {
    return new utils.Interface(_abi) as MockVaultGovV1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVaultGovV1 {
    return new Contract(address, _abi, signerOrProvider) as MockVaultGovV1;
  }
}
