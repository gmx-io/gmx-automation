// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IOverridableInboundRatelimit,
  IOverridableInboundRatelimitInterface,
} from "../../../../contracts/mock/MockGMX_Adapter.sol/IOverridableInboundRatelimit";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "addressOrGUIDLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "overridableLength",
        type: "uint256",
      },
    ],
    name: "InputLengthMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isExempt",
            type: "bool",
          },
        ],
        indexed: true,
        internalType: "struct RateLimitExemptAddress[]",
        name: "addresses",
        type: "tuple[]",
      },
    ],
    name: "RateLimitOverrider_ModifiedAddress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32[]",
        name: "guid",
        type: "bytes32[]",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "canOverride",
        type: "bool",
      },
    ],
    name: "RateLimitOverrider_ModifiedGUID",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "limit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "window",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct RateLimiter.RateLimitConfig[]",
        name: "newConfigs",
        type: "tuple[]",
      },
    ],
    name: "RateLimitUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "exemptAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "isExempt",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "guid",
        type: "bytes32",
      },
    ],
    name: "guidOverrides",
    outputs: [
      {
        internalType: "bool",
        name: "canOverride",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "guids",
        type: "bytes32[]",
      },
      {
        internalType: "bool",
        name: "canOverride",
        type: "bool",
      },
    ],
    name: "modifyOverridableGUIDs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isExempt",
            type: "bool",
          },
        ],
        internalType: "struct RateLimitExemptAddress[]",
        name: "_exemptAddresses",
        type: "tuple[]",
      },
    ],
    name: "modifyRateLimitExemptAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "dstEid",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "limit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "window",
            type: "uint256",
          },
        ],
        internalType: "struct RateLimiter.RateLimitConfig[]",
        name: "rateLimitConfigs",
        type: "tuple[]",
      },
    ],
    name: "setRateLimits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IOverridableInboundRatelimit__factory {
  static readonly abi = _abi;
  static createInterface(): IOverridableInboundRatelimitInterface {
    return new utils.Interface(_abi) as IOverridableInboundRatelimitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOverridableInboundRatelimit {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IOverridableInboundRatelimit;
  }
}
