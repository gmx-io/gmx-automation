// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ClaimUtils,
  ClaimUtilsInterface,
} from "../../../contracts/claim/ClaimUtils";

const _abi = [
  {
    inputs: [],
    name: "EmptyAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "InvalidParams",
    type: "error",
  },
] as const;

const _bytecode =
  "";

type ClaimUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimUtils__factory extends ContractFactory {
  constructor(...args: ClaimUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimUtils> {
    return super.deploy(overrides || {}) as Promise<ClaimUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ClaimUtils {
    return super.attach(address) as ClaimUtils;
  }
  override connect(signer: Signer): ClaimUtils__factory {
    return super.connect(signer) as ClaimUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimUtilsInterface {
    return new utils.Interface(_abi) as ClaimUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimUtils {
    return new Contract(address, _abi, signerOrProvider) as ClaimUtils;
  }
}
