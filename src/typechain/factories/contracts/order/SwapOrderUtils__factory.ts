// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SwapOrderUtils,
  SwapOrderUtilsInterface,
} from "../../../contracts/order/SwapOrderUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxOracleTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requestTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requestExpirationTime",
        type: "uint256",
      },
    ],
    name: "OracleTimestampsAreLargerThanRequestExpirationTime",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minOracleTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expectedTimestamp",
        type: "uint256",
      },
    ],
    name: "OracleTimestampsAreSmallerThanRequired",
    type: "error",
  },
  {
    inputs: [],
    name: "UnexpectedMarket",
    type: "error",
  },
] as const;

const _bytecode =
  "0x611a7c61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063da6fe44f1461003a575b600080fd5b81801561004657600080fd5b5061005a610055366004610e5f565b610070565b604051610067919061175f565b60405180910390f35b61007861077f565b60408201515160a001516001600160a01b0316156100a95760405163cc3459ff60e01b815260040160405180910390fd5b6040820151602001516101200151826080015110156100fd57608082015160408301516020015161012001515b604051637d677abf60e01b8152600481019290925260248201526044015b60405180910390fd5b6101156101108360400151602001515190565b610616565b158015610132575060408201516020015161014001518260800151105b1561014f57608082015160408301516020015161014001516100d6565b8151516040516000916001600160a01b03169063bd02d0f5906101a090602001602080825260179082015276524551554553545f45585049524154494f4e5f54494d4560481b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016101d491815260200190565b602060405180830381865afa1580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610215919061182c565b9050600060408401516020015151600881111561023457610234611845565b148015610262575080610251846040015160200151610120015190565b61025b919061185b565b8360a00151115b156102a35760a08301516040840151602001516101200151604051631b0971dd60e31b815260048101929092526024820152604481018290526064016100f4565b60008073__$2ebd8d293950cf319742e0db402ead4961$__635706dc46604051806101a001604052808860000151600001516001600160a01b031681526020018860000151602001516001600160a01b031681526020018860000151608001516001600160a01b031681526020018860000151606001516001600160a01b031681526020018860200151815260200161034289604001515160c0015190565b6001600160a01b031681526020016103638960400151602001516060015190565b815260200188606001518152602001610386896040015160200151610100015190565b815260200161039f896040015160200151610160015190565b156103af578851604001516103ba565b604089015151602001515b6001600160a01b031681526020016103d88960400151516080015190565b6001600160a01b031681526020016103fa896040015160200151610160015190565b15610406576000610413565b6040808a01510151602001515b1515815260200160008152506040518263ffffffff1660e01b815260040161043b9190611909565b6040805180830381865af4158015610457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047b9190611a02565b91509150610493856040015160200151610160015190565b15610577578451805160208201516040928301519288015173__$97f16f82bae4ac682deb2ea1417bfd757e$__936315ff6d2d93929187906104d790516020015190565b60408c015160200151610160015160405160e088901b6001600160e01b03191681526001600160a01b039687166004820152948616602486015292851660448501529084166064840152909216608482015260a481019190915260c401602060405180830381865af4158015610551573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610575919061182c565b505b61057f61077f565b805161058c90600161066a565b60408051808201909152600b81526a37baba383aba2a37b5b2b760a91b602082015281516105bd91600090866106cf565b60208101516105cd90600161066a565b61060d60006040518060400160405280600c81526020016b1bdd5d1c1d5d105b5bdd5b9d60a21b81525084846020015161072c909392919063ffffffff16565b95945050505050565b60008082600881111561062b5761062b611845565b14806106485750600282600881111561064657610646611845565b145b806106645750600482600881111561066257610662611845565b145b92915050565b806001600160401b0381111561068257610682610870565b6040519080825280602002602001820160405280156106c857816020015b6040805180820190915260608152600060208201528152602001906001900390816106a05790505b5090915250565b81846000015184815181106106e6576106e6611a30565b602002602001015160000181905250808460000151848151811061070c5761070c611a30565b6020908102919091018101516001600160a01b0390921691015250505050565b818460000151848151811061074357610743611a30565b602002602001015160000181905250808460000151848151811061076957610769611a30565b6020026020010151602001818152505050505050565b604080516101208101909152606060e08201818152610100830191909152819081526020016107c1604051806040016040528060608152602001606081525090565b81526020016107e3604051806040016040528060608152602001606081525090565b8152602001610805604051806040016040528060608152602001606081525090565b8152602001610827604051806040016040528060608152602001606081525090565b8152602001610849604051806040016040528060608152602001606081525090565b815260200161086b604051806040016040528060608152602001606081525090565b905290565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b03811182821017156108a9576108a9610870565b60405290565b604051608081016001600160401b03811182821017156108a9576108a9610870565b60405161010081016001600160401b03811182821017156108a9576108a9610870565b60405161014081016001600160401b03811182821017156108a9576108a9610870565b604051601f8201601f191681016001600160401b038111828210171561093f5761093f610870565b604052919050565b6001600160a01b038116811461095c57600080fd5b50565b803561096a81610947565b919050565b600060e0828403121561098157600080fd5b60405160e081016001600160401b03811182821017156109a3576109a3610870565b60405290508082356109b481610947565b815260208301356109c481610947565b602082015260408301356109d781610947565b604082015260608301356109ea81610947565b60608201526109fb6080840161095f565b6080820152610a0c60a0840161095f565b60a0820152610a1d60c0840161095f565b60c08201525092915050565b60006001600160401b03821115610a4257610a42610870565b5060051b60200190565b600082601f830112610a5d57600080fd5b81356020610a72610a6d83610a29565b610917565b82815260059290921b84018101918181019086841115610a9157600080fd5b8286015b84811015610ab5578035610aa881610947565b8352918301918301610a95565b509695505050505050565b80356009811061096a57600080fd5b80356003811061096a57600080fd5b60006101808284031215610af157600080fd5b610af9610886565b9050610b0482610ac0565b8152610b1260208301610acf565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016080830135818301525092915050565b8035801515811461096a57600080fd5b600060808284031215610bab57600080fd5b610bb36108af565b9050610bbe82610b89565b8152610bcc60208301610b89565b6020820152610bdd60408301610b89565b6040820152610bee60608301610b89565b606082015292915050565b600082601f830112610c0a57600080fd5b81356020610c1a610a6d83610a29565b82815260059290921b84018101918181019086841115610c3957600080fd5b8286015b84811015610ab55780358352918301918301610c3d565b60006102408284031215610c6757600080fd5b610c6f6108af565b905081356001600160401b0380821115610c8857600080fd5b908301906101008286031215610c9d57600080fd5b610ca56108d1565b610cae8361095f565b8152610cbc6020840161095f565b6020820152610ccd6040840161095f565b6040820152610cde6060840161095f565b6060820152610cef6080840161095f565b6080820152610d0060a0840161095f565b60a0820152610d1160c0840161095f565b60c082015260e083013582811115610d2857600080fd5b610d3487828601610a4c565b60e0830152508352610d498560208601610ade565b6020840152610d5c856101a08601610b99565b6040840152610220840135915080821115610d7657600080fd5b50610d8384828501610bf9565b60608301525092915050565b600060808284031215610da157600080fd5b610da96108af565b90508135610db681610947565b81526020820135610dc681610947565b60208201526040820135610dd981610947565b60408201526060820135610bee81610947565b600082601f830112610dfd57600080fd5b81356020610e0d610a6d83610a29565b82815260079290921b84018101918181019086841115610e2c57600080fd5b8286015b84811015610ab557610e428882610d8f565b835291830191608001610e30565b80356002811061096a57600080fd5b600060208284031215610e7157600080fd5b81356001600160401b0380821115610e8857600080fd5b908301906102608286031215610e9d57600080fd5b610ea56108f4565b610eaf868461096f565b815260e083013560208201526101008084013583811115610ecf57600080fd5b610edb88828701610c54565b6040840152506101208085013584811115610ef557600080fd5b610f0189828801610dec565b606085015250610140850135608084015261016085013560a0840152610f2b886101808701610d8f565b60c0840152610f3d610200860161095f565b60e084015261022085013582840152610f596102408601610e50565b908301525095945050505050565b6000815180845260005b81811015610f8d57602081850181015186830182015201610f71565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03169052565b600082825180855260208086019550808260051b8401018186016000805b8581101561105857601f19878503018a52825160408151818752610ffe82880182610f67565b92880151878403888a0152805180855290890193869350890191505b808310156110435783516001600160a01b0316825292880192600192909201919088019061101a565b509b87019b9550505091840191600101610fd8565b509198975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156110dd57898603605f19018452845180518888526110b789890182610f67565b918401516001600160a01b03169784019790975295509381019392810192600101611093565b50808801519550888503818a01525050505061060d8183610fba565b600082825180855260208086019550808260051b8401018186016000805b8581101561105857601f19878503018a5282516040815181875261113d82880182610f67565b92880151878403888a0152805180855290890193869350890191505b808310156111795783518252928801926001929092019190880190611159565b509b87019b9550505091840191600101611117565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156111fc57898603605f19018452845180518888526111df89890182610f67565b9184015197840197909752955093810193928101926001016111bb565b50808801519550888503818a01525050505061060d81836110f9565b600082825180855260208086019550808260051b8401018186016000805b8581101561105857601f19878503018a5282516040815181875261125c82880182610f67565b92880151878403888a0152805180855290890193869350890191505b808310156112985783518252928801926001929092019190880190611278565b509b87019b9550505091840191600101611236565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561131b57898603605f19018452845180518888526112fe89890182610f67565b9184015197840197909752955093810193928101926001016112da565b50808801519550888503818a01525050505061060d8183611218565b600082825180855260208086019550808260051b8401018186016000805b8581101561105857601f19878503018a5282516040815181875261137b82880182610f67565b92880151878403888a0152805180855290890193869350890191505b808310156113b957835115158252928801926001929092019190880190611397565b509b87019b9550505091840191600101611355565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561143e57898603605f190184528451805188885261141f89890182610f67565b91840151151597840197909752955093810193928101926001016113fb565b50808801519550888503818a01525050505061060d8183611337565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561131b57898603605f19018452845180518888526114ab89890182610f67565b918401519784019790975295509381019392810192600101611487565b60008282518085526020808601955060058183821b8501018287016000805b8681101561157657601f1980898603018c5283516040815181885261150e82890182610f67565b928a0151888403898c01528051808552908b019392508a83019150808a1b83018b01875b8281101561155e578685830301845261154c828751610f67565b958d0195938d01939150600101611532565b509f8b019f98505050948801945050506001016114e7565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561160257898603605f19018452845180518888526115d689890182610f67565b91840151888303898601529190506115ee8183610f67565b9750505093810193928101926001016115b2565b50808801519550888503818a01525050505061060d81836114c8565b600081518084526020808501945084600583811b87018387016000805b87811015611576578584038b5282516040815181875261165d82880182610f67565b928a0151878403888c01528051808552908b019392508a8301915080891b83018b01865b828110156116af57601f1985830301845261169d828751610f67565b958d0195938d01939150600101611681565b509e8b019e9750505093880193505060010161163b565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561174357898603605f190184528451805188885261171789890182610f67565b918401518883038986015291905061172f8183610f67565b9750505093810193928101926001016116f3565b50808801519550888503818a01525050505061060d818361161e565b602081526000825160e0602084015261177c610100840182611066565b90506020840151601f198085840301604086015261179a838361118e565b925060408601519150808584030160608601526117b783836112ad565b925060608601519150808584030160808601526117d483836113ce565b925060808601519150808584030160a08601526117f1838361145a565b925060a08601519150808584030160c086015261180e8383611585565b925060c08601519150808584030160e08601525061060d82826116c6565b60006020828403121561183e57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b8082018082111561066457634e487b7160e01b600052601160045260246000fd5b600081518084526020808501945080840160005b838110156118dc57815180516001600160a01b039081168952848201518116858a01526040808301518216908a0152606091820151169088015260809096019590820190600101611890565b509495945050505050565b6006811061190557634e487b7160e01b600052602160045260246000fd5b9052565b6020815261191b602082018351610fad565b6000602083015161192f6040840182610fad565b5060408301516119426060840182610fad565b5060608301516119556080840182610fad565b50608083015160a083015260a083015161197260c0840182610fad565b5060c083015160e083015260e08301516101a0610100818186015261199b6101c086018461187c565b90860151610120868101919091528601519092506101406119be81870183610fad565b86015190506101606119d286820183610fad565b86015190506101806119e78682018315159052565b86015190506119f8858301826118e7565b5090949350505050565b60008060408385031215611a1557600080fd5b8251611a2081610947565b6020939093015192949293505050565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220379ac036a77a61948bf1b220f625c642319e3ae66dfbfef4498ba358b7cefc4e64736f6c63430008140033";

type SwapOrderUtilsConstructorParams =
  | [linkLibraryAddresses: SwapOrderUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapOrderUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class SwapOrderUtils__factory extends ContractFactory {
  constructor(...args: SwapOrderUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        SwapOrderUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: SwapOrderUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$2ebd8d293950cf319742e0db402ead4961\$__", "g"),
      linkLibraryAddresses["contracts/swap/SwapUtils.sol:SwapUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$97f16f82bae4ac682deb2ea1417bfd757e\$__", "g"),
      linkLibraryAddresses[
        "contracts/multichain/MultichainUtils.sol:MultichainUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapOrderUtils> {
    return super.deploy(overrides || {}) as Promise<SwapOrderUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapOrderUtils {
    return super.attach(address) as SwapOrderUtils;
  }
  override connect(signer: Signer): SwapOrderUtils__factory {
    return super.connect(signer) as SwapOrderUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapOrderUtilsInterface {
    return new utils.Interface(_abi) as SwapOrderUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapOrderUtils {
    return new Contract(address, _abi, signerOrProvider) as SwapOrderUtils;
  }
}

export interface SwapOrderUtilsLibraryAddresses {
  ["contracts/swap/SwapUtils.sol:SwapUtils"]: string;
  ["contracts/multichain/MultichainUtils.sol:MultichainUtils"]: string;
}
