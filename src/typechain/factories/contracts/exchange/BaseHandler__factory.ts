// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BaseHandler,
  BaseHandlerInterface,
} from "../../../contracts/exchange/BaseHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
      {
        internalType: "contract EventEmitter",
        name: "_eventEmitter",
        type: "address",
      },
      {
        internalType: "contract IOracle",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "InvalidNativeTokenSender",
    type: "error",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eventEmitter",
    outputs: [
      {
        internalType: "contract EventEmitter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b506040516103bb3803806103bb8339810160408190526100309161006b565b6001600160a01b0393841660805291831660a05290821660c0521660e0526100ca565b6001600160a01b038116811461006857600080fd5b50565b6000806000806080858703121561008157600080fd5b845161008c81610053565b602086015190945061009d81610053565b60408601519093506100ae81610053565b60608601519092506100bf81610053565b939692955090935050565b60805160a05160c05160e0516102b26101096000396000610216015260006101e2015260008181604c01526101ae0152600061016401526102b26000f3fe6080604052600436106100435760003560e01c80634a4a7b0414610152578063660d0d671461019c5780637dc0d1d0146101d05780639ff78c301461020457600080fd5b3661014d5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321f8a7216040516020016100a09060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016100d491815260200190565b602060405180830381865afa1580156100f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101159190610238565b9050336001600160a01b0382161461014b573360405163738d28df60e11b81526004016101429190610268565b60405180910390fd5b005b600080fd5b34801561015e57600080fd5b506101867f000000000000000000000000000000000000000000000000000000000000000081565b6040516101939190610268565b60405180910390f35b3480156101a857600080fd5b506101867f000000000000000000000000000000000000000000000000000000000000000081565b3480156101dc57600080fd5b506101867f000000000000000000000000000000000000000000000000000000000000000081565b34801561021057600080fd5b506101867f000000000000000000000000000000000000000000000000000000000000000081565b60006020828403121561024a57600080fd5b81516001600160a01b038116811461026157600080fd5b9392505050565b6001600160a01b039190911681526020019056fea2646970667358221220af7c5d37278a0a9332db31f21807be0810ba0e799259ff0612056b3a66e5bcab64736f6c634300081d0033";

type BaseHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseHandler__factory extends ContractFactory {
  constructor(...args: BaseHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseHandler> {
    return super.deploy(
      _roleStore,
      _dataStore,
      _eventEmitter,
      _oracle,
      overrides || {}
    ) as Promise<BaseHandler>;
  }
  override getDeployTransaction(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _roleStore,
      _dataStore,
      _eventEmitter,
      _oracle,
      overrides || {}
    );
  }
  override attach(address: string): BaseHandler {
    return super.attach(address) as BaseHandler;
  }
  override connect(signer: Signer): BaseHandler__factory {
    return super.connect(signer) as BaseHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseHandlerInterface {
    return new utils.Interface(_abi) as BaseHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseHandler {
    return new Contract(address, _abi, signerOrProvider) as BaseHandler;
  }
}
