// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BaseOrderHandler,
  BaseOrderHandlerInterface,
} from "../../../contracts/exchange/BaseOrderHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RoleStore",
        name: "_roleStore",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "_dataStore",
        type: "address",
      },
      {
        internalType: "contract EventEmitter",
        name: "_eventEmitter",
        type: "address",
      },
      {
        internalType: "contract IOracle",
        name: "_oracle",
        type: "address",
      },
      {
        internalType: "contract MultichainVault",
        name: "_multichainVault",
        type: "address",
      },
      {
        internalType: "contract OrderVault",
        name: "_orderVault",
        type: "address",
      },
      {
        internalType: "contract ISwapHandler",
        name: "_swapHandler",
        type: "address",
      },
      {
        internalType: "contract IReferralStorage",
        name: "_referralStorage",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "msgSender",
        type: "address",
      },
    ],
    name: "InvalidNativeTokenSender",
    type: "error",
  },
  {
    inputs: [],
    name: "dataStore",
    outputs: [
      {
        internalType: "contract DataStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "eventEmitter",
    outputs: [
      {
        internalType: "contract EventEmitter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "multichainVault",
    outputs: [
      {
        internalType: "contract MultichainVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "orderVault",
    outputs: [
      {
        internalType: "contract OrderVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referralStorage",
    outputs: [
      {
        internalType: "contract IReferralStorage",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapHandler",
    outputs: [
      {
        internalType: "contract ISwapHandler",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x61018060405234801561001157600080fd5b5060405161054d38038061054d83398101604081905261003091610085565b6001600160a01b0397881660805295871660a05292861660c05292851660e052841661010052908316610120528216610140521661016052610135565b6001600160a01b038116811461008257600080fd5b50565b600080600080600080600080610100898b0312156100a257600080fd5b88516100ad8161006d565b60208a01519098506100be8161006d565b60408a01519097506100cf8161006d565b60608a01519096506100e08161006d565b60808a01519095506100f18161006d565b60a08a01519094506101028161006d565b60c08a01519093506101138161006d565b60e08a01519092506101248161006d565b809150509295985092959890939650565b60805160a05160c05160e051610100516101205161014051610160516103ad6101a0600039600061018f015260006102a9015260006102dd0152600061020d015260006103110152600061027501526000818160770152610241015260006101d901526103ad6000f3fe60806040526004361061006e5760003560e01c80626cc35e1461017d5780634a4a7b04146101c7578063528a65f4146101fb578063660d0d671461022f5780637dc0d1d0146102635780638a53aaac1461029757806393845e46146102cb5780639ff78c30146102ff57600080fd5b366101785760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321f8a7216040516020016100cb9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016100ff91815260200190565b602060405180830381865afa15801561011c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101409190610333565b9050336001600160a01b03821614610176573360405163738d28df60e11b815260040161016d9190610363565b60405180910390fd5b005b600080fd5b34801561018957600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b6040516101be9190610363565b60405180910390f35b3480156101d357600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561020757600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561023b57600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561026f57600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a357600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d757600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b34801561030b57600080fd5b506101b17f000000000000000000000000000000000000000000000000000000000000000081565b60006020828403121561034557600080fd5b81516001600160a01b038116811461035c57600080fd5b9392505050565b6001600160a01b039190911681526020019056fea2646970667358221220ad64c4db7677a13b8230eaaca1f012a4d0fdcbd3ff5ccbd8cc884cf1df73078064736f6c63430008140033";

type BaseOrderHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseOrderHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseOrderHandler__factory extends ContractFactory {
  constructor(...args: BaseOrderHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _multichainVault: PromiseOrValue<string>,
    _orderVault: PromiseOrValue<string>,
    _swapHandler: PromiseOrValue<string>,
    _referralStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseOrderHandler> {
    return super.deploy(
      _roleStore,
      _dataStore,
      _eventEmitter,
      _oracle,
      _multichainVault,
      _orderVault,
      _swapHandler,
      _referralStorage,
      overrides || {}
    ) as Promise<BaseOrderHandler>;
  }
  override getDeployTransaction(
    _roleStore: PromiseOrValue<string>,
    _dataStore: PromiseOrValue<string>,
    _eventEmitter: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    _multichainVault: PromiseOrValue<string>,
    _orderVault: PromiseOrValue<string>,
    _swapHandler: PromiseOrValue<string>,
    _referralStorage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _roleStore,
      _dataStore,
      _eventEmitter,
      _oracle,
      _multichainVault,
      _orderVault,
      _swapHandler,
      _referralStorage,
      overrides || {}
    );
  }
  override attach(address: string): BaseOrderHandler {
    return super.attach(address) as BaseOrderHandler;
  }
  override connect(signer: Signer): BaseOrderHandler__factory {
    return super.connect(signer) as BaseOrderHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseOrderHandlerInterface {
    return new utils.Interface(_abi) as BaseOrderHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseOrderHandler {
    return new Contract(address, _abi, signerOrProvider) as BaseOrderHandler;
  }
}
