// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FeeDistributorUtils,
  FeeDistributorUtilsInterface,
} from "../../../contracts/fee/FeeDistributorUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balancesLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetBalancesLength",
        type: "uint256",
      },
    ],
    name: "BridgingBalanceArrayMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "keepersLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "keeperTargetBalancesLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "keeperVersionsLength",
        type: "uint256",
      },
    ],
    name: "KeeperArrayLengthMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
    ],
    name: "calculateKeeperCosts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "targetBalances",
        type: "uint256[]",
      },
    ],
    name: "computeTransfers",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "from",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "to",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Transfer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
    ],
    name: "retrieveChainIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610f46610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80634fb811e91461005057806357ed18eb1461007d57806358b428251461009d575b600080fd5b61006361005e3660046109c9565b6100bd565b604080519283526020830191909152015b60405180910390f35b61009061008b3660046109c9565b61039f565b60405161007491906109e6565b6100b06100ab366004610aff565b610488565b6040516100749190610b66565b6000806000836001600160a01b0316635948f7336040516020016100e090610bba565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161011491815260200190565b600060405180830381865afa158015610131573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101599190810190610bf0565b90506000846001600160a01b03166386ac6bdf60405160200161017b90610bba565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016101af91815260200190565b600060405180830381865afa1580156101cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101f49190810190610c8e565b90506000856001600160a01b031663116bb92960405160200161021690610bba565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161024a91815260200190565b600060405180830381865afa158015610267573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028f9190810190610d19565b9050815183511415806102a457508051835114155b156102de57825182518251604051630fcc1b9160e11b81526004810193909352602483019190915260448201526064015b60405180910390fd5b60008060005b855181101561039157600085828151811061030157610301610db2565b60200260200101519050600087838151811061031f5761031f610db2565b60200260200101516001600160a01b0316319050808211156103875760006103478284610dde565b905086848151811061035b5761035b610db2565b6020026020010151610378576103718187610df1565b9550610385565b6103828186610df1565b94505b505b50506001016102e4565b509097909650945050505050565b60606000826001600160a01b03166386ac6bdf6040516020016103ee9060208082526018908201527711915157d11254d5149250955513d497d0d210525397d25160421b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161042291815260200190565b600060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104679190810190610c8e565b90506104828160006001845161047d9190610dde565b610806565b92915050565b815181516060919081146104bc57825160405163bd3b23af60e01b81526102d5918391600401918252602082015260400190565b6000816001600160401b038111156104d6576104d6610a29565b6040519080825280602002602001820160405280156104ff578160200160208202803683370190505b50905060005b828110156105705785818151811061051f5761051f610db2565b602002602001015185828151811061053957610539610db2565b602002602001015161054b9190610e04565b82828151811061055d5761055d610db2565b6020908102919091010152600101610505565b50600061057d8380610e2b565b6001600160401b0381111561059457610594610a29565b6040519080825280602002602001820160405280156105cd57816020015b6105ba610990565b8152602001906001900390816105b25790505b5090506000805b848110156107595760008482815181106105f0576105f0610db2565b602002602001015113156107515760005b85811080156106295750600085838151811061061f5761061f610db2565b6020026020010151135b1561074f57600085828151811061064257610642610db2565b6020026020010151121561073d57600061069786848151811061066757610667610db2565b602002602001015187848151811061068157610681610db2565b602002602001015161069290610e42565b610978565b9050801561073b576040518060600160405280838152602001848152602001828152508585806106c690610e5e565b9650815181106106d8576106d8610db2565b6020026020010181905250808684815181106106f6576106f6610db2565b6020026020010181815161070a9190610e04565b9052508551819087908490811061072357610723610db2565b602002602001018181516107379190610e77565b9052505b505b8061074781610e5e565b915050610601565b505b6001016105d4565b506000816001600160401b0381111561077457610774610a29565b6040519080825280602002602001820160405280156107ad57816020015b61079a610990565b8152602001906001900390816107925790505b50905060005b828110156107fa578381815181106107cd576107cd610db2565b60200260200101518282815181106107e7576107e7610db2565b60209081029190910101526001016107b3565b50979650505050505050565b818160008560026108178585610e04565b6108219190610e9f565b61082b9087610e77565b8151811061083b5761083b610db2565b602002602001015190505b81831361094a575b8086848151811061086157610861610db2565b60200260200101511015610881578261087981610edb565b93505061084e565b8086838151811061089457610894610db2565b602002602001015111156108b457816108ac81610ef3565b925050610881565b818313610945578582815181106108cd576108cd610db2565b60200260200101518684815181106108e7576108e7610db2565b602002602001015187858151811061090157610901610db2565b6020026020010188858151811061091a5761091a610db2565b6020908102919091010191909152528261093381610edb565b935050818061094190610ef3565b9250505b610846565b8185121561095d5761095d868684610806565b8383121561097057610970868486610806565b505050505050565b60008183126109875781610989565b825b9392505050565b60405180606001604052806000815260200160008152602001600081525090565b6001600160a01b03811681146109c657600080fd5b50565b6000602082840312156109db57600080fd5b8135610989816109b1565b602080825282518282018190526000918401906040840190835b81811015610a1e578351835260209384019390920191600101610a00565b509095945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610a6757610a67610a29565b604052919050565b60006001600160401b03821115610a8857610a88610a29565b5060051b60200190565b600082601f830112610aa357600080fd5b8135610ab6610ab182610a6f565b610a3f565b8082825260208201915060208360051b860101925085831115610ad857600080fd5b602085015b83811015610af5578035835260209283019201610add565b5095945050505050565b60008060408385031215610b1257600080fd5b82356001600160401b03811115610b2857600080fd5b610b3485828601610a92565b92505060208301356001600160401b03811115610b5057600080fd5b610b5c85828601610a92565b9150509250929050565b602080825282518282018190526000918401906040840190835b81811015610a1e57835180518452602081015160208501526040810151604085015250606083019250602084019350600181019050610b80565b6020808252601c908201527b4645455f4449535452494255544f525f4b45455045525f434f53545360201b604082015260600190565b600060208284031215610c0257600080fd5b81516001600160401b03811115610c1857600080fd5b8201601f81018413610c2957600080fd5b8051610c37610ab182610a6f565b8082825260208201915060208360051b850101925086831115610c5957600080fd5b6020840193505b82841015610c84578351610c73816109b1565b825260209384019390910190610c60565b9695505050505050565b600060208284031215610ca057600080fd5b81516001600160401b03811115610cb657600080fd5b8201601f81018413610cc757600080fd5b8051610cd5610ab182610a6f565b8082825260208201915060208360051b850101925086831115610cf757600080fd5b6020840193505b82841015610c84578351825260209384019390910190610cfe565b600060208284031215610d2b57600080fd5b81516001600160401b03811115610d4157600080fd5b8201601f81018413610d5257600080fd5b8051610d60610ab182610a6f565b8082825260208201915060208360051b850101925086831115610d8257600080fd5b6020840193505b82841015610c845783518015158114610da157600080fd5b825260209384019390910190610d89565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561048257610482610dc8565b8082018082111561048257610482610dc8565b8181036000831280158383131683831282161715610e2457610e24610dc8565b5092915050565b808202811582820484141761048257610482610dc8565b6000600160ff1b8201610e5757610e57610dc8565b5060000390565b600060018201610e7057610e70610dc8565b5060010190565b8082018281126000831280158216821582161715610e9757610e97610dc8565b505092915050565b600082610ebc57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610ed657610ed6610dc8565b500590565b60006001600160ff1b018201610e7057610e70610dc8565b6000600160ff1b8201610f0857610f08610dc8565b50600019019056fea2646970667358221220f74449ea9890ff5afa5e2fa8280b4cff645590a25e88fa499b5374764d12dee964736f6c634300081d0033";

type FeeDistributorUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeDistributorUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeDistributorUtils__factory extends ContractFactory {
  constructor(...args: FeeDistributorUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeDistributorUtils> {
    return super.deploy(overrides || {}) as Promise<FeeDistributorUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeDistributorUtils {
    return super.attach(address) as FeeDistributorUtils;
  }
  override connect(signer: Signer): FeeDistributorUtils__factory {
    return super.connect(signer) as FeeDistributorUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeDistributorUtilsInterface {
    return new utils.Interface(_abi) as FeeDistributorUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeDistributorUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeDistributorUtils;
  }
}
