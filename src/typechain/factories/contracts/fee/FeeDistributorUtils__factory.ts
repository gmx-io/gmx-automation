// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FeeDistributorUtils,
  FeeDistributorUtilsInterface,
} from "../../../contracts/fee/FeeDistributorUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balancesLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "targetBalancesLength",
        type: "uint256",
      },
    ],
    name: "BridgingBalanceArrayMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "targetBalances",
        type: "uint256[]",
      },
    ],
    name: "computeTransfers",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "from",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "to",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Transfer[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "chainIds",
        type: "uint256[]",
      },
    ],
    name: "sortChainIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61096d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806358b42825146100455780637ab2834d1461006e575b600080fd5b6100586100533660046106b0565b61008e565b6040516100659190610713565b60405180910390f35b61008161007c36600461076c565b610436565b60405161006591906107a8565b815181516060919081146100cb57825160405163bd3b23af60e01b81526100c2918391600401918252602082015260400190565b60405180910390fd5b6000816001600160401b038111156100e5576100e5610600565b60405190808252806020026020018201604052801561010e578160200160208202803683370190505b50905060005b828110156101895785818151811061012e5761012e6107ec565b6020026020010151858281518110610148576101486107ec565b602002602001015161015a9190610818565b82828151811061016c5761016c6107ec565b6020908102919091010152806101818161083f565b915050610114565b5060006101968380610858565b6001600160401b038111156101ad576101ad610600565b6040519080825280602002602001820160405280156101e657816020015b6101d36105df565b8152602001906001900390816101cb5790505b5090506000805b8481101561037c576000848281518110610209576102096107ec565b6020026020010151131561036a5760005b858110801561024257506000858381518110610238576102386107ec565b6020026020010151135b1561036857600085828151811061025b5761025b6107ec565b602002602001015112156103565760006102b0868481518110610280576102806107ec565b602002602001015187848151811061029a5761029a6107ec565b60200260200101516102ab9061086f565b610455565b90508015610354576040518060600160405280838152602001848152602001828152508585806102df9061083f565b9650815181106102f1576102f16107ec565b60200260200101819052508086848151811061030f5761030f6107ec565b602002602001018181516103239190610818565b9052508551819087908490811061033c5761033c6107ec565b60200260200101818151610350919061088b565b9052505b505b806103608161083f565b91505061021a565b505b806103748161083f565b9150506101ed565b506000816001600160401b0381111561039757610397610600565b6040519080825280602002602001820160405280156103d057816020015b6103bd6105df565b8152602001906001900390816103b55790505b50905060005b82811015610428578381815181106103f0576103f06107ec565b602002602001015182828151811061040a5761040a6107ec565b602002602001018190525080806104209061083f565b9150506103d6565b509450505050505b92915050565b60606104518260006001855161044c91906108b3565b61046d565b5090565b60008183126104645781610466565b825b9392505050565b8181600085600261047e8585610818565b61048891906108c6565b610492908761088b565b815181106104a2576104a26107ec565b602002602001015190505b8183136105b1575b808684815181106104c8576104c86107ec565b602002602001015110156104e857826104e081610902565b9350506104b5565b808683815181106104fb576104fb6107ec565b6020026020010151111561051b57816105138161091a565b9250506104e8565b8183136105ac57858281518110610534576105346107ec565b602002602001015186848151811061054e5761054e6107ec565b6020026020010151878581518110610568576105686107ec565b60200260200101888581518110610581576105816107ec565b6020908102919091010191909152528261059a81610902565b93505081806105a89061091a565b9250505b6104ad565b818512156105c4576105c486868461046d565b838312156105d7576105d786848661046d565b505050505050565b60405180606001604052806000815260200160008152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261062757600080fd5b813560206001600160401b038083111561064357610643610600565b8260051b604051601f19603f8301168101818110848211171561066857610668610600565b60405293845285810183019383810192508785111561068657600080fd5b83870191505b848210156106a55781358352918301919083019061068c565b979650505050505050565b600080604083850312156106c357600080fd5b82356001600160401b03808211156106da57600080fd5b6106e686838701610616565b935060208501359150808211156106fc57600080fd5b5061070985828601610616565b9150509250929050565b602080825282518282018190526000919060409081850190868401855b8281101561075f5781518051855286810151878601528501518585015260609093019290850190600101610730565b5091979650505050505050565b60006020828403121561077e57600080fd5b81356001600160401b0381111561079457600080fd5b6107a084828501610616565b949350505050565b6020808252825182820181905260009190848201906040850190845b818110156107e0578351835292840192918401916001016107c4565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561083857610838610802565b5092915050565b60006001820161085157610851610802565b5060010190565b808202811582820484141761043057610430610802565b6000600160ff1b820161088457610884610802565b5060000390565b80820182811260008312801582168215821617156108ab576108ab610802565b505092915050565b8181038181111561043057610430610802565b6000826108e357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156108fd576108fd610802565b500590565b60006001600160ff1b01820161085157610851610802565b6000600160ff1b820161092f5761092f610802565b50600019019056fea2646970667358221220372979c0baed7cea524a98f5d775f365198ce7d5ae1fb4d3ee09890bfbd9374664736f6c63430008140033";

type FeeDistributorUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeDistributorUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeDistributorUtils__factory extends ContractFactory {
  constructor(...args: FeeDistributorUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeDistributorUtils> {
    return super.deploy(overrides || {}) as Promise<FeeDistributorUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeDistributorUtils {
    return super.attach(address) as FeeDistributorUtils;
  }
  override connect(signer: Signer): FeeDistributorUtils__factory {
    return super.connect(signer) as FeeDistributorUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeDistributorUtilsInterface {
    return new utils.Interface(_abi) as FeeDistributorUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeDistributorUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeDistributorUtils;
  }
}
