// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FeeSwapUtils,
  FeeSwapUtilsInterface,
} from "../../../contracts/fee/FeeSwapUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "remainingAmount",
        type: "uint256",
      },
    ],
    name: "InvalidAmountInForFeeBatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeBatchTokensLength",
        type: "uint256",
      },
    ],
    name: "InvalidFeeBatchTokenIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "bridgingToken",
        type: "address",
      },
    ],
    name: "InvalidSwapPathForV1",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6112d5610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80635cc28b0714610045578063e1af6c2d14610067575b600080fd5b81801561005157600080fd5b50610065610060366004610b9a565b610087565b005b81801561007357600080fd5b50610065610082366004610c35565b61027a565b6000806100968a888887610595565b91509150876001600160a01b031685600187516100b39190610cfe565b815181106100c3576100c3610d25565b60200260200101516001600160a01b0316146100ff57848860405163339727dd60e11b81526004016100f6929190610d8d565b60405180910390fd5b838260400151878151811061011657610116610d25565b6020026020010181815161012a9190610cfe565b90525060405163e1fbaed360e01b815273__$0bd2986ff9eae1ca31d173b6c133f035a7$__9063e1fbaed390610168908d908b908790600401610de9565b60006040518083038186803b15801561018057600080fd5b505af4158015610194573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038416925063095ea7b391506101c6908c908890600401610e6d565b6020604051808303816000875af11580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102099190610e86565b50604051633011f4b360e11b81526001600160a01b038a1690636023e9669061023c908890889088903090600401610eaf565b600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b5050505050505050505050505050565b6000806102898d8a8a88610595565b9150915073__$2ebd8d293950cf319742e0db402ead4961$__631bac2f9b8e88848e6040518563ffffffff1660e01b81526004016102ca9493929190610ee7565b60006040518083038186803b1580156102e257600080fd5b505af41580156102f6573d6000803e3d6000fd5b50505050600061030b8e89848a8a8a8a6106e3565b90508583604001518a8151811061032457610324610d25565b602002602001018181516103389190610cfe565b9150818152505073__$0bd2986ff9eae1ca31d173b6c133f035a7$__63e1fbaed38f8c866040518463ffffffff1660e01b815260040161037a93929190610de9565b60006040518083038186803b15801561039257600080fd5b505af41580156103a6573d6000803e3d6000fd5b50505050816001600160a01b031663095ea7b38e886040518363ffffffff1660e01b81526004016103d8929190610e6d565b6020604051808303816000875af11580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610e86565b5060008c6001600160a01b031663f59c48eb34846040518363ffffffff1660e01b815260040161044b9190610feb565b60206040518083038185885af1158015610469573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061048e91906110e7565b90508e6001600160a01b0316634e91db086104a8836108d3565b8d6040518363ffffffff1660e01b81526004016104c6929190611100565b6020604051808303816000875af11580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050991906110e7565b508e6001600160a01b031663e2a4853a6105228361095b565b8c6040518363ffffffff1660e01b8152600401610540929190611100565b6020604051808303816000875af115801561055f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906110e7565b50505050505050505050505050505050565b6105c06040518060800160405280606081526020016060815260200160608152602001600081525090565b60008073__$0bd2986ff9eae1ca31d173b6c133f035a7$__63fdfc26f388886040518363ffffffff1660e01b81526004016105fc929190610e6d565b600060405180830381865af4158015610619573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610641919081019061116c565b80515190915085111561066c5780515160405163fa80439960e01b81526100f6918791600401611100565b60008160000151868151811061068457610684610d25565b602002602001015190506000826040015187815181106106a6576106a6610d25565b60200260200101519050808611156106d5578581604051634560a37360e11b81526004016100f6929190611100565b509097909650945050505050565b6106eb61099c565b60006040518060e00160405280306001600160a01b03168152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b031681526020018781525090506000896001600160a01b031663bd02d0f56040516020016107a49060208082526016908201527513505617d0d05313109050d2d7d1d054d7d31253525560521b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016107d891815260200190565b602060405180830381865afa1580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081991906110e7565b905060006040518061010001604052806000815260200188815260200160008152602001600081526020018781526020018381526020018681526020016000815250905060006040518061012001604052808581526020018381526020016000600881111561088a5761088a610fb1565b8152600060208083018290526040808401839052606084018390526080840183905260a084018390528051928352908201905260c0909101529c9b505050505050505050505050565b6000604051602001610916906020808252601e908201527f4645455f4449535452494255544f525f535741505f4645455f42415443480000604082015260600190565b604051602081830303815290604052805190602001208260405160200161093e929190611100565b604051602081830303815290604052805190602001209050919050565b6000604051602001610916906020808252818101527f4645455f4449535452494255544f525f535741505f544f4b454e5f494e444558604082015260600190565b604080516102008101909152600061012082018181526101408301829052610160830182905261018083018290526101a083018290526101c083019190915260606101e083015281908152602001610a3260405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016000815260200160008152600060208201819052604082018190526060808301829052608083019190915260a09091015290565b6001600160a01b0381168114610a8057600080fd5b50565b8035610a8e81610a6b565b919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610acb57610acb610a93565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610af957610af9610a93565b604052919050565b60006001600160401b03821115610b1a57610b1a610a93565b5060051b60200190565b600082601f830112610b3557600080fd5b8135610b48610b4382610b01565b610ad1565b8082825260208201915060208360051b860101925085831115610b6a57600080fd5b602085015b83811015610b90578035610b8281610a6b565b835260209283019201610b6f565b5095945050505050565b600080600080600080600080610100898b031215610bb757600080fd5b8835610bc281610a6b565b97506020890135610bd281610a6b565b96506040890135610be281610a6b565b9550606089013594506080890135935060a08901356001600160401b03811115610c0b57600080fd5b610c178b828c01610b24565b989b979a5095989497939693955050505060c08201359160e0013590565b60008060008060008060008060008060006101608c8e031215610c5757600080fd5b8b35610c6281610a6b565b9a5060208c0135610c7281610a6b565b9950610c8060408d01610a83565b9850610c8e60608d01610a83565b975060808c0135965060a08c01359550610caa60c08d01610a83565b945060e08c01356001600160401b03811115610cc557600080fd5b610cd18e828f01610b24565b9b9e9a9d50989b979a96999598509396610100810135956101208201359550610140909101359350915050565b81810381811115610d1f57634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03169052565b600081518084526020840193506020830160005b82811015610d835781516001600160a01b0316865260209586019590910190600101610d5c565b5093949350505050565b604081526000610da06040830185610d48565b905060018060a01b03831660208301529392505050565b600081518084526020840193506020830160005b82811015610d83578151865260209586019590910190600101610dcb565b60018060a01b0384168152826020820152606060408201526000825160806060840152610e1960e0840182610d48565b90506020840151605f19848303016080850152610e368282610db7565b9150506040840151605f198483030160a0850152610e548282610db7565b915050606084015160c084015280915050949350505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215610e9857600080fd5b81518015158114610ea857600080fd5b9392505050565b608081526000610ec26080830187610d48565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b6001600160a01b0385168152608060208201819052600090610f0b90830186610d48565b6001600160a01b039485166040840152929093166060909101529392505050565b80516001600160a01b03908116835260208083015182169084015260408083015190911690830152606080820151600091610f6990850182610d3b565b506080820151610f7c6080850182610d3b565b5060a0820151610f8f60a0850182610d3b565b5060c082015160e060c0850152610fa960e0850182610d48565b949350505050565b634e487b7160e01b600052602160045260246000fd5b60098110610fd757610fd7610fb1565b9052565b60038110610fd757610fd7610fb1565b60208152600082516102006020840152611009610220840182610f2c565b905060208401516110666040850182805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b50604084015161107a610140850182610fc7565b50606084015161108e610160850182610fdb565b506080840151151561018084015260a084015115156101a084015260c084015115156101c084015260e08401516101e0840152610100840151838203601f19016102008501526110de8282610db7565b95945050505050565b6000602082840312156110f957600080fd5b5051919050565b918252602082015260400190565b600082601f83011261111f57600080fd5b815161112d610b4382610b01565b8082825260208201915060208360051b86010192508583111561114f57600080fd5b602085015b83811015610b90578051835260209283019201611154565b60006020828403121561117e57600080fd5b81516001600160401b0381111561119457600080fd5b8201608081850312156111a657600080fd5b6111ae610aa9565b81516001600160401b038111156111c457600080fd5b8201601f810186136111d557600080fd5b80516111e3610b4382610b01565b8082825260208201915060208360051b85010192508883111561120557600080fd5b6020840193505b8284101561123057835161121f81610a6b565b82526020938401939091019061120c565b845250505060208201516001600160401b0381111561124e57600080fd5b61125a8682850161110e565b60208301525060408201516001600160401b0381111561127957600080fd5b6112858682850161110e565b60408301525060609182015191810191909152939250505056fea26469706673582212202c03e03efd019fce8ab1399b1aff9b60ad2ccc365040e819ed7dfc0e19146dba64736f6c634300081d0033";

type FeeSwapUtilsConstructorParams =
  | [linkLibraryAddresses: FeeSwapUtilsLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeSwapUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class FeeSwapUtils__factory extends ContractFactory {
  constructor(...args: FeeSwapUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        FeeSwapUtils__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: FeeSwapUtilsLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$0bd2986ff9eae1ca31d173b6c133f035a7\$__", "g"),
      linkLibraryAddresses[
        "contracts/fee/FeeBatchStoreUtils.sol:FeeBatchStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$2ebd8d293950cf319742e0db402ead4961\$__", "g"),
      linkLibraryAddresses["contracts/swap/SwapUtils.sol:SwapUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeSwapUtils> {
    return super.deploy(overrides || {}) as Promise<FeeSwapUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeSwapUtils {
    return super.attach(address) as FeeSwapUtils;
  }
  override connect(signer: Signer): FeeSwapUtils__factory {
    return super.connect(signer) as FeeSwapUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeSwapUtilsInterface {
    return new utils.Interface(_abi) as FeeSwapUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeSwapUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeSwapUtils;
  }
}

export interface FeeSwapUtilsLibraryAddresses {
  ["contracts/fee/FeeBatchStoreUtils.sol:FeeBatchStoreUtils"]: string;
  ["contracts/swap/SwapUtils.sol:SwapUtils"]: string;
}
