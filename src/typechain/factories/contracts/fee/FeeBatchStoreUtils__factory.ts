// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FeeBatchStoreUtils,
  FeeBatchStoreUtilsInterface,
} from "../../../contracts/fee/FeeBatchStoreUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "FeeBatchNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "CREATED_AT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_AMOUNTS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FEE_TOKENS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "REMAINING_AMOUNTS",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "get",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "feeTokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "feeAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "remainingAmounts",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "createdAt",
            type: "uint256",
          },
        ],
        internalType: "struct FeeBatch.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x611321610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c8063780606871461007c5780639fb35d3614610097578063b56a2dc61461009f578063c118fc1c146100a7578063d5517b14146100af578063e1fbaed3146100d1578063fdfc26f3146100f1575b600080fd5b610084610111565b6040519081526020015b60405180910390f35b610084610139565b610084610148565b610084610157565b8180156100bb57600080fd5b506100cf6100ca366004610cba565b610166565b005b8180156100dd57600080fd5b506100cf6100ec366004610de4565b610555565b6101046100ff366004610cba565b6108b1565b60405161008e9190610f72565b60405160200161012090611017565b6040516020818303038152906040528051906020012081565b60405160200161012090611042565b60405160200161012090611067565b6040516020016101209061108b565b816001600160a01b03166391d4403c604051602001610184906110af565b60405160208183030381529060405280519060200120836040518363ffffffff1660e01b81526004016101b89291906110d7565b602060405180830381865afa1580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f991906110e5565b61021d57604051632df6dc2360e01b81526004810182905260240160405180910390fd5b816001600160a01b0316639921c3cc60405160200161023b906110af565b60405160208183030381529060405280519060200120836040518363ffffffff1660e01b815260040161026f9291906110d7565b600060405180830381600087803b15801561028957600080fd5b505af115801561029d573d6000803e3d6000fd5b50505050816001600160a01b031663c1dc9182826040516020016102c09061108b565b604051602081830303815290604052805190602001206040516020016102e79291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161031b91815260200190565b600060405180830381600087803b15801561033557600080fd5b505af1158015610349573d6000803e3d6000fd5b50505050816001600160a01b031663be43caa38260405160200161036c90611042565b604051602081830303815290604052805190602001206040516020016103939291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103c791815260200190565b600060405180830381600087803b1580156103e157600080fd5b505af11580156103f5573d6000803e3d6000fd5b50505050816001600160a01b031663be43caa38260405160200161041890611017565b6040516020818303038152906040528051906020012060405160200161043f9291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161047391815260200190565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b50505050816001600160a01b03166342c3bd96826040516020016104c490611067565b604051602081830303815290604052805190602001206040516020016104eb9291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161051f91815260200190565b600060405180830381600087803b15801561053957600080fd5b505af115801561054d573d6000803e3d6000fd5b505050505050565b826001600160a01b031663c80f4c62604051602001610573906110af565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b81526004016105a79291906110d7565b600060405180830381600087803b1580156105c157600080fd5b505af11580156105d5573d6000803e3d6000fd5b50505050826001600160a01b031663ec672cf6836040516020016105f89061108b565b6040516020818303038152906040528051906020012060405160200161061f9291906110d7565b60408051601f1981840301815290829052805160209091012084516001600160e01b031960e085901b1683526106579260040161110e565b600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b50505050826001600160a01b0316635eb07dbd836040516020016106a890611042565b604051602081830303815290604052805190602001206040516020016106cf9291906110d7565b6040516020818303038152906040528051906020012083602001516040518363ffffffff1660e01b8152600401610707929190611166565b600060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b50505050826001600160a01b0316635eb07dbd8360405160200161075890611017565b6040516020818303038152906040528051906020012060405160200161077f9291906110d7565b60408051601f198184030181528282528051602090910120908501516001600160e01b031960e085901b1683526107b892600401611166565b600060405180830381600087803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b50505050826001600160a01b031663e2a4853a8360405160200161080990611067565b604051602081830303815290604052805190602001206040516020016108309291906110d7565b6040516020818303038152906040528051906020012083606001516040518363ffffffff1660e01b81526004016108689291906110d7565b6020604051808303816000875af1158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab91906111a9565b50505050565b6108b9610c7a565b6108c1610c7a565b836001600160a01b03166391d4403c6040516020016108df906110af565b60405160208183030381529060405280519060200120856040518363ffffffff1660e01b81526004016109139291906110d7565b602060405180830381865afa158015610930573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095491906110e5565b61095f579050610c74565b836001600160a01b0316635948f7338460405160200161097e9061108b565b604051602081830303815290604052805190602001206040516020016109a59291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016109d991815260200190565b600060405180830381865afa1580156109f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a1e91908101906111c2565b81526040516001600160a01b038516906386ac6bdf908590610a4290602001611042565b60405160208183030381529060405280519060200120604051602001610a699291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610a9d91815260200190565b600060405180830381865afa158015610aba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae29190810190611260565b8160200181905250836001600160a01b03166386ac6bdf84604051602001610b0990611017565b60405160208183030381529060405280519060200120604051602001610b309291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610b6491815260200190565b600060405180830381865afa158015610b81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ba99190810190611260565b8160400181905250836001600160a01b031663bd02d0f584604051602001610bd090611067565b60405160208183030381529060405280519060200120604051602001610bf79291906110d7565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c2b91815260200190565b602060405180830381865afa158015610c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6c91906111a9565b606082015290505b92915050565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b6001600160a01b0381168114610cb757600080fd5b50565b60008060408385031215610ccd57600080fd5b8235610cd881610ca2565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610d1e57610d1e610ce6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610d4c57610d4c610ce6565b604052919050565b60006001600160401b03821115610d6d57610d6d610ce6565b5060051b60200190565b600082601f830112610d8857600080fd5b8135610d9b610d9682610d54565b610d24565b8082825260208201915060208360051b860101925085831115610dbd57600080fd5b602085015b83811015610dda578035835260209283019201610dc2565b5095945050505050565b600080600060608486031215610df957600080fd5b8335610e0481610ca2565b92506020840135915060408401356001600160401b03811115610e2657600080fd5b840160808187031215610e3857600080fd5b610e40610cfc565b81356001600160401b03811115610e5657600080fd5b8201601f81018813610e6757600080fd5b8035610e75610d9682610d54565b8082825260208201915060208360051b85010192508a831115610e9757600080fd5b6020840193505b82841015610ec2578335610eb181610ca2565b825260209384019390910190610e9e565b845250505060208201356001600160401b03811115610ee057600080fd5b610eec88828501610d77565b60208301525060408201356001600160401b03811115610f0b57600080fd5b610f1788828501610d77565b6040830152506060918201359181019190915292959194509192509050565b600081518084526020840193506020830160005b82811015610f68578151865260209586019590910190600101610f4a565b5093949350505050565b60208082528251608083830152805160a084018190526000929190910190829060c08501905b80831015610fc35783516001600160a01b031682526020938401936001939093019290910190610f98565b506020860151858203601f190160408701529250610fe18184610f36565b925050506040840151601f198483030160608501526110008282610f36565b915050606084015160808401528091505092915050565b60208082526011908201527052454d41494e494e475f414d4f554e545360781b604082015260600190565b6020808252600b908201526a4645455f414d4f554e545360a81b604082015260600190565b6020808252600a908201526910d4915055115117d05560b21b604082015260600190565b6020808252600a90820152694645455f544f4b454e5360b01b604082015260600190565b6020808252600e908201526d11915157d0905510d217d31254d560921b604082015260600190565b918252602082015260400190565b6000602082840312156110f757600080fd5b8151801515811461110757600080fd5b9392505050565b6000604082018483526040602084015280845180835260608501915060208601925060005b8181101561115a5783516001600160a01b0316835260209384019390920191600101611133565b50909695505050505050565b6000604082018483526040602084015280845180835260608501915060208601925060005b8181101561115a57835183526020938401939092019160010161118b565b6000602082840312156111bb57600080fd5b5051919050565b6000602082840312156111d457600080fd5b81516001600160401b038111156111ea57600080fd5b8201601f810184136111fb57600080fd5b8051611209610d9682610d54565b8082825260208201915060208360051b85010192508683111561122b57600080fd5b6020840193505b8284101561125657835161124581610ca2565b825260209384019390910190611232565b9695505050505050565b60006020828403121561127257600080fd5b81516001600160401b0381111561128857600080fd5b8201601f8101841361129957600080fd5b80516112a7610d9682610d54565b8082825260208201915060208360051b8501019250868311156112c957600080fd5b6020840193505b828410156112565783518252602093840193909101906112d056fea2646970667358221220488bd1e5fc52064495e36757647eb59cfc42a534999dd8cc0ad0ff7ca84fa5ea64736f6c634300081d0033";

type FeeBatchStoreUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeeBatchStoreUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeeBatchStoreUtils__factory extends ContractFactory {
  constructor(...args: FeeBatchStoreUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FeeBatchStoreUtils> {
    return super.deploy(overrides || {}) as Promise<FeeBatchStoreUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeBatchStoreUtils {
    return super.attach(address) as FeeBatchStoreUtils;
  }
  override connect(signer: Signer): FeeBatchStoreUtils__factory {
    return super.connect(signer) as FeeBatchStoreUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeBatchStoreUtilsInterface {
    return new utils.Interface(_abi) as FeeBatchStoreUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeBatchStoreUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeBatchStoreUtils;
  }
}
