// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MarketStoreUtilsTest,
  MarketStoreUtilsTestInterface,
} from "../../../contracts/test/MarketStoreUtilsTest";

const _abi = [
  {
    inputs: [],
    name: "getEmptyMarket",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "removeMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "market",
        type: "tuple",
      },
    ],
    name: "setMarket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061039d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632b73c90d146100465780634fec08d21461005b5780638593caac1461006e575b600080fd5b6100596100543660046101dd565b61008c565b005b6100596100693660046102aa565b6100ff565b61007661017e565b604051610083919061031e565b60405180910390f35b6040516303bc2fb360e51b815273__$ff439aa65a80c9eec648f15db20b189505$__90637785f660906100c9908790879087908790600401610332565b60006040518083038186803b1580156100e157600080fd5b505af41580156100f5573d6000803e3d6000fd5b5050505050505050565b604051631f86ecd360e11b81526001600160a01b038085166004830152831660248201526044810182905273__$ff439aa65a80c9eec648f15db20b189505$__90633f0dd9a69060640160006040518083038186803b15801561016157600080fd5b505af4158015610175573d6000803e3d6000fd5b50505050505050565b610186610193565b61018e610193565b919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6001600160a01b03811681146101cf57600080fd5b50565b803561018e816101ba565b60008060008084860360e08112156101f457600080fd5b85356101ff816101ba565b9450602086013561020f816101ba565b9350604086013592506080605f198201121561022a57600080fd5b50604051608081016001600160401b038111828210171561025b57634e487b7160e01b600052604160045260246000fd5b60405261026a606087016101d2565b8152610278608087016101d2565b602082015261028960a087016101d2565b604082015261029a60c087016101d2565b6060820152939692955090935050565b6000806000606084860312156102bf57600080fd5b83356102ca816101ba565b925060208401356102da816101ba565b929592945050506040919091013590565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260609182015116910152565b6080810161032c82846102eb565b92915050565b6001600160a01b038581168252841660208201526040810183905260e0810161035e60608301846102eb565b9594505050505056fea26469706673582212204e8a1d011ecb9334dd8b38e688f7ee830f8625343253574003a7a8b63166dc9664736f6c63430008140033";

type MarketStoreUtilsTestConstructorParams =
  | [
      linkLibraryAddresses: MarketStoreUtilsTestLibraryAddresses,
      signer?: Signer
    ]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketStoreUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class MarketStoreUtilsTest__factory extends ContractFactory {
  constructor(...args: MarketStoreUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        MarketStoreUtilsTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: MarketStoreUtilsTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$ff439aa65a80c9eec648f15db20b189505\$__", "g"),
      linkLibraryAddresses[
        "contracts/market/MarketStoreUtils.sol:MarketStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarketStoreUtilsTest> {
    return super.deploy(overrides || {}) as Promise<MarketStoreUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MarketStoreUtilsTest {
    return super.attach(address) as MarketStoreUtilsTest;
  }
  override connect(signer: Signer): MarketStoreUtilsTest__factory {
    return super.connect(signer) as MarketStoreUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketStoreUtilsTestInterface {
    return new utils.Interface(_abi) as MarketStoreUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarketStoreUtilsTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MarketStoreUtilsTest;
  }
}

export interface MarketStoreUtilsTestLibraryAddresses {
  ["contracts/market/MarketStoreUtils.sol:MarketStoreUtils"]: string;
}
