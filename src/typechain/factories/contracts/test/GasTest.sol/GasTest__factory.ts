// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  GasTest,
  GasTestInterface,
} from "../../../../contracts/test/GasTest.sol/GasTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "CurrentTxL1GasFees",
    type: "event",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_data",
        type: "string",
      },
    ],
    name: "getCurrentTxL1GasFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "revertIfTxOriginIsZero",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_data",
        type: "string",
      },
    ],
    name: "test",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506107168061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806317dac8461461005157806373d4a13a1461006c578063da9027ef14610081578063f9fbd554146100a9575b600080fd5b6100596100bc565b6040519081526020015b60405180910390f35b61007461010a565b604051610063919061046d565b61009461008f3660046104bb565b610198565b60408051928352602083019190915201610063565b6100946100b73660046104bb565b6102df565b6000326101045760405162461bcd60e51b815260206004820152601160248201527054585f4f524947494e5f49535f5a45524f60781b60448201526064015b60405180910390fd5b50600190565b600080546101179061052d565b80601f01602080910402602001604051908101604052809291908181526020018280546101439061052d565b80156101905780601f1061016557610100808354040283529160200191610190565b820191906000526020600020905b81548152906001019060200180831161017357829003601f168201915b505050505081565b6000806000606c6001600160a01b031663c6f7de0e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102009190610567565b9050600060405160200161021390610580565b60405160208183030381529060405280519060200120868660405160200161023c92919061058f565b604051602081830303815290604052805190602001200361026f5760405162461bcd60e51b81526004016100fb9061059f565b606c6001600160a01b031663c6f7de0e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d29190610567565b9196919550909350505050565b6000806000606c6001600160a01b031663c6f7de0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610567565b9050600080610357868883610621565b5060405160200161036790610580565b60405160208183030381529060405280519060200120868660405160200161039092919061058f565b60405160208183030381529060405280519060200120036103c35760405162461bcd60e51b81526004016100fb9061059f565b606c6001600160a01b031663c6f7de0e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610567565b60408051848152602081018390529192507fd404f9b5238ff8b18d7ce4bdd396925661315ffb6a05afd1ab1b38b3ec637e92910160405180910390a1909590945092505050565b602081526000825180602084015260005b8181101561049b576020818601810151604086840101520161047e565b506000604082850101526040601f19601f83011684010191505092915050565b600080602083850312156104ce57600080fd5b82356001600160401b038111156104e457600080fd5b8301601f810185136104f557600080fd5b80356001600160401b0381111561050b57600080fd5b85602082840101111561051d57600080fd5b6020919091019590945092505050565b600181811c9082168061054157607f821691505b60208210810361056157634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561057957600080fd5b5051919050565b62464f4f60e81b815260030190565b8183823760009101908152919050565b602080825260039082015262464f4f60e81b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b601f82111561061c57806000526020600020601f840160051c810160208510156105f95750805b601f840160051c820191505b818110156106195760008155600101610605565b50505b505050565b6001600160401b03831115610638576106386105bc565b61064c83610646835461052d565b836105d2565b6000601f84116001811461068057600085156106685750838201355b600019600387901b1c1916600186901b178355610619565b600083815260209020601f19861690835b828110156106b15786850135825560209485019460019092019101610691565b50868210156106ce5760001960f88860031b161c19848701351681555b505060018560011b018355505050505056fea2646970667358221220e7ec044e97dcec679d594f50cc5b7cb44283e27ca9d82b55b2cdd8013abace5264736f6c634300081d0033";

type GasTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasTest__factory extends ContractFactory {
  constructor(...args: GasTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasTest> {
    return super.deploy(overrides || {}) as Promise<GasTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasTest {
    return super.attach(address) as GasTest;
  }
  override connect(signer: Signer): GasTest__factory {
    return super.connect(signer) as GasTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasTestInterface {
    return new utils.Interface(_abi) as GasTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasTest {
    return new Contract(address, _abi, signerOrProvider) as GasTest;
  }
}
