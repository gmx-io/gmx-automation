// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ArrayTest,
  ArrayTestInterface,
} from "../../../contracts/test/ArrayTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "arr",
        type: "uint256[]",
      },
    ],
    name: "getMedian",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506102c38061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e8787f4114610030575b600080fd5b61004361003e366004610131565b610055565b60405190815260200160405180910390f35b600061006082610066565b92915050565b6000600282516100769190610213565b6001036100ab57816002835161008c919061023d565b8151811061009c5761009c610251565b60200260200101519050919050565b6002826001600285516100be919061023d565b6100c89190610267565b815181106100d8576100d8610251565b602002602001015183600285516100ef919061023d565b815181106100ff576100ff610251565b6020026020010151610111919061027a565b610060919061023d565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561014357600080fd5b81356001600160401b0381111561015957600080fd5b8201601f8101841361016a57600080fd5b80356001600160401b038111156101835761018361011b565b604051600582901b90603f8201601f191681016001600160401b03811182821017156101b1576101b161011b565b6040529182526020818401810192908101878411156101cf57600080fd5b6020850194505b838510156101f2578435808252602095860195909350016101d6565b509695505050505050565b634e487b7160e01b600052601260045260246000fd5b600082610222576102226101fd565b500690565b634e487b7160e01b600052601160045260246000fd5b60008261024c5761024c6101fd565b500490565b634e487b7160e01b600052603260045260246000fd5b8181038181111561006057610060610227565b808201808211156100605761006061022756fea2646970667358221220b6a59ef7d89f236bb159adadf256c27dcb52ec64c99a09bbdddd7e6409cce51c64736f6c634300081d0033";

type ArrayTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArrayTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArrayTest__factory extends ContractFactory {
  constructor(...args: ArrayTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArrayTest> {
    return super.deploy(overrides || {}) as Promise<ArrayTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ArrayTest {
    return super.attach(address) as ArrayTest;
  }
  override connect(signer: Signer): ArrayTest__factory {
    return super.connect(signer) as ArrayTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArrayTestInterface {
    return new utils.Interface(_abi) as ArrayTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArrayTest {
    return new Contract(address, _abi, signerOrProvider) as ArrayTest;
  }
}
