/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PricingUtilsTest,
  PricingUtilsTestInterface,
} from "../../../contracts/test/PricingUtilsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "diffUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactExponentFactor",
        type: "uint256",
      },
    ],
    name: "applyImpactFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c8d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c320b6aa14610030575b600080fd5b61004361003e366004610bb3565b610055565b60405190815260200160405180910390f35b600061006284848461006c565b90505b9392505050565b600080610079858461008e565b905061008581856100f7565b95945050505050565b600068327cb2734119d3b7a9601e1b8310156100ac575060006100f1565b68327cb2734119d3b7a9601e1b82036100c65750816100f1565b60006100e26100d485610110565b6100dd85610110565b610121565b90506100ed81610163565b9150505b92915050565b6000610065838368327cb2734119d3b7a9601e1b610174565b60006100f164e8d4a5100083610c0b565b600082600003610149578115610138576000610142565b670de0b6b3a76400005b90506100f1565b61006561015e61015885610181565b8461023c565b610248565b60006100f164e8d4a5100083610c2d565b600061006284848461028e565b6000670de0b6b3a76400008210156101b457604051633621413760e21b8152600481018390526024015b60405180910390fd5b60006101c9670de0b6b3a76400008404610378565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff1981016101f2575050919050565b6706f05b59d3b200005b801561023457670de0b6b3a7640000828002049150671bc16d674ec80000821061022c579283019260019190911c905b60011c6101fc565b505050919050565b6000610065838361045b565b6000680a688906bd8b000000821061027657604051634a4f26f160e01b8152600481018390526024016101ab565b670de0b6b3a7640000604083901b0461006581610521565b60008080600019858709858702925082811083820303915050806000036102c8578382816102be576102be610bdf565b0492505050610065565b80841161030f5760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b60448201526064016101ab565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b821061039857608091821c916103959082610c44565b90505b600160401b82106103b657604091821c916103b39082610c44565b90505b600160201b82106103d457602091821c916103d19082610c44565b90505b6201000082106103f157601091821c916103ee9082610c44565b90505b610100821061040d57600891821c9161040a9082610c44565b90505b6010821061042857600491821c916104259082610c44565b90505b6004821061044357600291821c916104409082610c44565b90505b60028210610456576100f1600182610c44565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a7640000811061049f5760405163698d9a0160e11b8152600481018290526024016101ab565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036104dd5780670de0b6b3a76400008504019450505050506100f1565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156105415768016a09e667f3bcc9090260401c5b6001603e1b82161561055c576801306fe0a31b7152df0260401c5b6001603d1b821615610577576801172b83c7d517adce0260401c5b6001603c1b8216156105925768010b5586cf9890f62a0260401c5b6001603b1b8216156105ad576801059b0d31585743ae0260401c5b6001603a1b8216156105c857680102c9a3e778060ee70260401c5b600160391b8216156105e35768010163da9fb33356d80260401c5b600160381b8216156105fe57680100b1afa5abcbed610260401c5b600160371b8216156106195768010058c86da1c09ea20260401c5b600160361b821615610634576801002c605e2e8cec500260401c5b600160351b82161561064f57680100162f3904051fa10260401c5b600160341b82161561066a576801000b175effdc76ba0260401c5b600160331b82161561068557680100058ba01fb9f96d0260401c5b600160321b8216156106a05768010002c5cc37da94920260401c5b600160311b8216156106bb576801000162e525ee05470260401c5b600160301b8216156106d65768010000b17255775c040260401c5b6001602f1b8216156106f1576801000058b91b5bc9ae0260401c5b6001602e1b82161561070c57680100002c5c89d5ec6d0260401c5b6001602d1b8216156107275768010000162e43f4f8310260401c5b6001602c1b82161561074257680100000b1721bcfc9a0260401c5b6001602b1b82161561075d5768010000058b90cf1e6e0260401c5b6001602a1b821615610778576801000002c5c863b73f0260401c5b600160291b82161561079357680100000162e430e5a20260401c5b600160281b8216156107ae576801000000b1721835510260401c5b600160271b8216156107c957680100000058b90c0b490260401c5b600160261b8216156107e45768010000002c5c8601cc0260401c5b600160251b8216156107ff576801000000162e42fff00260401c5b600160241b82161561081a5768010000000b17217fbb0260401c5b600160231b821615610835576801000000058b90bfce0260401c5b600160221b82161561085057680100000002c5c85fe30260401c5b600160211b82161561086b5768010000000162e42ff10260401c5b600160201b82161561088657680100000000b17217f80260401c5b63800000008216156108a15768010000000058b90bfc0260401c5b63400000008216156108bc576801000000002c5c85fe0260401c5b63200000008216156108d757680100000000162e42ff0260401c5b63100000008216156108f2576801000000000b17217f0260401c5b630800000082161561090d57680100000000058b90c00260401c5b63040000008216156109285768010000000002c5c8600260401c5b6302000000821615610943576801000000000162e4300260401c5b630100000082161561095e5768010000000000b172180260401c5b62800000821615610978576801000000000058b90c0260401c5b6240000082161561099257680100000000002c5c860260401c5b622000008216156109ac5768010000000000162e430260401c5b621000008216156109c657680100000000000b17210260401c5b620800008216156109e05768010000000000058b910260401c5b620400008216156109fa576801000000000002c5c80260401c5b62020000821615610a1457680100000000000162e40260401c5b62010000821615610a2d5761b172600160401b010260401c5b618000821615610a45576158b9600160401b010260401c5b614000821615610a5d57612c5d600160401b010260401c5b612000821615610a755761162e600160401b010260401c5b611000821615610a8d57610b17600160401b010260401c5b610800821615610aa55761058c600160401b010260401c5b610400821615610abd576102c6600160401b010260401c5b610200821615610ad557610163600160401b010260401c5b610100821615610aec5760b1600160401b010260401c5b6080821615610b02576059600160401b010260401c5b6040821615610b1857602c600160401b010260401c5b6020821615610b2e576016600160401b010260401c5b6010821615610b4457600b600160401b010260401c5b6008821615610b5a576006600160401b010260401c5b6004821615610b70576003600160401b010260401c5b6002821615610b86576001600160401b010260401c5b6001821615610b9c576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b600080600060608486031215610bc857600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082610c2857634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176100f1576100f1610bf5565b808201808211156100f1576100f1610bf556fea26469706673582212200d4a199754fc6fbc3bc0a205c39add85099928f1de49c46f511b90e0fe7dd0df64736f6c63430008120033";

type PricingUtilsTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PricingUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PricingUtilsTest__factory extends ContractFactory {
  constructor(...args: PricingUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PricingUtilsTest> {
    return super.deploy(overrides || {}) as Promise<PricingUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PricingUtilsTest {
    return super.attach(address) as PricingUtilsTest;
  }
  override connect(signer: Signer): PricingUtilsTest__factory {
    return super.connect(signer) as PricingUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PricingUtilsTestInterface {
    return new utils.Interface(_abi) as PricingUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PricingUtilsTest {
    return new Contract(address, _abi, signerOrProvider) as PricingUtilsTest;
  }
}
