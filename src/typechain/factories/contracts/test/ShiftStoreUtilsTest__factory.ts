/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ShiftStoreUtilsTest,
  ShiftStoreUtilsTestInterface,
} from "../../../contracts/test/ShiftStoreUtilsTest";

const _abi = [
  {
    inputs: [],
    name: "getEmptyShift",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "receiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "callbackContract",
                type: "address",
              },
              {
                internalType: "address",
                name: "uiFeeReceiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "fromMarket",
                type: "address",
              },
              {
                internalType: "address",
                name: "toMarket",
                type: "address",
              },
            ],
            internalType: "struct Shift.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "marketTokenAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minMarketTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "updatedAtTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "executionFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "callbackGasLimit",
                type: "uint256",
              },
            ],
            internalType: "struct Shift.Numbers",
            name: "numbers",
            type: "tuple",
          },
        ],
        internalType: "struct Shift.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "removeShift",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "account",
                type: "address",
              },
              {
                internalType: "address",
                name: "receiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "callbackContract",
                type: "address",
              },
              {
                internalType: "address",
                name: "uiFeeReceiver",
                type: "address",
              },
              {
                internalType: "address",
                name: "fromMarket",
                type: "address",
              },
              {
                internalType: "address",
                name: "toMarket",
                type: "address",
              },
            ],
            internalType: "struct Shift.Addresses",
            name: "addresses",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "marketTokenAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minMarketTokens",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "updatedAtTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "executionFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "callbackGasLimit",
                type: "uint256",
              },
            ],
            internalType: "struct Shift.Numbers",
            name: "numbers",
            type: "tuple",
          },
        ],
        internalType: "struct Shift.Props",
        name: "shift",
        type: "tuple",
      },
    ],
    name: "setShift",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610521806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063c0dca6a414610046578063d16f92d71461005b578063ede7a6bd1461006e575b600080fd5b6100596100543660046101ea565b61008c565b005b61005961006936600461030f565b61010c565b610076610147565b6040516100839190610479565b60405180910390f35b6040516374b6fe1360e01b81526001600160a01b038085166004830152602482018490528216604482015273__$17bbc74b36df540d4a9b171eb59c5012db$__906374b6fe13906064015b60006040518083038186803b1580156100ef57600080fd5b505af4158015610103573d6000803e3d6000fd5b50505050505050565b60405163def6852b60e01b815273__$17bbc74b36df540d4a9b171eb59c5012db$__9063def6852b906100d7908690869086906004016104a6565b61014f61015c565b61015761015c565b919050565b60408051610100810182526000918101828152606082018390526080820183905260a0820183905260c0820183905260e082019290925290819081526020016101cd6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b905290565b6001600160a01b03811681146101e757600080fd5b50565b6000806000606084860312156101ff57600080fd5b833561020a816101d2565b9250602084013591506040840135610221816101d2565b809150509250925092565b604080519081016001600160401b038111828210171561025c57634e487b7160e01b600052604160045260246000fd5b60405290565b60405160c081016001600160401b038111828210171561025c57634e487b7160e01b600052604160045260246000fd5b600060a082840312156102a457600080fd5b60405160a081016001600160401b03811182821017156102d457634e487b7160e01b600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60008060008385036101a081121561032657600080fd5b8435610331816101d2565b935060208501359250603f190161016081121561034d57600080fd5b61035561022c565b60c082121561036357600080fd5b61036b610262565b9150604086013561037b816101d2565b8252606086013561038b816101d2565b6020830152608086013561039e816101d2565b604083015260a08601356103b1816101d2565b606083015260c08601356103c4816101d2565b608083015260e08601356103d7816101d2565b60a08301528181526103ed876101008801610292565b602082015280925050509250925092565b80516001600160a01b03908116835260208083015182169084015260408083015182169084015260608083015182169084015260808083015182169084015260a09182015116910152565b80518252602081015160208301526040810151604083015260608101516060830152608081015160808301525050565b60006101608201905061048d8284516103fe565b602083015161049f60c0840182610449565b5092915050565b6001600160a01b03841681526020810183905281516101a08201906104cf9060408401906103fe565b60208301516104e2610100840182610449565b5094935050505056fea2646970667358221220d9598a7b4d0545f3441103c3b454afe76225300c53023a125b559b97674f585d64736f6c63430008120033";

type ShiftStoreUtilsTestConstructorParams =
  | [linkLibraryAddresses: ShiftStoreUtilsTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShiftStoreUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ShiftStoreUtilsTest__factory extends ContractFactory {
  constructor(...args: ShiftStoreUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ShiftStoreUtilsTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ShiftStoreUtilsTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$17bbc74b36df540d4a9b171eb59c5012db\\$__", "g"),
      linkLibraryAddresses[
        "contracts/shift/ShiftStoreUtils.sol:ShiftStoreUtils"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ShiftStoreUtilsTest> {
    return super.deploy(overrides || {}) as Promise<ShiftStoreUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ShiftStoreUtilsTest {
    return super.attach(address) as ShiftStoreUtilsTest;
  }
  override connect(signer: Signer): ShiftStoreUtilsTest__factory {
    return super.connect(signer) as ShiftStoreUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShiftStoreUtilsTestInterface {
    return new utils.Interface(_abi) as ShiftStoreUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShiftStoreUtilsTest {
    return new Contract(address, _abi, signerOrProvider) as ShiftStoreUtilsTest;
  }
}

export interface ShiftStoreUtilsTestLibraryAddresses {
  ["contracts/shift/ShiftStoreUtils.sol:ShiftStoreUtils"]: string;
}
