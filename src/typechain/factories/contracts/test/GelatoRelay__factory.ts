// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GelatoRelay,
  GelatoRelayInterface,
} from "../../../contracts/test/GelatoRelay";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct GelatoRelay.SponsoredCall",
        name: "_call",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "sponsoredCall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610233806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806327be3c2414610030575b600080fd5b61004361003e3660046100f7565b610045565b005b60008061005860408a0160208b0161017e565b6001600160a01b031661006e60408b018b6101a0565b60405161007c9291906101ed565b6000604051808303816000865af19150503d80600081146100b9576040519150601f19603f3d011682016040523d82523d6000602084013e6100be565b606091505b5091509150816100d057805160208201fd5b505050505050505050565b80356001600160a01b03811681146100f257600080fd5b919050565b600080600080600080600060e0888a03121561011257600080fd5b87356001600160401b0381111561012857600080fd5b88016060818b03121561013a57600080fd5b9650610148602089016100db565b9550610156604089016100db565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561019057600080fd5b610199826100db565b9392505050565b6000808335601e198436030181126101b757600080fd5b8301803591506001600160401b038211156101d157600080fd5b6020019150368190038213156101e657600080fd5b9250929050565b818382376000910190815291905056fea26469706673582212208ca2431ed70d14bd5ae87d5a9fd4745b419193756c416afc0f0851e555adb77f64736f6c63430008140033";

type GelatoRelayConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GelatoRelayConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GelatoRelay__factory extends ContractFactory {
  constructor(...args: GelatoRelayConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GelatoRelay> {
    return super.deploy(overrides || {}) as Promise<GelatoRelay>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GelatoRelay {
    return super.attach(address) as GelatoRelay;
  }
  override connect(signer: Signer): GelatoRelay__factory {
    return super.connect(signer) as GelatoRelay__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GelatoRelayInterface {
    return new utils.Interface(_abi) as GelatoRelayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GelatoRelay {
    return new Contract(address, _abi, signerOrProvider) as GelatoRelay;
  }
}
