/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  AssemblyReturnTest,
  AssemblyReturnTestInterface,
} from "../../../../contracts/test/AssemblyReturnTest.sol/AssemblyReturnTest";

const _abi = [
  {
    inputs: [],
    name: "count",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "shouldReturn",
        type: "bool",
      },
    ],
    name: "testReturnAssembly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testReturnNormal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract CounterTest",
        name: "counter",
        type: "address",
      },
    ],
    name: "testReturnWithExternalCall",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b50610249806100256000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306661abd1461005157806325d6ae131461006c578063831cf22d1461007f578063920644bf14610087575b600080fd5b61005a60005481565b60405190815260200160405180910390f35b61005a61007a366004610175565b61009a565b61005a610116565b61005a6100953660046101a5565b610147565b6000816001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100d757600080fd5b505af11580156100eb573d6000803e3d6000fd5b5050505060005490505b60405162461bcd60e51b815260040161010d906101c7565b60405180910390fd5b600080548180610125836101ec565b9190505550600054905060405162461bcd60e51b815260040161010d906101c7565b600081151560010361015c57506000546100f5565b60008054908061016b836101ec565b9190505560206040f35b60006020828403121561018757600080fd5b81356001600160a01b038116811461019e57600080fd5b9392505050565b6000602082840312156101b757600080fd5b8135801515811461019e57600080fd5b6020808252600b908201526a115b99081bd9881d195cdd60aa1b604082015260600190565b60006001820161020c57634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212205cf0e6154593f0638c5ef9cd193ed83d151b6c93191cabd21e7f0bdea1c4481c64736f6c63430008120033";

type AssemblyReturnTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AssemblyReturnTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AssemblyReturnTest__factory extends ContractFactory {
  constructor(...args: AssemblyReturnTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AssemblyReturnTest> {
    return super.deploy(overrides || {}) as Promise<AssemblyReturnTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AssemblyReturnTest {
    return super.attach(address) as AssemblyReturnTest;
  }
  override connect(signer: Signer): AssemblyReturnTest__factory {
    return super.connect(signer) as AssemblyReturnTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AssemblyReturnTestInterface {
    return new utils.Interface(_abi) as AssemblyReturnTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssemblyReturnTest {
    return new Contract(address, _abi, signerOrProvider) as AssemblyReturnTest;
  }
}
