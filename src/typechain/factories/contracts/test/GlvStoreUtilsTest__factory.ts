// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GlvStoreUtilsTest,
  GlvStoreUtilsTestInterface,
} from "../../../contracts/test/GlvStoreUtilsTest";

const _abi = [
  {
    inputs: [],
    name: "getEmptyGlv",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "glvToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Glv.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "removeGlv",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "glvToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Glv.Props",
        name: "glv",
        type: "tuple",
      },
    ],
    name: "setGlv",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610364806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630b6c95a314610046578063d5b907f21461005b578063fb0dac0214610079575b600080fd5b6100596100543660046101c3565b61008c565b005b6100636100ff565b60405161007091906102ac565b60405180910390f35b6100596100873660046102c0565b610114565b6040516315da82c960e21b815273__$c61efa35244e2ed3fbfa63ba28e8d0556c$__9063576a0b24906100c99087908790879087906004016102f9565b60006040518083038186803b1580156100e157600080fd5b505af41580156100f5573d6000803e3d6000fd5b5050505050505050565b61010761018b565b61010f61018b565b919050565b60405163b4fd626560e01b81526001600160a01b0380841660048301528216602482015273__$c61efa35244e2ed3fbfa63ba28e8d0556c$__9063b4fd62659060440160006040518083038186803b15801561016f57600080fd5b505af4158015610183573d6000803e3d6000fd5b505050505050565b604080516060810182526000808252602082018190529181019190915290565b6001600160a01b03811681146101c057600080fd5b50565b60008060008084860360c08112156101da57600080fd5b85356101e5816101ab565b945060208601356101f5816101ab565b9350604086013592506060605f198201121561021057600080fd5b50604051606081016001600160401b038111828210171561024157634e487b7160e01b600052604160045260246000fd5b6040526060860135610252816101ab565b81526080860135610262816101ab565b602082015260a0860135610275816101ab565b6040820152939692955090935050565b80516001600160a01b03908116835260208083015182169084015260409182015116910152565b606081016102ba8284610285565b92915050565b600080604083850312156102d357600080fd5b82356102de816101ab565b915060208301356102ee816101ab565b809150509250929050565b6001600160a01b038581168252841660208201526040810183905260c081016103256060830184610285565b9594505050505056fea2646970667358221220d4cfec73c9ea2cab26e851222e5f0a586efd4a32cf3c09627cbc96f669eef9d564736f6c63430008140033";

type GlvStoreUtilsTestConstructorParams =
  | [linkLibraryAddresses: GlvStoreUtilsTestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GlvStoreUtilsTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class GlvStoreUtilsTest__factory extends ContractFactory {
  constructor(...args: GlvStoreUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        GlvStoreUtilsTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: GlvStoreUtilsTestLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\$c61efa35244e2ed3fbfa63ba28e8d0556c\$__", "g"),
      linkLibraryAddresses["contracts/glv/GlvStoreUtils.sol:GlvStoreUtils"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GlvStoreUtilsTest> {
    return super.deploy(overrides || {}) as Promise<GlvStoreUtilsTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GlvStoreUtilsTest {
    return super.attach(address) as GlvStoreUtilsTest;
  }
  override connect(signer: Signer): GlvStoreUtilsTest__factory {
    return super.connect(signer) as GlvStoreUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlvStoreUtilsTestInterface {
    return new utils.Interface(_abi) as GlvStoreUtilsTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlvStoreUtilsTest {
    return new Contract(address, _abi, signerOrProvider) as GlvStoreUtilsTest;
  }
}

export interface GlvStoreUtilsTestLibraryAddresses {
  ["contracts/glv/GlvStoreUtils.sol:GlvStoreUtils"]: string;
}
