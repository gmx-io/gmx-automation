// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MarketStoreUtils,
  MarketStoreUtilsInterface,
} from "../../../contracts/market/MarketStoreUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "MarketNotFound",
    type: "error",
  },
  {
    inputs: [],
    name: "INDEX_TOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "LONG_TOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MARKET_KEY",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MARKET_SALT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MARKET_TOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SHORT_TOKEN",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "address",
        name: "key",
        type: "address",
      },
    ],
    name: "get",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "DataStore",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "getBySalt",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "marketToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "indexToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "longToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "shortToken",
            type: "address",
          },
        ],
        internalType: "struct Market.Props",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6112b061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100975760003560e01c8062a28b361461009c5780633f0dd9a6146100b7578063492dec5a146100d95780635231e24f146100e1578063537803c2146100e95780637785f6601461013f57806391bf0ff21461015f578063a8d8fff514610167578063c11201f71461017a578063db73bb1514610182575b600080fd5b6100a461018a565b6040519081526020015b60405180910390f35b8180156100c357600080fd5b506100d76100d2366004610fb3565b6101b2565b005b6100a4610612565b6100a4610640565b6100fc6100f7366004610ff4565b61064f565b6040516100ae919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b81801561014b57600080fd5b506100d761015a366004611020565b6106e6565b6100a4610af3565b6100fc6101753660046110ed565b610b02565b6100a4610ef4565b6100a4610f03565b60405160200161019990611126565b6040516020818303038152906040528051906020012081565b826001600160a01b031663c769d1a16040516020016101d09061114a565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b815260040161020492919061116f565b602060405180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190611186565b61027157604051636918f9bf60e01b81526001600160a01b038316600482015260240160405180910390fd5b826001600160a01b03166369721d4160405160200161028f9061114a565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b81526004016102c392919061116f565b600060405180830381600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb683604051602001610314906111af565b6040516020818303038152906040528051906020012060405160200161033b9291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161036f91815260200190565b600060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb6836040516020016103c0906111ee565b604051602081830303815290604052805190602001206040516020016103e79291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161041b91815260200190565b600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161046c90611126565b604051602081830303815290604052805190602001206040516020016104939291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016104c791815260200190565b600060405180830381600087803b1580156104e157600080fd5b505af11580156104f5573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161051890611213565b6040516020818303038152906040528051906020012060405160200161053f9291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161057391815260200190565b600060405180830381600087803b15801561058d57600080fd5b505af11580156105a1573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb66105bd83610f12565b6040518263ffffffff1660e01b81526004016105db91815260200190565b600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b50505050505050565b604051602001610199906020808252600a90820152694d41524b45545f4b455960b01b604082015260600190565b60405160200161019990611213565b610657610f64565b6000836001600160a01b03166321f8a72161067185610f12565b6040518263ffffffff1660e01b815260040161068f91815260200190565b602060405180830381865afa1580156106ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d09190611238565b90506106dc8482610b02565b9150505b92915050565b836001600160a01b031663b348e6396040516020016107049061114a565b60405160208183030381529060405280519060200120856040518363ffffffff1660e01b815260040161073892919061116f565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b50505050836001600160a01b031663ca446dd961078284610f12565b856040518363ffffffff1660e01b81526004016107a092919061116f565b6020604051808303816000875af11580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e39190611238565b50836001600160a01b031663ca446dd984604051602001610803906111af565b6040516020818303038152906040528051906020012060405160200161082a9291906111d5565b60408051601f1981840301815290829052805160209091012084516001600160e01b031960e085901b1683526108629260040161116f565b6020604051808303816000875af1158015610881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a59190611238565b50836001600160a01b031663ca446dd9846040516020016108c5906111ee565b604051602081830303815290604052805190602001206040516020016108ec9291906111d5565b6040516020818303038152906040528051906020012083602001516040518363ffffffff1660e01b815260040161092492919061116f565b6020604051808303816000875af1158015610943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109679190611238565b50836001600160a01b031663ca446dd98460405160200161098790611126565b604051602081830303815290604052805190602001206040516020016109ae9291906111d5565b60408051601f198184030181528282528051602090910120908501516001600160e01b031960e085901b1683526109e79260040161116f565b6020604051808303816000875af1158015610a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2a9190611238565b50836001600160a01b031663ca446dd984604051602001610a4a90611213565b60405160208183030381529060405280519060200120604051602001610a719291906111d5565b6040516020818303038152906040528051906020012083606001516040518363ffffffff1660e01b8152600401610aa992919061116f565b6020604051808303816000875af1158015610ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aec9190611238565b5050505050565b604051602001610199906111af565b610b0a610f64565b610b12610f64565b836001600160a01b031663c769d1a1604051602001610b309061114a565b60405160208183030381529060405280519060200120856040518363ffffffff1660e01b8152600401610b6492919061116f565b602060405180830381865afa158015610b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba59190611186565b610bb05790506106e0565b836001600160a01b03166321f8a72184604051602001610bcf906111af565b60405160208183030381529060405280519060200120604051602001610bf69291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610c2a91815260200190565b602060405180830381865afa158015610c47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6b9190611238565b6001600160a01b039081168252604051908516906321f8a721908590610c93906020016111ee565b60405160208183030381529060405280519060200120604051602001610cba9291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610cee91815260200190565b602060405180830381865afa158015610d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2f9190611238565b81602001906001600160a01b031690816001600160a01b031681525050836001600160a01b03166321f8a72184604051602001610d6b90611126565b60405160208183030381529060405280519060200120604051602001610d929291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610dc691815260200190565b602060405180830381865afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190611238565b81604001906001600160a01b031690816001600160a01b031681525050836001600160a01b03166321f8a72184604051602001610e4390611213565b60405160208183030381529060405280519060200120604051602001610e6a9291906111d5565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401610e9e91815260200190565b602060405180830381865afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190611238565b6001600160a01b031660608201529392505050565b604051602001610199906111ee565b60405160200161019990611255565b6000604051602001610f2390611255565b60408051601f198184030181528282528051602091820120908301528101839052606001604051602081830303815290604052805190602001209050919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6001600160a01b0381168114610fa057600080fd5b50565b8035610fae81610f8b565b919050565b600080600060608486031215610fc857600080fd5b8335610fd381610f8b565b92506020840135610fe381610f8b565b929592945050506040919091013590565b6000806040838503121561100757600080fd5b823561101281610f8b565b946020939093013593505050565b60008060008084860360e081121561103757600080fd5b853561104281610f8b565b9450602086013561105281610f8b565b9350604086013592506080605f198201121561106d57600080fd5b50604051608081016001600160401b038111828210171561109e57634e487b7160e01b600052604160045260246000fd5b6040526110ad60608701610fa3565b81526110bb60808701610fa3565b60208201526110cc60a08701610fa3565b60408201526110dd60c08701610fa3565b6060820152939692955090935050565b6000806040838503121561110057600080fd5b823561110b81610f8b565b9150602083013561111b81610f8b565b809150509250929050565b6020808252600a90820152692627a723afaa27a5a2a760b11b604082015260600190565b6020808252600b908201526a13505492d15517d31254d560aa1b604082015260600190565b9182526001600160a01b0316602082015260400190565b60006020828403121561119857600080fd5b815180151581146111a857600080fd5b9392505050565b6020808252600c908201526b26a0a925a2aa2faa27a5a2a760a11b604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252600b908201526a24a72222ac2faa27a5a2a760a91b604082015260600190565b6020808252600b908201526a29a427a92a2faa27a5a2a760a91b604082015260600190565b60006020828403121561124a57600080fd5b81516111a881610f8b565b6020808252600b908201526a13505492d15517d4d0531560aa1b60408201526060019056fea2646970667358221220844ad5a66aa2a99a4b58cdd1c368ae9e9a4370d2ff2d56237393ed75aab90b7164736f6c63430008140033";

type MarketStoreUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketStoreUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MarketStoreUtils__factory extends ContractFactory {
  constructor(...args: MarketStoreUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MarketStoreUtils> {
    return super.deploy(overrides || {}) as Promise<MarketStoreUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MarketStoreUtils {
    return super.attach(address) as MarketStoreUtils;
  }
  override connect(signer: Signer): MarketStoreUtils__factory {
    return super.connect(signer) as MarketStoreUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketStoreUtilsInterface {
    return new utils.Interface(_abi) as MarketStoreUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MarketStoreUtils {
    return new Contract(address, _abi, signerOrProvider) as MarketStoreUtils;
  }
}
