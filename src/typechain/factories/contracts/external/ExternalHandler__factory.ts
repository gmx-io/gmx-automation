// @ts-nocheck
 /* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ExternalHandler,
  ExternalHandlerInterface,
} from "../../../contracts/external/ExternalHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "ExternalCallFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "targetsLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dataListLength",
        type: "uint256",
      },
    ],
    name: "InvalidExternalCallInput",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "InvalidExternalCallTarget",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "refundTokensLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "refundReceiversLength",
        type: "uint256",
      },
    ],
    name: "InvalidExternalReceiversInput",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "dataList",
        type: "bytes[]",
      },
      {
        internalType: "address[]",
        name: "refundTokens",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "refundReceivers",
        type: "address[]",
      },
    ],
    name: "makeExternalCalls",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50600160005561096b806100246000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d59922b014610030575b600080fd5b61004361003e3660046106b4565b610045565b005b61004d6101f4565b8251845114610081578351835160405163831e9f1160e01b8152600481019290925260248201526044015b60405180910390fd5b80518251146100b0578151815160405163e15f270160e01b815260048101929092526024820152604401610078565b60005b8451811015610100576100f88582815181106100d1576100d161084a565b60200260200101518583815181106100eb576100eb61084a565b602002602001015161024d565b6001016100b3565b5060005b82518110156101e35760008382815181106101215761012161084a565b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101599190610860565b602060405180830381865afa158015610176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019a9190610874565b905080156101d9576101d98484815181106101b7576101b761084a565b602002602001015182846001600160a01b03166103009092919063ffffffff16565b5050600101610104565b506101ee6001600055565b50505050565b6002600054036102465760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610078565b6002600055565b61025f826001600160a01b0316610357565b61027e578160405163be55c89560e01b81526004016100789190610860565b600080836001600160a01b03168360405161029991906108b1565b6000604051808303816000865af19150503d80600081146102d6576040519150601f19603f3d011682016040523d82523d6000602084013e6102db565b606091505b5091509150816101ee5780604051632cd7eb6360e11b815260040161007891906108f9565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610352908490610366565b505050565b6001600160a01b03163b151590565b60006103bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661043b9092919063ffffffff16565b90508051600014806103dc5750808060200190518101906103dc9190610913565b6103525760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610078565b606061044a8484600085610452565b949350505050565b6060824710156104b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610078565b600080866001600160a01b031685876040516104cf91906108b1565b60006040518083038185875af1925050503d806000811461050c576040519150601f19603f3d011682016040523d82523d6000602084013e610511565b606091505b50915091506105228783838761052d565b979650505050505050565b6060831561059a5782516000036105935761054785610357565b6105935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610078565b508161044a565b61044a83838151156105af5781518083602001fd5b8060405162461bcd60e51b815260040161007891906108f9565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610607576106076105c9565b604052919050565b60006001600160401b03821115610628576106286105c9565b5060051b60200190565b600082601f83011261064357600080fd5b81356106566106518261060f565b6105df565b8082825260208201915060208360051b86010192508583111561067857600080fd5b602085015b838110156106aa5780356001600160a01b038116811461069c57600080fd5b83526020928301920161067d565b5095945050505050565b600080600080608085870312156106ca57600080fd5b84356001600160401b038111156106e057600080fd5b6106ec87828801610632565b94505060208501356001600160401b0381111561070857600080fd5b8501601f8101871361071957600080fd5b80356107276106518261060f565b8082825260208201915060208360051b85010192508983111561074957600080fd5b602084015b838110156107eb5780356001600160401b0381111561076c57600080fd5b8501603f81018c1361077d57600080fd5b60208101356001600160401b03811115610799576107996105c9565b6107ac601f8201601f19166020016105df565b8181526040838301018e10156107c157600080fd5b8160408401602083013760006020838301015280865250505060208301925060208101905061074e565b50955050505060408501356001600160401b0381111561080a57600080fd5b61081687828801610632565b92505060608501356001600160401b0381111561083257600080fd5b61083e87828801610632565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0391909116815260200190565b60006020828403121561088657600080fd5b5051919050565b60005b838110156108a8578181015183820152602001610890565b50506000910152565b600082516108c381846020870161088d565b9190910192915050565b600081518084526108e581602086016020860161088d565b601f01601f19169290920160200192915050565b60208152600061090c60208301846108cd565b9392505050565b60006020828403121561092557600080fd5b8151801515811461090c57600080fdfea26469706673582212209362b6364b8414508febda88a58b1a6ddf6c4c66289917913b81c9013964110364736f6c634300081d0033";

type ExternalHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExternalHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExternalHandler__factory extends ContractFactory {
  constructor(...args: ExternalHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExternalHandler> {
    return super.deploy(overrides || {}) as Promise<ExternalHandler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExternalHandler {
    return super.attach(address) as ExternalHandler;
  }
  override connect(signer: Signer): ExternalHandler__factory {
    return super.connect(signer) as ExternalHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExternalHandlerInterface {
    return new utils.Interface(_abi) as ExternalHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExternalHandler {
    return new Contract(address, _abi, signerOrProvider) as ExternalHandler;
  }
}
